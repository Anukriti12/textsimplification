{"ast":null,"code":"var _jsxFileName = \"/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v2/client/src/components/Main/index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n// import { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\nconst Main = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n  const [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n  const [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n  const navigate = useNavigate();\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    try {\n      setUploadedFileName(file.name); // Set the uploaded file name\n      const fileReader = new FileReader();\n      fileReader.onload = async function () {\n        const typedArray = new Uint8Array(this.result);\n        const pdf = await pdfjsLib.getDocument(typedArray).promise;\n        let text = \"\";\n\n        // Extract text from all pages\n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          text += textContent.items.map(item => item.str).join(\" \");\n        }\n        setInputText(text);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error(\"Error reading PDF:\", error);\n      alert(\"Failed to extract text from the PDF.\");\n    }\n  };\n  const handleSubmit = async () => {\n    if (!inputText.trim()) return;\n    setIsLoading(true);\n    try {\n      var _data$response;\n      const prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n      const response = await fetch(\"http://localhost:5001/api/gpt4\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt\n        })\n      });\n      const data = await response.json();\n      const cleanedResponse = (data === null || data === void 0 ? void 0 : (_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.replace(/^\"|\"$/g, \"\")) || \"No response received.\";\n      setOutputText(cleanedResponse);\n      setIsSubmitted(true);\n      navigate(\"/review\", {\n        state: {\n          inputText,\n          outputText: cleanedResponse\n        }\n      });\n\n      // navigate(\"/simplify\");\n    } catch (error) {\n      console.error(\"Error fetching GPT-4 response:\", error);\n      setOutputText(\"An error occurred while fetching the response.\");\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.navbar,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Text Simplification Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.white_btn,\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.main_container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.description,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This app is about simplifying text for improved readability and accessibility.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload a document or paste your text to get a simplified version with just a click.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.form_container,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.input_area,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.text_container,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: styles.label,\n                htmlFor: \"inputText\",\n                children: \"Input Text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 6\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"inputText\",\n                className: styles.textarea,\n                placeholder: \"Original Text\",\n                value: inputText,\n                onChange: e => setInputText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 6\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.or_divider,\n              children: \"OR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.upload_area,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"fileUpload\",\n                className: styles.upload_box,\n                children: uploadedFileName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [\"File uploaded: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: uploadedFileName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 24\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [\"Click to Upload a PDF\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 9\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"...or drag and drop a file.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 9\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 6\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"fileUpload\",\n                accept: \"application/pdf\",\n                onChange: handleFileUpload,\n                className: styles.hidden_input\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 6\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.submit_btn,\n          onClick: handleSubmit,\n          disabled: !inputText.trim() || isLoading,\n          children: isLoading ? \"Processing...\" : \"Simplfiy Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n_s(Main, \"PhGCY4nGQxG8Sssj4WBO1go/AEw=\", false, function () {\n  return [useNavigate];\n});\n_c = Main;\nexport default Main;\n\n// \treturn (\n// \t  <>\n\n// \t\t<div className={styles.main_container}>\n// \t\t  {!isSubmitted ? (\n// \t\t\t<div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tThis app is about simplifying text for improved readability and\n// \t\t\t\taccessibility.\n// \t\t\t  </p>\n// \t\t\t  <p>\n// \t\t\t\tUpload a document or paste your text to get a simplified version\n// \t\t\t\twith just a click.\n// \t\t\t  </p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={styles.textarea}\n// \t\t\t\t\t  placeholder=\"Original Text\"\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\n// \t\t\t\t  {/* OR Divider */}\n// \t\t\t\t  <div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t  {/* File Upload */}\n// \t\t\t\t  <div className={styles.upload_area}>\n// \t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t  {uploadedFileName ? (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  ) : (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  Click to Upload a PDF\n// \t\t\t\t\t\t  <br />\n// \t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  )}\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<input\n// \t\t\t\t\t  type=\"file\"\n// \t\t\t\t\t  id=\"fileUpload\"\n// \t\t\t\t\t  accept=\"application/pdf\"\n// \t\t\t\t\t  onChange={handleFileUpload}\n// \t\t\t\t\t  className={styles.hidden_input}\n// \t\t\t\t\t/>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n// \t\t\t  {/* Submit Button */}\n// \t\t\t  <button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t  >\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n// \t\t\t  </button>\n// \t\t\t</div>\n// \t\t  ) : (\n// \t\t\t<div className={styles.form_container}>\n// \t\t\t  {/* Input and Output Boxes */}\n// \t\t\t  <div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n\n// \t\t\t\t{/* Save and Edit Buttons */}\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t{/* <button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button> */}\n\n// \t\t\t\t{isSaveButtonVisible && (\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t)}\n\n// \t\t\t\t{!isEditable && (\n// \t\t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t\t</button>\n// \t\t\t\t)}\n// \t\t\t\t</div>\n//       {/* Survey Prompt */}\n// \t  {showSurveyPrompt && (\n//               <div className={styles.survey_prompt}>\n//                 <p>\n//                   Please take the survey to help us improve.{\" \"}\n//                   <button\n//                     className={styles.link_btn}\n//                     onClick={() =>\n//                       navigate(\"/survey\", {\n//                         state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                       })\n//                     }\n//                   >\n//                     Take the Survey\n//                   </button>\n//                 </p>\n//               </div>\n//             )}\n\n// \t\t\t</div>\n// \t\t  )}\n// \t\t</div>\n// \t  </>\n// \t);\n//   };\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n// // import { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\n// import { jwtDecode } from \"jwt-decode\";\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n//     const navigate = useNavigate();\n\n// \tconst handleLogout = () => {\n// \t  localStorage.removeItem(\"token\");\n// \t  window.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t  if (!inputText.trim()) return;\n// \t  setIsLoading(true);\n\n// \t  try {\n// \t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t  method: \"POST\",\n// \t\t  headers: { \"Content-Type\": \"application/json\" },\n// \t\t  body: JSON.stringify({ prompt }),\n// \t\t});\n\n// \t\tconst data = await response.json();\n// \t\tconst cleanedResponse =\n// \t\t  data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\tsetOutputText(cleanedResponse);\n// \t\tsetIsSubmitted(true);\n// \t\t// navigate(\"/simplify\");\n// \t  } catch (error) {\n// \t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t  }\n\n// \t  setIsLoading(false);\n// \t};\n\n// \tconst handleSave = async (isAuto = false) => {\n// //\t\tsetIsSaveButtonVisible(false);\n// if (isAuto && isAuto.nativeEvent) {\n// \tisAuto = false; // Default behavior if called by an event\n// }\n\n// //console.log(\"isAuto:\", isAuto);\n// \t\t//console.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// \t\t  };\n\n// \t\t  const endpoint = isEditable\n// \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\n// \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\n// \t\t  const response = await fetch(endpoint, {\n// \t\t\tmethod,\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n// \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// \t\t\t//setShowSurveyPrompt(true); \n// \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// \t\t\tconsole.log(\"isEditable\", isEditable);\n// \t\t\tconsole.log(\"isAuto\", isAuto);\n// \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// \t\t\t  }\n// \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(false);\n// \t\t\t}\n// \t\t\telse if (isSaveButtonVisible && isEditable)\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t} \n// \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t}\n\n// \t\t\tif (isEditable) {\n// \t\t\t {\n// \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// \t\t\t  // disable saving button\n// \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// \t\t\t   // Show the survey prompt\n// \t\t\t // setShowSurveyPrompt(true); \n// \t\t\t }\n// \t\t  }} else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n\n// \t\t//setShowSurveyPrompt(true);\n// \t\t// Page for survey (only save -- 2 boxes, else edit+save -- 3 boxes) -- fetch inputText, outputText and editedText. If outputText is same as editedText, then show only 2 text boxes, else 3 text boxes (all not editable) with 5 questions below.\n// \t\t        // Navigate to survey page\n\n// \t\t//navigate(\"/survey\", { state: { email: user.email, inputText } });\n// \t\t//isAuto = false;\n// \t\t//navigate(\"/save\"); // Navigate to save page\n// \t  };\n\n// \tconst handleEdit = () => {\n// \t  let isAuto = true;\n// \t  handleSave(isAuto); // Save the current output text\n// \t  setIsEditable(true); // Enable editing mode\n// \t  setIsSaveButtonVisible(true);\n\n// \t  //navigate(\"/edit\"); // Navigate to edit page\n\n// \t  //setShowSurveyPrompt(false);\n\n// \t  // Add back button\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t  const file = event.target.files[0];\n// \t  if (!file) return;\n\n// \t  try {\n// \t\tsetUploadedFileName(file.name); // Set the uploaded file name\n// \t\tconst fileReader = new FileReader();\n// \t\tfileReader.onload = async function () {\n// \t\t  const typedArray = new Uint8Array(this.result);\n\n// \t\t  const pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t  let text = \"\";\n\n// \t\t  // Extract text from all pages\n// \t\t  for (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\tconst page = await pdf.getPage(i);\n// \t\t\tconst textContent = await page.getTextContent();\n// \t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t  }\n\n// \t\t  setInputText(text);\n// \t\t};\n// \t\tfileReader.readAsArrayBuffer(file);\n// \t  } catch (error) {\n// \t\tconsole.error(\"Error reading PDF:\", error);\n// \t\talert(\"Failed to extract text from the PDF.\");\n// \t  }\n// \t};\n\n// \treturn (\n// \t  <>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t  <h1>Text Simplification Study</h1>\n// \t\t  <button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t  </button>\n// \t\t</nav>\n\n// \t\t{/* Main Content */}\n// \t\t<div className={styles.main_container}>\n// \t\t  {!isSubmitted ? (\n// \t\t\t<div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tThis app is about simplifying text for improved readability and\n// \t\t\t\taccessibility.\n// \t\t\t  </p>\n// \t\t\t  <p>\n// \t\t\t\tUpload a document or paste your text to get a simplified version\n// \t\t\t\twith just a click.\n// \t\t\t  </p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={styles.textarea}\n// \t\t\t\t\t  placeholder=\"Original Text\"\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\n// \t\t\t\t  {/* OR Divider */}\n// \t\t\t\t  <div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t  {/* File Upload */}\n// \t\t\t\t  <div className={styles.upload_area}>\n// \t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t  {uploadedFileName ? (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  ) : (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  Click to Upload a PDF\n// \t\t\t\t\t\t  <br />\n// \t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  )}\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<input\n// \t\t\t\t\t  type=\"file\"\n// \t\t\t\t\t  id=\"fileUpload\"\n// \t\t\t\t\t  accept=\"application/pdf\"\n// \t\t\t\t\t  onChange={handleFileUpload}\n// \t\t\t\t\t  className={styles.hidden_input}\n// \t\t\t\t\t/>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n// \t\t\t  {/* Submit Button */}\n// \t\t\t  <button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t  >\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n// \t\t\t  </button>\n// \t\t\t</div>\n// \t\t  ) : (\n// \t\t\t<div className={styles.form_container}>\n// \t\t\t  {/* Input and Output Boxes */}\n// \t\t\t  <div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n\n// \t\t\t\t{/* Save and Edit Buttons */}\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t{/* <button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button> */}\n\n// \t\t\t\t{isSaveButtonVisible && (\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t)}\n\n// \t\t\t\t{!isEditable && (\n// \t\t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t\t</button>\n// \t\t\t\t)}\n// \t\t\t\t</div>\n//       {/* Survey Prompt */}\n// \t  {showSurveyPrompt && (\n//               <div className={styles.survey_prompt}>\n//                 <p>\n//                   Please take the survey to help us improve.{\" \"}\n//                   <button\n//                     className={styles.link_btn}\n//                     onClick={() =>\n//                       navigate(\"/survey\", {\n//                         state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                       })\n//                     }\n//                   >\n//                     Take the Survey\n//                   </button>\n//                 </p>\n//               </div>\n//             )}\n\n// \t\t\t</div>\n// \t\t  )}\n// \t\t</div>\n// \t  </>\n// \t);\n//   };\n\n// export default Main;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n\n// \t};\n\n// \tconst handleSave = async () => {\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  console.log(\"User info from localStorage:\", user);\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\toutputText,\n// \t\t\teditedText\n// \t\t  };\n\n// \t\t  const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n// \t\t\talert(\"Simplification saved successfully!\");\n// \t\t  } else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n// \t  };\n\n// \tconst handleEdit = () => {\n// \t\t\talert(\"Output edited!\");\n// \t\t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tsetUploadedFileName(file.name); // Set the uploaded file name\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n// \treturn (\n// \t\t<>\n// \t\t  {/* Navbar */}\n// \t\t  <nav className={styles.navbar}>\n// \t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t  Logout\n// \t\t\t</button>\n// \t\t  </nav>\n\n// \t\t  {/* Main Content */}\n// \t\t  <div className={styles.main_container}>\n// \t\t\t{!isSubmitted ? (\n\n// \t\t\t\t\t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t  This app is about simplifying text for improved readability and\n// \t\t\t  accessibility. \n// \t\t\t  </p>\n// \t\t  <p>Upload a document or paste your text to get a simplified\n// \t\t\t  version with just a click.\n// \t\t\t</p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* OR Divider */}\n// \t\t\t\t<div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t{/* File Upload */}\n// \t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t  <label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t) : (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t)}\n// \t\t\t\t  </label>\n// \t\t\t\t  <input\n// \t\t\t\t\ttype=\"file\"\n// \t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t  />\n// \t\t\t\t</div>\n// \t\t\t\t</div>\n// \t \t\t\t</div>\n// \t\t\t\t{/* Submit Button */}\n// \t\t\t\t<button\n// \t\t\t\t  className={styles.submit_btn}\n// \t\t\t\t  onClick={handleSubmit}\n// \t\t\t\t  disabled={!inputText.trim() || isLoading}\n// \t\t\t\t>\n// \t\t\t\t  {isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t</button>\n// \t\t\t  </div>\n// \t\t\t) : (\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input and Output Boxes */}\n// \t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t  {/* Input Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\n// \t\t\t\t  {/* Output Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\t  System-generated Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"outputText\"\n// \t\t\t\t\t  className={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={outputText}\n// \t\t\t\t\t  onChange={(e) => setOutputText(e.target.value)}\n\n// \t\t\t\t\t  placeholder=\"Output\"\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t</button>\n// \t\t\t\t</div>\n\n// \t\t\t  </div>\n// \t\t\t)}\n// \t\t  </div>\n// \t\t</>\n// \t  );\n// \t};\t  \n// export default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","styles","useNavigate","pdfjsLib","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","Main","_s","inputText","setInputText","outputText","setOutputText","isLoading","setIsLoading","isSubmitted","setIsSubmitted","isEditable","setIsEditable","uploadedFileName","setUploadedFileName","isSaveButtonVisible","setIsSaveButtonVisible","showSurveyPrompt","setShowSurveyPrompt","navigate","handleLogout","localStorage","removeItem","window","location","reload","handleFileUpload","event","file","target","files","name","fileReader","FileReader","onload","typedArray","Uint8Array","result","pdf","getDocument","promise","text","i","numPages","page","getPage","textContent","getTextContent","items","map","item","str","join","readAsArrayBuffer","error","console","alert","handleSubmit","trim","_data$response","prompt","response","fetch","method","headers","body","JSON","stringify","data","json","cleanedResponse","replace","state","children","className","navbar","fileName","_jsxFileName","lineNumber","columnNumber","white_btn","onClick","main_container","description","form_container","input_area","text_container","label","htmlFor","id","textarea","placeholder","value","onChange","e","or_divider","upload_area","upload_box","type","accept","hidden_input","submit_btn","disabled","_c","$RefreshReg$"],"sources":["/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v2/client/src/components/Main/index.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n// import { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\n\n\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\nconst Main = () => {\n\n\tconst [inputText, setInputText] = useState(\"\");\n\tconst [outputText, setOutputText] = useState(\"\");\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n\tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n\tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\tconst navigate = useNavigate();\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n\n\n  \tconst handleFileUpload = async (event) => {\n\t  const file = event.target.files[0];\n\t  if (!file) return;\n  \n\t  try {\n\t\tsetUploadedFileName(file.name); // Set the uploaded file name\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = async function () {\n\t\t  const typedArray = new Uint8Array(this.result);\n  \n\t\t  const pdf = await pdfjsLib.getDocument(typedArray).promise;\n\t\t  let text = \"\";\n  \n\t\t  // Extract text from all pages\n\t\t  for (let i = 1; i <= pdf.numPages; i++) {\n\t\t\tconst page = await pdf.getPage(i);\n\t\t\tconst textContent = await page.getTextContent();\n\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n\t\t  }\n  \n\t\t  setInputText(text);\n\t\t};\n\t\tfileReader.readAsArrayBuffer(file);\n\t  } catch (error) {\n\t\tconsole.error(\"Error reading PDF:\", error);\n\t\talert(\"Failed to extract text from the PDF.\");\n\t  }\n\t};\n \n  \tconst handleSubmit = async () => {\n\t  if (!inputText.trim()) return;\n\t  setIsLoading(true);\n  \n\t  try {\n\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n  \n\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n\t\t  method: \"POST\",\n\t\t  headers: { \"Content-Type\": \"application/json\" },\n\t\t  body: JSON.stringify({ prompt }),\n\t\t});\n  \n\t\tconst data = await response.json();\n\t\tconst cleanedResponse =\n\t\t  data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n\t\tsetOutputText(cleanedResponse);\n\t\tsetIsSubmitted(true);\n\t\tnavigate(\"/review\", { state: { inputText, outputText: cleanedResponse } });\n\n\t\t// navigate(\"/simplify\");\n\t  } catch (error) {\n\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n\t\tsetOutputText(\"An error occurred while fetching the response.\");\n\t  }\n  \n\t  setIsLoading(false);\n\t};\n\n  return (\n    <>\n      <nav className={styles.navbar}>\n        <h1>Text Simplification Study</h1>\n        <button className={styles.white_btn} onClick={handleLogout}>\n          Logout\n        </button>\n      </nav>\n\n\t  <div className={styles.main_container}>\n\t\n\t\t\t<div className={styles.description}>\n\t\t\t  <p>\n\t\t\t\tThis app is about simplifying text for improved readability and\n\t\t\t\taccessibility.\n\t\t\t  </p>\n\t\t\t  <p>\n\t\t\t\tUpload a document or paste your text to get a simplified version\n\t\t\t\twith just a click.\n\t\t\t  </p>\n  \n\t\t\t  <div className={styles.form_container}>\n\t\t\t\t{/* Input Area */}\n\t\t\t\t<div className={styles.input_area}>\n\t\t\t\t  <div className={styles.text_container}>\n\t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n\t\t\t\t\t  Input Text\n\t\t\t\t\t</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t  id=\"inputText\"\n\t\t\t\t\t  className={styles.textarea}\n\t\t\t\t\t  placeholder=\"Original Text\"\n\t\t\t\t\t  value={inputText}\n\t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n\t\t\t\t\t></textarea>\n\t\t\t\t  </div>\n  \n\t\t\t\t  {/* OR Divider */}\n\t\t\t\t  <div className={styles.or_divider}>OR</div>\n  \n\t\t\t\t  {/* File Upload */}\n\t\t\t\t  <div className={styles.upload_area}>\n\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n\t\t\t\t\t  {uploadedFileName ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n\t\t\t\t\t\t</>\n\t\t\t\t\t  ) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  Click to Upload a PDF\n\t\t\t\t\t\t  <br />\n\t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t  )}\n\t\t\t\t\t</label>\n\t\t\t\t\t<input\n\t\t\t\t\t  type=\"file\"\n\t\t\t\t\t  id=\"fileUpload\"\n\t\t\t\t\t  accept=\"application/pdf\"\n\t\t\t\t\t  onChange={handleFileUpload}\n\t\t\t\t\t  className={styles.hidden_input}\n\t\t\t\t\t/>\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t  {/* Submit Button */}\n\t\t\t  <button\n\t\t\t\tclassName={styles.submit_btn}\n\t\t\t\tonClick={handleSubmit}\n\t\t\t\tdisabled={!inputText.trim() || isLoading}\n\t\t\t  >\n\t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n\t\t\t  </button>\n\t\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Main;\n \n// \treturn (\n// \t  <>\n\n// \t\t<div className={styles.main_container}>\n// \t\t  {!isSubmitted ? (\n// \t\t\t<div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tThis app is about simplifying text for improved readability and\n// \t\t\t\taccessibility.\n// \t\t\t  </p>\n// \t\t\t  <p>\n// \t\t\t\tUpload a document or paste your text to get a simplified version\n// \t\t\t\twith just a click.\n// \t\t\t  </p>\n  \n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={styles.textarea}\n// \t\t\t\t\t  placeholder=\"Original Text\"\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n  \n// \t\t\t\t  {/* OR Divider */}\n// \t\t\t\t  <div className={styles.or_divider}>OR</div>\n  \n// \t\t\t\t  {/* File Upload */}\n// \t\t\t\t  <div className={styles.upload_area}>\n// \t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t  {uploadedFileName ? (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  ) : (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  Click to Upload a PDF\n// \t\t\t\t\t\t  <br />\n// \t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  )}\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<input\n// \t\t\t\t\t  type=\"file\"\n// \t\t\t\t\t  id=\"fileUpload\"\n// \t\t\t\t\t  accept=\"application/pdf\"\n// \t\t\t\t\t  onChange={handleFileUpload}\n// \t\t\t\t\t  className={styles.hidden_input}\n// \t\t\t\t\t/>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n// \t\t\t  {/* Submit Button */}\n// \t\t\t  <button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t  >\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n// \t\t\t  </button>\n// \t\t\t</div>\n// \t\t  ) : (\n// \t\t\t<div className={styles.form_container}>\n// \t\t\t  {/* Input and Output Boxes */}\n// \t\t\t  <div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n  \n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n\n\n// \t\t\t\t{/* Save and Edit Buttons */}\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t{/* <button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button> */}\n\n// \t\t\t\t{isSaveButtonVisible && (\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t)}\n\n// \t\t\t\t{!isEditable && (\n// \t\t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t\t</button>\n// \t\t\t\t)}\n// \t\t\t\t</div>\n//       {/* Survey Prompt */}\n// \t  {showSurveyPrompt && (\n//               <div className={styles.survey_prompt}>\n//                 <p>\n//                   Please take the survey to help us improve.{\" \"}\n//                   <button\n//                     className={styles.link_btn}\n//                     onClick={() =>\n//                       navigate(\"/survey\", {\n//                         state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                       })\n//                     }\n//                   >\n//                     Take the Survey\n//                   </button>\n//                 </p>\n//               </div>\n//             )}\n\n// \t\t\t</div>\n// \t\t  )}\n// \t\t</div>\n// \t  </>\n// \t);\n//   };\n  \n\n  \n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n// import { useNavigate } from \"react-router-dom\";\n// import * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n// // import { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\n// import { jwtDecode } from \"jwt-decode\";\n\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n//     const navigate = useNavigate();\n\n// \tconst handleLogout = () => {\n// \t  localStorage.removeItem(\"token\");\n// \t  window.location.reload();\n// \t};\n  \n// \tconst handleSubmit = async () => {\n// \t  if (!inputText.trim()) return;\n// \t  setIsLoading(true);\n  \n// \t  try {\n// \t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n  \n// \t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t  method: \"POST\",\n// \t\t  headers: { \"Content-Type\": \"application/json\" },\n// \t\t  body: JSON.stringify({ prompt }),\n// \t\t});\n  \n// \t\tconst data = await response.json();\n// \t\tconst cleanedResponse =\n// \t\t  data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\tsetOutputText(cleanedResponse);\n// \t\tsetIsSubmitted(true);\n// \t\t// navigate(\"/simplify\");\n// \t  } catch (error) {\n// \t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t  }\n  \n// \t  setIsLoading(false);\n// \t};\n\n\n  \n// \tconst handleSave = async (isAuto = false) => {\n// //\t\tsetIsSaveButtonVisible(false);\n// if (isAuto && isAuto.nativeEvent) {\n// \tisAuto = false; // Default behavior if called by an event\n// }\n\n// //console.log(\"isAuto:\", isAuto);\n// \t\t//console.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n\t\t\n\t\t  \n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\t  \n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// \t\t  };\n\t  \n// \t\t  const endpoint = isEditable\n// \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\t  \n// \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\t  \n// \t\t  const response = await fetch(endpoint, {\n// \t\t\tmethod,\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\t  \n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n// \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// \t\t\t//setShowSurveyPrompt(true); \n// \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// \t\t\tconsole.log(\"isEditable\", isEditable);\n// \t\t\tconsole.log(\"isAuto\", isAuto);\n// \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// \t\t\t  }\n// \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(false);\n// \t\t\t}\n// \t\t\telse if (isSaveButtonVisible && isEditable)\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t} \n// \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t}\n\n\n// \t\t\tif (isEditable) {\n// \t\t\t {\n// \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// \t\t\t  // disable saving button\n// \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// \t\t\t   // Show the survey prompt\n// \t\t\t // setShowSurveyPrompt(true); \n// \t\t\t }\n// \t\t  }} else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n\n// \t\t//setShowSurveyPrompt(true);\n// \t\t// Page for survey (only save -- 2 boxes, else edit+save -- 3 boxes) -- fetch inputText, outputText and editedText. If outputText is same as editedText, then show only 2 text boxes, else 3 text boxes (all not editable) with 5 questions below.\n// \t\t        // Navigate to survey page\n\t\t\t\t\n// \t\t//navigate(\"/survey\", { state: { email: user.email, inputText } });\n// \t\t//isAuto = false;\n// \t\t//navigate(\"/save\"); // Navigate to save page\n// \t  };\n\t  \n\t\n  \n// \tconst handleEdit = () => {\n// \t  let isAuto = true;\n// \t  handleSave(isAuto); // Save the current output text\n// \t  setIsEditable(true); // Enable editing mode\n// \t  setIsSaveButtonVisible(true);\n\n// \t  //navigate(\"/edit\"); // Navigate to edit page\n\n// \t  //setShowSurveyPrompt(false);\n\n// \t  // Add back button\n// \t};\n  \n// \tconst handleFileUpload = async (event) => {\n// \t  const file = event.target.files[0];\n// \t  if (!file) return;\n  \n// \t  try {\n// \t\tsetUploadedFileName(file.name); // Set the uploaded file name\n// \t\tconst fileReader = new FileReader();\n// \t\tfileReader.onload = async function () {\n// \t\t  const typedArray = new Uint8Array(this.result);\n  \n// \t\t  const pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t  let text = \"\";\n  \n// \t\t  // Extract text from all pages\n// \t\t  for (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\tconst page = await pdf.getPage(i);\n// \t\t\tconst textContent = await page.getTextContent();\n// \t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t  }\n  \n// \t\t  setInputText(text);\n// \t\t};\n// \t\tfileReader.readAsArrayBuffer(file);\n// \t  } catch (error) {\n// \t\tconsole.error(\"Error reading PDF:\", error);\n// \t\talert(\"Failed to extract text from the PDF.\");\n// \t  }\n// \t};\n  \n// \treturn (\n// \t  <>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t  <h1>Text Simplification Study</h1>\n// \t\t  <button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t  </button>\n// \t\t</nav>\n  \n// \t\t{/* Main Content */}\n// \t\t<div className={styles.main_container}>\n// \t\t  {!isSubmitted ? (\n// \t\t\t<div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tThis app is about simplifying text for improved readability and\n// \t\t\t\taccessibility.\n// \t\t\t  </p>\n// \t\t\t  <p>\n// \t\t\t\tUpload a document or paste your text to get a simplified version\n// \t\t\t\twith just a click.\n// \t\t\t  </p>\n  \n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={styles.textarea}\n// \t\t\t\t\t  placeholder=\"Original Text\"\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n  \n// \t\t\t\t  {/* OR Divider */}\n// \t\t\t\t  <div className={styles.or_divider}>OR</div>\n  \n// \t\t\t\t  {/* File Upload */}\n// \t\t\t\t  <div className={styles.upload_area}>\n// \t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t  {uploadedFileName ? (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  ) : (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  Click to Upload a PDF\n// \t\t\t\t\t\t  <br />\n// \t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  )}\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<input\n// \t\t\t\t\t  type=\"file\"\n// \t\t\t\t\t  id=\"fileUpload\"\n// \t\t\t\t\t  accept=\"application/pdf\"\n// \t\t\t\t\t  onChange={handleFileUpload}\n// \t\t\t\t\t  className={styles.hidden_input}\n// \t\t\t\t\t/>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n// \t\t\t  {/* Submit Button */}\n// \t\t\t  <button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t  >\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n// \t\t\t  </button>\n// \t\t\t</div>\n// \t\t  ) : (\n// \t\t\t<div className={styles.form_container}>\n// \t\t\t  {/* Input and Output Boxes */}\n// \t\t\t  <div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n  \n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n\n\n// \t\t\t\t{/* Save and Edit Buttons */}\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t{/* <button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button> */}\n\n// \t\t\t\t{isSaveButtonVisible && (\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t)}\n\n// \t\t\t\t{!isEditable && (\n// \t\t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t\t</button>\n// \t\t\t\t)}\n// \t\t\t\t</div>\n//       {/* Survey Prompt */}\n// \t  {showSurveyPrompt && (\n//               <div className={styles.survey_prompt}>\n//                 <p>\n//                   Please take the survey to help us improve.{\" \"}\n//                   <button\n//                     className={styles.link_btn}\n//                     onClick={() =>\n//                       navigate(\"/survey\", {\n//                         state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                       })\n//                     }\n//                   >\n//                     Take the Survey\n//                   </button>\n//                 </p>\n//               </div>\n//             )}\n\n// \t\t\t</div>\n// \t\t  )}\n// \t\t</div>\n// \t  </>\n// \t);\n//   };\n  \n// export default Main;\n  \n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n\n\t\t\n// \t};\n\n\t\n\n// \tconst handleSave = async () => {\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  console.log(\"User info from localStorage:\", user);\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\t  \n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\toutputText,\n// \t\t\teditedText\n// \t\t  };\n\t  \n// \t\t  const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\t  \n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n// \t\t\talert(\"Simplification saved successfully!\");\n// \t\t  } else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n// \t  };\n\t  \n\n// \tconst handleEdit = () => {\n// \t\t\talert(\"Output edited!\");\n// \t\t};\n\t  \n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tsetUploadedFileName(file.name); // Set the uploaded file name\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n// \treturn (\n// \t\t<>\n// \t\t  {/* Navbar */}\n// \t\t  <nav className={styles.navbar}>\n// \t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t  Logout\n// \t\t\t</button>\n// \t\t  </nav>\n\t\n\n\t  \n\t\n// \t\t  {/* Main Content */}\n// \t\t  <div className={styles.main_container}>\n// \t\t\t{!isSubmitted ? (\n\n// \t\t\t\t\t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t  This app is about simplifying text for improved readability and\n// \t\t\t  accessibility. \n// \t\t\t  </p>\n// \t\t  <p>Upload a document or paste your text to get a simplified\n// \t\t\t  version with just a click.\n// \t\t\t</p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\t\t\t\t\n// \t\t\t\t{/* OR Divider */}\n// \t\t\t\t<div className={styles.or_divider}>OR</div>\n\t  \n// \t\t\t\t{/* File Upload */}\n// \t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t  <label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t) : (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t)}\n// \t\t\t\t  </label>\n// \t\t\t\t  <input\n// \t\t\t\t\ttype=\"file\"\n// \t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t  />\n// \t\t\t\t</div>\n// \t\t\t\t</div>\n// \t \t\t\t</div>\n// \t\t\t\t{/* Submit Button */}\n// \t\t\t\t<button\n// \t\t\t\t  className={styles.submit_btn}\n// \t\t\t\t  onClick={handleSubmit}\n// \t\t\t\t  disabled={!inputText.trim() || isLoading}\n// \t\t\t\t>\n// \t\t\t\t  {isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t</button>\n// \t\t\t  </div>\n// \t\t\t) : (\n\t\t\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input and Output Boxes */}\n// \t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t  {/* Input Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\t  \n// \t\t\t\t  {/* Output Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\t  System-generated Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"outputText\"\n// \t\t\t\t\t  className={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={outputText}\n// \t\t\t\t\t  onChange={(e) => setOutputText(e.target.value)}\n\t\t\t\n// \t\t\t\t\t  placeholder=\"Output\"\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t</button>\n// \t\t\t\t</div>\n\n\n// \t\t\t  </div>\n// \t\t\t)}\n// \t\t  </div>\n// \t\t</>\n// \t  );\n// \t};\t  \n// export default Main;"],"mappings":"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;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAsG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}