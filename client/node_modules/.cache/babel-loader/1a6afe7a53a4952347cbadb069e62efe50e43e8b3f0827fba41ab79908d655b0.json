{"ast":null,"code":"var _jsxFileName = \"/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v3/client/src/components/Review/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport DiffMatchPatch from \"diff-match-patch\";\nimport { FaRegCopy, FaDownload } from \"react-icons/fa\"; // Import FontAwesome icons\nimport { saveAs } from \"file-saver\";\nimport styles from \"./styles.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Review = () => {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const {\n    inputText,\n    outputText: initialOutputText,\n    editHistory: restoredEditHistory\n  } = state || {\n    inputText: \"\",\n    outputText: \"\",\n    editHistory: []\n  };\n  const [outputText, setOutputText] = useState(initialOutputText);\n  const [editHistory, setEditHistory] = useState(restoredEditHistory || []);\n  const [diffHtml, setDiffHtml] = useState(\"\");\n  const [isSaveButtonEnabled, setIsSaveButtonEnabled] = useState(false);\n  const navigate = useNavigate();\n  const [isEditable, setIsEditable] = useState(false);\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n  const [showDifference, setShowDifference] = useState(false);\n\n  //   const navigate = useNavigate();\n\n  const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n  const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n  const [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    navigate(\"/Login\");\n    // window.location.reload();\n  };\n  const saveSimplification = async () => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n      const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: user._id,\n          inputText,\n          outputText\n        })\n      });\n      if (response.ok) {\n        console.log(\"Simplification saved successfully.\");\n      } else {\n        const error = await response.json();\n        console.error(\"Error saving simplification:\", error.message);\n      }\n    } catch (error) {\n      console.error(\"Error saving simplification:\", error);\n    }\n  };\n  const saveEditToHistory = async editedText => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n      const response = await fetch(\"http://localhost:8080/api/simplifications/edit\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: user.email,\n          inputText,\n          editedText\n        })\n      });\n      if (response.ok) {\n        console.log(\"Edit saved to history.\");\n      } else {\n        const error = await response.json();\n        console.error(\"Error saving edit to history:\", error.message);\n      }\n    } catch (error) {\n      console.error(\"Error saving edit to history:\", error);\n    }\n  };\n  const saveFinalOutput = async () => {\n    setIsLoading(true);\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n      const response = await fetch(\"http://localhost:8080/api/simplifications/save\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: user.email,\n          inputText,\n          finalText: outputText\n        })\n      });\n      const timestamp = new Date().toISOString();\n      setEditHistory(prev => [...prev, {\n        timestamp,\n        text: outputText\n      }]);\n      if (response.ok) {\n        console.log(\"Final output saved successfully.\");\n        setIsSaveButtonEnabled(false); // Disable save button\n        setShowSurveyPrompt(true); // Ensure survey prompt is displayed\n      } else {\n        const error = await response.json();\n        console.error(\"Error saving final output:\", error.message);\n      }\n    } catch (error) {\n      console.error(\"Error saving final output:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleEditChange = event => {\n    const updatedText = event.target.value;\n    setOutputText(updatedText);\n    setIsSaveButtonEnabled(true); // Enable save button on edit\n\n    // const timestamp = new Date().toISOString();\n    // setEditHistory((prev) => [\n    //   ...prev,\n    //   { timestamp, text: updatedText },\n    // ]);\n\n    // Save the change to edit history in MongoDB\n    saveEditToHistory(updatedText);\n  };\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert(\"Copied to clipboard!\");\n    }, err => {\n      console.error(\"Failed to copy text:\", err);\n    });\n  };\n  const handleDownload = (text, filename, format) => {\n    const blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    saveAs(blob, `${filename}.${format}`);\n  };\n\n  // useEffect(() => {\n  //   // Save initial input and output text in MongoDB\n  //   saveSimplification();\n  // }, []);\n  useEffect(() => {\n    const diffResult = generateDiff(inputText, outputText);\n    setDiffHtml(diffResult);\n    // saveSimplification();\n  }, [inputText, outputText]);\n  useEffect(() => {\n    saveSimplification(); // Save the initial inputText and outputText\n    setIsSaveButtonEnabled(true);\n    const savedState = JSON.parse(localStorage.getItem(\"reviewPageState\"));\n    if (savedState) {\n      setOutputText(savedState.outputText || \"\");\n      setEditHistory(savedState.editHistory || []);\n    }\n  }, []);\n  const handleHistoryClick = edit => {\n    setOutputText(edit.text);\n    const diffResult = generateDiff(inputText, edit.text);\n    setDiffHtml(diffResult);\n    setIsEditable(false);\n  };\n\n  // Function to calculate and render diff\n  const generateDiff = (input, output) => {\n    const dmp = new DiffMatchPatch();\n    const diffs = dmp.diff_main(input, output);\n    dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n    return dmp.diff_prettyHtml(diffs);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.navbar,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Text Simplification Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.white_btn,\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.sidebar} ${isSidebarVisible ? styles.expanded : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.historyIcon,\n          onClick: () => setIsSidebarVisible(!isSidebarVisible),\n          children: [\"\\uD83D\\uDD52   \", /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: \"15px\"\n            },\n            children: \" History \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 19\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), isSidebarVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.historyContent,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.closeButton,\n            onClick: () => setIsSidebarVisible(false),\n            children: \"\\u2716\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: styles.historyList,\n            children: editHistory.map((edit, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: styles.historyItem,\n              onClick: () => handleHistoryClick(edit),\n              children: edit.timestamp\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.description,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Review the generated output and make any necessary edits. Changes are highlighted in real-time for easy visualization.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 4\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.textareas_container,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.labelWrapper,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: styles.label,\n                htmlFor: \"inputText\",\n                children: \"Input Text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.actions,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.copyIcon,\n                  onClick: () => handleCopy(inputText),\n                  title: \"Copy to Clipboard\",\n                  children: \"\\uD83D\\uDCCB \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 7\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.copyIcon,\n                  onClick: () => handleDownload(inputText, \"InputText\", \"txt\"),\n                  title: \"Download as TXT\",\n                  children: \"\\uD83D\\uDCE5 \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 9\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"inputText\",\n              className: `${styles.textarea} ${styles.side_by_side}`,\n              value: inputText,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.labelWrapper,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: styles.label,\n                htmlFor: \"outputText\",\n                children: \"System-generated Text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.actions,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.copyIcon,\n                  onClick: () => handleCopy(outputText),\n                  title: \"Copy to Clipboard\",\n                  children: \"\\uD83D\\uDCCB \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 7\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.copyIcon,\n                  onClick: () => handleDownload(outputText, \"GeneratedText\", \"txt\"),\n                  title: \"Download as TXT\",\n                  children: \"\\uD83D\\uDCE5 \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 7\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: styles.toggleDiffBtn,\n                  onClick: () => setShowDifference(!showDifference),\n                  children: showDifference ? \"Hide Difference\" : \"Show Difference\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 7\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 3\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"outputText\",\n              className: `${styles.output_box} ${styles.side_by_side}`,\n              value: outputText,\n              onChange: handleEditChange,\n              readOnly: isEditable,\n              placeholder: \"Output\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 3\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 1\n          }, this), showDifference && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.labelWrapper,\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                className: styles.label,\n                htmlFor: \"outputText\",\n                children: \"Difference from original text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 5\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"diffText\",\n              className: `${styles.output_box} ${styles.side_by_side}`,\n              dangerouslySetInnerHTML: {\n                __html: diffHtml\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 6\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.button_container,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.save_btn} ${styles.text_btn}`,\n            onClick: saveFinalOutput,\n            disabled: !isSaveButtonEnabled || isLoading,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 4\n        }, this), showSurveyPrompt && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.survey_prompt,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Please take the survey to help us improve \", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.link_btn\n              //   onClick={() => \n              //     navigate(\"/survey\", {\n              //       //state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n              //       state: {\n              //         email: JSON.parse(localStorage.getItem(\"user\")).email,\n              //         inputText,\n              //         outputText, // Pass the current output text as well\n              //         editHistory,\n              //       },\n              //     })\n              //   }\n              // >\n              ,\n              onClick: () => {\n                const reviewPageState = {\n                  inputText,\n                  outputText,\n                  editHistory\n                };\n                localStorage.setItem(\"reviewPageState\", JSON.stringify(reviewPageState));\n                navigate(\"/survey\", {\n                  state: {\n                    email: JSON.parse(localStorage.getItem(\"user\")).email,\n                    inputText,\n                    outputText,\n                    editHistory\n                  }\n                });\n              },\n              children: \"Take the Survey\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Review, \"+m2MqHWqdhNdBJCg4y9bVE5L30I=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Review;\nexport default Review;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import { FaRegCopy, FaDownload } from \"react-icons/fa\"; // Import FontAwesome copy icon\n// import { FaCopy } from \"react-icons/fa\";\n// import { saveAs } from \"file-saver\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n//   const { state } = useLocation();\n//   const { inputText, outputText: initialOutputText } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n//   const [diffHtml, setDiffHtml] = useState(\"\");\n//   const [isEditable, setIsEditable] = useState(false);\n//   const [editHistory, setEditHistory] = useState([]);\n//   const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//   const [showDifference, setShowDifference] = useState(false);\n\n//   const navigate = useNavigate();\n\n//   const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n//   const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n//   // Function to calculate and render diff\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n// \tnavigate(\"/Login\"); \n//    // window.location.reload();\n//   };\n\n//    // Function to save the original input and output text to MongoDB\n//    const saveSimplification = async () => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n\n//       const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           userId: user._id,\n//           inputText,\n//           outputText,\n//         }),\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Simplification saved successfully.\");\n//       } else {\n//         const data = await response.json();\n//         console.error(\"Error saving simplification:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving simplification:\", error);\n//     }\n//   };\n\n//   // Function to save an edit to MongoDB\n//   const saveEdit = async (editedText) => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n\n//       const response = await fetch(\"http://localhost:8080/api/simplifications/edit\", {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           email: user.email,\n//           inputText,\n//           editedText,\n//         }),\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Edit saved successfully.\");\n//       } else {\n//         const data = await response.json();\n//         console.error(\"Error saving edit:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving edit:\", error);\n//     }\n//   };\n\n//   // Effect to calculate diff whenever text changes\n//   // useEffect(() => {\n//   //   const diffResult = generateDiff(inputText, outputText);\n//   //   setDiffHtml(diffResult);\n//   // }, [inputText, outputText]);\n\n//     // Effect to calculate diff and save the initial data\n//     useEffect(() => {\n//       const diffResult = generateDiff(inputText, outputText);\n//       setDiffHtml(diffResult);\n\n//       // Save the original input and output text to MongoDB\n//       saveSimplification();\n//     }, [inputText, outputText]);\n\n//   const handleCopy = (text) => {\n// \tnavigator.clipboard.writeText(text).then(\n// \t  () => {\n// \t\talert(\"Copied to clipboard!\");\n// \t  },\n// \t  (err) => {\n// \t\tconsole.error(\"Failed to copy text: \", err);\n// \t  }\n// \t);\n//   };\n\n//   // Function to handle download\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     const link = document.createElement(\"a\");\n//     link.href = URL.createObjectURL(blob);\n//     link.download = `${filename}.${format}`;\n//     link.click();\n//   };\n\n// //   const handleEdit = () => {\n// //     setIsEditable(true);\n// //   };\n\n// //   const handleSave = () => {\n// //     // Save the current state to history\n// //     setEditHistory((prev) => [\n// //       ...prev,\n// //       { timestamp: new Date().toLocaleString(), text: outputText },\n// //     ]);\n// //     alert(\"Saved successfully!\");\n// //     setIsEditable(false);\n// //   };\n// const handleSave = async () => {\n//   const editedText = outputText;\n\n//   // Save the edit to MongoDB\n//   await saveEdit(editedText);\n\n//   // Update the edit history\n//   setEditHistory((prev) => [\n//     ...prev,\n//     { timestamp: new Date().toLocaleString(), text: editedText },\n//   ]);\n\n//   setIsEditable(false);\n//   alert(\"Edited text saved successfully.\");\n// };\n\n// //     const handleSave = async (isAuto = false) => {\n// // //\t\tsetIsSaveButtonVisible(false);\n// // if (isAuto && isAuto.nativeEvent) {\n// // \tisAuto = false; // Default behavior if called by an event\n// // }\n\n// // \t\ttry {\n// // \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// // \t\t  if (!user) {\n// // \t\t\talert(\"User not logged in!\");\n// // \t\t\treturn;\n// // \t\t  }\n\n// // \t\t  const payload = {\n// // \t\t\tuserId: user._id,\n// // \t\t\temail: user.email,\n// // \t\t\tinputText,\n// // \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// // \t\t  };\n\n// // \t\t  const endpoint = isEditable\n// // \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// // \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\n// // \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\n// // \t\t  const response = await fetch(endpoint, {\n// // \t\t\tmethod,\n// // \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// // \t\t\tbody: JSON.stringify(payload),\n// // \t\t  });\n\n// // \t\t  if (response.ok) {\n// // \t\t\tconst data = await response.json();\n\n// // \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// // \t\t\t//setShowSurveyPrompt(true); \n// // \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// // \t\t\tconsole.log(\"isEditable\", isEditable);\n// // \t\t\tconsole.log(\"isAuto\", isAuto);\n// // \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// // \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// // \t\t\t  }\n// // \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// // \t\t\t{\n// // \t\t\t\tsetShowSurveyPrompt(false);\n// // \t\t\t}\n// // \t\t\telse if (isSaveButtonVisible && isEditable)\n// // \t\t\t{\n// // \t\t\t\tsetShowSurveyPrompt(true);\n// // \t\t\t} \n// // \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// // \t\t\t{\n// // \t\t\t\tsetShowSurveyPrompt(true);\n// // \t\t\t}\n\n// // \t\t\tsetEditHistory((prev) => [\n// // \t\t\t\t...prev,\n// // \t\t\t\t{ timestamp: new Date().toLocaleString(), text: outputText },\n// // \t\t\t  ]);\n\n// // \t\t\tif (isEditable) {\n// // \t\t\t {\n// // \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// // \t\t\t  // disable saving button\n// // \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// // \t\t\t   // Show the survey prompt\n// // \t\t\t // setShowSurveyPrompt(true); \n// // \t\t\t }\n\n// // \t\t  }} else {\n// // \t\t\tconst error = await response.json();\n// // \t\t\talert(error.message || \"Failed to save simplification.\");\n// // \t\t  }\n// // \t\t} catch (error) {\n// // \t\t  console.error(\"Error saving simplification:\", error);\n// // \t\t  alert(\"An error occurred. Please try again.\");\n// // \t\t}\n\n// // \t  };\n// const handleEdit = () => {\n//   setIsEditable(true);\n// };\n\n// \t// const handleEdit = () => {\n// \t//   let isAuto = true;\n// \t//   handleSave(isAuto); // Save the current output text\n// \t//   setIsEditable(true); // Enable editing mode\n// \t//   setIsSaveButtonVisible(true);\n\n// \t// };\n\n//   const handleHistoryClick = (edit) => {\n//     setOutputText(edit.text);\n//     const diffResult = generateDiff(inputText, edit.text);\n//     setDiffHtml(diffResult);\n//     setIsEditable(false);\n//   };\n\n//   return (\n//     <>\n//       <nav className={styles.navbar}>\n//         <h1>Text Simplification Study</h1>\n//         <button className={styles.white_btn} onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </nav>\n\n//       <div className={styles.container}>\n//         {/* Sidebar */}\n//         <div\n//           className={`${styles.sidebar} ${\n//             isSidebarVisible ? styles.expanded : \"\"\n//           }`}\n//         >\n//           <button\n//             className={styles.historyIcon}\n//             onClick={() => setIsSidebarVisible(!isSidebarVisible)}\n//           >\n//              🕒   <p style={{ fontSize: \"15px\" }}> History </p> {/* History Icon */}\n//           </button>\n//           {isSidebarVisible && (\n//             <div className={styles.historyContent}>\n//               <button\n//                 className={styles.closeButton}\n//                 onClick={() => setIsSidebarVisible(false)}\n//               >\n//                ✖\n//               </button>\n//               {/* <h3>History</h3> */}\n//               <ul className={styles.historyList}>\n//                 {editHistory.map((edit, index) => (\n//                   <li\n//                     key={index}\n//                     className={styles.historyItem}\n//                     onClick={() => handleHistoryClick(edit)}\n//                   >\n//                     {edit.timestamp}\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Main Content */}\n//         <div\n//           className={`${styles.mainContent} ${\n//             isSidebarVisible ? styles.withSidebar : \"\"\n//           }`}\n//         >\n// \t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t\tReview the generated output and make any necessary edits. Changes\n// \t\t\t\tare highlighted in real-time for easy visualization.\n// \t\t\t</p>\n// \t\t\t</div>\n\n// \t\t\t<div className={styles.textareas_container}>\n\n//   {/* Input Text */}\n//   <div className={styles.text_container}>\n//     <div className={styles.labelWrapper}>\n//       <label className={styles.label} htmlFor=\"inputText\">\n//         Input Text\n//       </label>\n//       <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(inputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         </div>\n//         📋 {/* Clipboard Emoji */}\n//         <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(inputText, \"InputText\", \"txt\")}\n//         title=\"Download as TXT\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//       </div>\n//     </div>\n//     <textarea\n//       id=\"inputText\"\n//       className={`${styles.textarea} ${styles.side_by_side}`}\n//       value={inputText}\n//       readOnly\n//     ></textarea>\n//   </div>\n\n// \t\t\t{/* Output Text Box */}\n// \t\t\t{/* Output Text Box */}\n// <div className={styles.text_container}>\n//   <div className={styles.labelWrapper}>\n//     <label className={styles.label} htmlFor=\"outputText\">\n//       System-generated Text\n//     </label>\n//     <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(outputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         📋 {/* Clipboard Emoji */}\n//       </div>\n\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//         title=\"Download as TXT\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//       <button\n//         className={styles.toggleDiffBtn}\n//         onClick={() => setShowDifference(!showDifference)}\n//       >\n//         {showDifference ? \"Hide Difference\" : \"Show Difference\"}\n//       </button>\n//     </div>\n//   </div>\n//   <textarea\n//     id=\"outputText\"\n//     className={`${styles.output_box} ${styles.side_by_side}`}\n//     value={outputText}\n//     onChange={(e) => setOutputText(e.target.value)}\n//     readOnly={isEditable}\n//     placeholder=\"Output\"\n//   ></textarea>\n// </div>\n\n//             {/* Difference Text */}\n// \t\t\t{showDifference && (\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tDifference from original text\n// \t\t\t\t</label>\n\n// \t\t\t\t\t<div\n// \t\t\t\t\tid=\"diffText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tdangerouslySetInnerHTML={{ __html: diffHtml }}\n// \t\t\t\t\t></div>\n// \t\t\t\t {/* )} */}\n// \t\t\t\t</div>\n// \t\t\t)}\n\n// \t\t\t</div>\n\n//           {/* Buttons */}\n// \t\t\t<div className={styles.button_container}>\n\n//     \t\t\t\t{isSaveButtonVisible && (\n//     \t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleSave}\n//     \t\t\t\t\tdisabled={isLoading}\n//     \t\t\t\t>\n//     \t\t\t\t\tSave\n//     \t\t\t\t</button>\n//     \t\t\t\t)}\n\n//     \t\t\t\t{!isEditable && (\n//     \t\t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleEdit}\n//     \t\t\t\t\t>\n//     \t\t\t\t\tEdit\n//     \t\t\t\t\t</button>\n//     \t\t\t\t)}\n//     \t\t\t\t</div>\n//           {/* Survey Prompt */}\n//     \t  {showSurveyPrompt && (\n//                   <div className={styles.survey_prompt}>\n//                     <p>\n//                       Please take the survey to help us improve {\" \"}\n//                       <button\n//                         className={styles.link_btn}\n//                         onClick={() =>\n//                           navigate(\"/survey\", {\n//                             state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                           })\n//                         }\n//                       >\n//                         Take the Survey\n//                       </button>\n//                     </p>\n//                   </div>\n//                 )}\n\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Review;\n\n// import React from \"react\";\n// import { useState, useEffect, useRef } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n//   const { state } = useLocation();\n//   const { inputText, outputText: initialOutputText } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n//   const [diffHtml, setDiffHtml] = useState(\"\"); // State for storing diff HTML\n//   const [isEditable, setIsEditable] = useState(false);\n//   const [editHistory, setEditHistory] = useState([]); // Array to store edit history\n//   const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n//   const navigate = useNavigate();\n//   const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n//   // Function to calculate and render diff\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs); // Generate diff HTML\n\n//   };\n\n//   // Effect to calculate diff whenever text changes\n//   useEffect(() => {\n//     const diffResult = generateDiff(inputText, outputText);\n//     setDiffHtml(diffResult);\n//   }, [inputText, outputText]);\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.reload();\n//   };\n\n//   \tconst handleSave = async (isAuto = false) => {\n// //\t\tsetIsSaveButtonVisible(false);\n// if (isAuto && isAuto.nativeEvent) {\n// \tisAuto = false; // Default behavior if called by an event\n// }\n\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// \t\t  };\n\n// \t\t  const endpoint = isEditable\n// \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\n// \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\n// \t\t  const response = await fetch(endpoint, {\n// \t\t\tmethod,\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n\n// \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// \t\t\t//setShowSurveyPrompt(true); \n// \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// \t\t\tconsole.log(\"isEditable\", isEditable);\n// \t\t\tconsole.log(\"isAuto\", isAuto);\n// \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// \t\t\t  }\n// \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(false);\n// \t\t\t}\n// \t\t\telse if (isSaveButtonVisible && isEditable)\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t} \n// \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t}\n\n// \t\t\tsetEditHistory((prev) => [\n// \t\t\t\t...prev,\n// \t\t\t\t{ timestamp: new Date().toLocaleString(), text: outputText },\n// \t\t\t  ]);\n\n// \t\t\tif (isEditable) {\n// \t\t\t {\n// \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// \t\t\t  // disable saving button\n// \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// \t\t\t   // Show the survey prompt\n// \t\t\t // setShowSurveyPrompt(true); \n// \t\t\t }\n\n// \t\t  }} else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n\n// \t  };\n\n// \t  const handleHistoryClick = (edit) => {\n// \t\tsetOutputText(edit.text);\n// \t\tconst diffResult = generateDiff(inputText, edit.text);\n// \t\tsetDiffHtml(diffResult);\n// \t\tsetIsEditable(false);\n// \t  };\n\n// \tconst handleEdit = () => {\n// \t  let isAuto = true;\n// \t  handleSave(isAuto); // Save the current output text\n// \t  setIsEditable(true); // Enable editing mode\n// \t  setIsSaveButtonVisible(true);\n\n// \t};\n\n//   return (\n//     <>\n//       <nav className={styles.navbar}>\n//         <h1>Text Simplification Study</h1>\n//         <button className={styles.white_btn} onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </nav>\n\n//       <div className={styles.main_container}>\n//         <div className={styles.description}>\n//           <p>\n//             Review the generated output and make any necessary edits. Changes\n//             are highlighted in real-time for easy visualization.\n//           </p>\n\n//       {/* Sidebar */}\n//       <div className={styles.sidebar}>\n//         <button\n//           className={styles.historyIcon}\n//           onClick={() => setIsHistoryVisible(!isHistoryVisible)}\n//         >\n//           🕒 {/* History Icon */}\n//         </button>\n//         {isHistoryVisible && (\n//           <div className={styles.historyPanel}>\n//             <h3>Edit History</h3>\n//             <ul className={styles.historyList}>\n//               {editHistory.map((edit, index) => (\n//                 <li\n//                   key={index}\n//                   className={styles.historyItem}\n//                   onClick={() => handleHistoryClick(edit)}\n//                 >\n//                   {edit.timestamp}\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n\n//           <div className={styles.form_container}>\n//             {/* Input and Diff Boxes */}\n//             <div className={styles.textareas_container}>\n//               {/* Input Text Box */}\n//               <div className={styles.text_container}>\n//                 <label className={styles.label} htmlFor=\"inputText\">\n//                   Input Text\n//                 </label>\n//                 <textarea\n//                   id=\"inputText\"\n//                   className={`${styles.textarea} ${styles.side_by_side}`}\n//                   value={inputText}\n//                   readOnly\n//                 ></textarea>\n//               </div>\n// <div className={styles.text_container}>\n//   <label className={styles.label} htmlFor=\"outputText\">\n//     System-generated Text\n//   </label>\n\n// {isEditable ? (\n//     <>\n//       <textarea\n//         id=\"outputText\"\n//         className={`${styles.textarea} ${styles.side_by_side}`}\n//         value={outputText}\n//         onChange={(e) => {\n//           const updatedText = e.target.value;\n//           setOutputText(updatedText); // Update the output text state\n//           const updatedDiff = generateDiff(inputText, updatedText); // Recalculate the diff\n//           setDiffHtml(updatedDiff); // Update the diff HTML in real-time\n\n//         }}\n//         placeholder=\"Output\"\n//       ></textarea>\n\n//     </>\n//   ) : (\n//     <div\n//       id=\"diffText\"\n//       className={`${styles.output_box} ${styles.side_by_side}`}\n//       dangerouslySetInnerHTML={{ __html: diffHtml }}\n//     ></div>\n//   )} \n// </div>\n\n//             </div>\n\n//     \t\t\t\t<div className={styles.button_container}>\n\n//     \t\t\t\t{isSaveButtonVisible && (\n//     \t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleSave}\n//     \t\t\t\t\tdisabled={isLoading}\n//     \t\t\t\t>\n//     \t\t\t\t\tSave\n//     \t\t\t\t</button>\n//     \t\t\t\t)}\n\n//     \t\t\t\t{!isEditable && (\n//     \t\t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleEdit}\n//     \t\t\t\t\t>\n//     \t\t\t\t\tEdit\n//     \t\t\t\t\t</button>\n//     \t\t\t\t)}\n//     \t\t\t\t</div>\n//           {/* Survey Prompt */}\n//     \t  {showSurveyPrompt && (\n//                   <div className={styles.survey_prompt}>\n//                     <p>\n//                       Please take the survey to help us improve {\" \"}\n//                       <button\n//                         className={styles.link_btn}\n//                         onClick={() =>\n//                           navigate(\"/survey\", {\n//                             state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                           })\n//                         }\n//                       >\n//                         Take the Survey\n//                       </button>\n//                     </p>\n//                   </div>\n//                 )}\n\n//     \t\t\t</div>\n\n//     \t\t</div> \n//     \t\t</div>\n//     \t  </>\n//   );\n// };\n\n// export default Review;\n\n{/* \n \t\t  <div className={styles.text_container}>\n  <label className={styles.label} htmlFor=\"outputText\">\n    System-generated Text\n  </label>\n  {isEditable ? (\n    <textarea\n      id=\"outputText\"\n      className={`${styles.textarea} ${styles.side_by_side}`}\n      value={outputText}\n      onChange={(e) => setOutputText(e.target.value)} // Handle user edits\n      placeholder=\"Output\"\n    ></textarea>\n  ) : (\n    <div\n      id=\"diffText\"\n      className={`${styles.output_box} ${styles.side_by_side}`}\n      dangerouslySetInnerHTML={{ __html: diffHtml }}\n    ></div>\n  )}\n </div> */}\n\n// import React from \"react\";\n// import { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n//   const { state } = useLocation();\n// //   const { inputText, outputText } = state || { inputText: \"\", outputText: \"\" };\n// //   const navigate = useNavigate();\n// const { inputText, outputText: initialOutputText } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n// \tconst [diffHtml, setDiffHtml] = useState(\"\"); \n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n//     const navigate = useNavigate();\n\n// \tconst handleLogout = () => {\n// \t  localStorage.removeItem(\"token\");\n// \t  window.location.reload();\n// \t};\n\n// \t// Function to calculate and render diff\n// \tconst generateDiff = (input, output) => {\n// \tconst dmp = new DiffMatchPatch();\n// \tconst diffs = dmp.diff_main(input, output);\n// \tdmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n// \treturn dmp.diff_prettyHtml(diffs); // Generate diff HTML\n// \t};\n\n// \t// Effect to calculate diff whenever text changes\n// \tuseEffect(() => {\n// \tconst diffResult = generateDiff(inputText, outputText);\n// \tsetDiffHtml(diffResult);\n// \t}, [inputText, outputText]);\n\n//   \tconst handleSave = async (isAuto = false) => {\n// //\t\tsetIsSaveButtonVisible(false);\n// if (isAuto && isAuto.nativeEvent) {\n// \tisAuto = false; // Default behavior if called by an event\n// }\n\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// \t\t  };\n\n// \t\t  const endpoint = isEditable\n// \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\n// \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\n// \t\t  const response = await fetch(endpoint, {\n// \t\t\tmethod,\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n\n// \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// \t\t\t//setShowSurveyPrompt(true); \n// \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// \t\t\tconsole.log(\"isEditable\", isEditable);\n// \t\t\tconsole.log(\"isAuto\", isAuto);\n// \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// \t\t\t  }\n// \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(false);\n// \t\t\t}\n// \t\t\telse if (isSaveButtonVisible && isEditable)\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t} \n// \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t}\n\n// \t\t\tif (isEditable) {\n// \t\t\t {\n// \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// \t\t\t  // disable saving button\n// \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// \t\t\t   // Show the survey prompt\n// \t\t\t // setShowSurveyPrompt(true); \n// \t\t\t }\n// \t\t  }} else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n\n// \t  };\n\n// \tconst handleEdit = () => {\n// \t  let isAuto = true;\n// \t  handleSave(isAuto); // Save the current output text\n// \t  setIsEditable(true); // Enable editing mode\n// \t  setIsSaveButtonVisible(true);\n\n// \t  //navigate(\"/edit\"); // Navigate to edit page\n\n// \t  //setShowSurveyPrompt(false);\n\n// \t  // Add back button\n// \t};\n\n//   return (\n//     <>\n//     <nav className={styles.navbar}>\n//       <h1>Text Simplification Study</h1>\n//       <button className={styles.white_btn} onClick={handleLogout}>\n//         Logout\n//       </button>\n//     </nav>\n\n//     <div className={styles.main_container}>\n//         <div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tReview the generated output and make any necessary edits. Click the \"Edit\" button to make changes to the text. Once you are satisfied with the text, click the \"Save\" button to save your changes.\n// \t\t\t  </p>\n\n//             <br></br>\n\n//      \t\t\t<div className={styles.form_container}>\n//      \t\t\t  {/* Input and Output Boxes */}\n//      \t\t\t  <div className={styles.textareas_container}>\n//      \t\t\t\t{/* Input Text Box */}\n//      \t\t\t\t<div className={styles.text_container}>\n//      \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n//      \t\t\t\t\tInput Text\n//      \t\t\t\t  </label>\n//     \t\t\t\t  <textarea\n//     \t\t\t\t\tid=\"inputText\"\n//     \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n//     \t\t\t\t\tvalue={inputText}\n//     \t\t\t\t\t//onChange={(e) => setInputText(e.target.value)}\n//     \t\t\t\t\treadOnly\n//     \t\t\t\t  ></textarea>\n//     \t\t\t\t</div>\n\n//     \t\t\t\t{/* Output Text Box */}\n//     \t\t\t\t<div className={styles.text_container}>\n//     \t\t\t\t  <label className={styles.label} htmlFor=\"diffText\">\n//     \t\t\t\t\tSystem-generated Text\n//     \t\t\t\t  </label>\n//     \t\t\t\t  <textarea\n//     \t\t\t\t\tid=\"diffText\"\n//     \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n//     \t\t\t\t\tvalue={outputText}\n//     \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: diffHtml }}\n//     \t\t\t\t\treadOnly={!isEditable}\n//     \t\t\t\t\tplaceholder=\"Output\"\n//     \t\t\t\t  ></textarea>\n//     \t\t\t\t</div>\n\n//     \t\t\t  </div>\n\n//     \t\t\t\t{/* Save and Edit Buttons */}\n//     \t\t\t\t<div className={styles.button_container}>\n\n//     \t\t\t\t{isSaveButtonVisible && (\n//     \t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleSave}\n//     \t\t\t\t\tdisabled={isLoading}\n//     \t\t\t\t>\n//     \t\t\t\t\tSave\n//     \t\t\t\t</button>\n//     \t\t\t\t)}\n\n//     \t\t\t\t{!isEditable && (\n//     \t\t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleEdit}\n//     \t\t\t\t\t>\n//     \t\t\t\t\tEdit\n//     \t\t\t\t\t</button>\n//     \t\t\t\t)}\n//     \t\t\t\t</div>\n//           {/* Survey Prompt */}\n//     \t  {showSurveyPrompt && (\n//                   <div className={styles.survey_prompt}>\n//                     <p>\n//                       Please take the survey to help us improve {\" \"}\n//                       <button\n//                         className={styles.link_btn}\n//                         onClick={() =>\n//                           navigate(\"/survey\", {\n//                             state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                           })\n//                         }\n//                       >\n//                         Take the Survey\n//                       </button>\n//                     </p>\n//                   </div>\n//                 )}\n\n//     \t\t\t</div>\n//     \t\t</div> \n//     \t\t</div>\n//     \t  </>\n//   );\n// };\n\n// export default Review;\nvar _c;\n$RefreshReg$(_c, \"Review\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","DiffMatchPatch","FaRegCopy","FaDownload","saveAs","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Review","_s","state","inputText","outputText","initialOutputText","editHistory","restoredEditHistory","setOutputText","setEditHistory","diffHtml","setDiffHtml","isSaveButtonEnabled","setIsSaveButtonEnabled","navigate","isEditable","setIsEditable","isSidebarVisible","setIsSidebarVisible","showDifference","setShowDifference","isHistoryVisible","setIsHistoryVisible","contentEditableRef","isLoading","setIsLoading","isSaveButtonVisible","setIsSaveButtonVisible","showSurveyPrompt","setShowSurveyPrompt","handleLogout","localStorage","removeItem","saveSimplification","user","JSON","parse","getItem","response","fetch","method","headers","body","stringify","userId","_id","ok","console","log","error","json","message","saveEditToHistory","editedText","email","saveFinalOutput","finalText","timestamp","Date","toISOString","prev","text","handleEditChange","event","updatedText","target","value","handleCopy","navigator","clipboard","writeText","then","alert","err","handleDownload","filename","format","blob","Blob","type","diffResult","generateDiff","savedState","handleHistoryClick","edit","input","output","dmp","diffs","diff_main","diff_cleanupSemantic","diff_prettyHtml","children","className","navbar","fileName","_jsxFileName","lineNumber","columnNumber","white_btn","onClick","container","sidebar","expanded","historyIcon","style","fontSize","historyContent","closeButton","historyList","map","index","historyItem","mainContent","withSidebar","description","textareas_container","text_container","labelWrapper","label","htmlFor","actions","copyIcon","title","id","textarea","side_by_side","readOnly","toggleDiffBtn","output_box","onChange","placeholder","dangerouslySetInnerHTML","__html","button_container","save_btn","text_btn","disabled","survey_prompt","link_btn","reviewPageState","setItem","_c","$RefreshReg$"],"sources":["/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v3/client/src/components/Review/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef  } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport DiffMatchPatch from \"diff-match-patch\";\nimport { FaRegCopy, FaDownload } from \"react-icons/fa\"; // Import FontAwesome icons\nimport { saveAs } from \"file-saver\";\nimport styles from \"./styles.module.css\";\n\nconst Review = () => {\n\n\n  const { state } = useLocation();\n  const { inputText, outputText: initialOutputText, editHistory: restoredEditHistory } = state || {\n    inputText: \"\",\n    outputText: \"\",\n    editHistory: [],\n  };\n\n  const [outputText, setOutputText] = useState(initialOutputText);\n  const [editHistory, setEditHistory] = useState(restoredEditHistory || []);\n\n  const [diffHtml, setDiffHtml] = useState(\"\");\n  const [isSaveButtonEnabled, setIsSaveButtonEnabled] = useState(false);\n  const navigate = useNavigate();\n\n\n  const [isEditable, setIsEditable] = useState(false);\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n  const [showDifference, setShowDifference] = useState(false);\n\n\n//   const navigate = useNavigate();\n\n\n  const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n  const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n\tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n    const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n\tnavigate(\"/Login\"); \n   // window.location.reload();\n  };\n\n\n  const saveSimplification = async () => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n\n      const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          userId: user._id,\n          inputText,\n          outputText,\n        }),\n      });\n\n      if (response.ok) {\n        console.log(\"Simplification saved successfully.\");\n        \n      } else {\n        const error = await response.json();\n        console.error(\"Error saving simplification:\", error.message);\n      }\n    } catch (error) {\n      console.error(\"Error saving simplification:\", error);\n    }\n  };\n\n  \n  const saveEditToHistory = async (editedText) => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n\n      const response = await fetch(\"http://localhost:8080/api/simplifications/edit\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: user.email,\n          inputText,\n          editedText,\n        }),\n      });\n\n      if (response.ok) {\n        console.log(\"Edit saved to history.\");\n      } else {\n        const error = await response.json();\n        console.error(\"Error saving edit to history:\", error.message);\n      }\n    } catch (error) {\n      console.error(\"Error saving edit to history:\", error);\n    }\n  };\n\n  const saveFinalOutput = async () => {\n    setIsLoading(true);\n\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n\n      const response = await fetch(\"http://localhost:8080/api/simplifications/save\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: user.email,\n          inputText,\n          finalText: outputText,\n        }),\n      });\n\n    const timestamp = new Date().toISOString();\n    setEditHistory((prev) => [\n      ...prev,\n      { timestamp, text: outputText },\n    ]);\n\n      if (response.ok) {\n        console.log(\"Final output saved successfully.\");\n        setIsSaveButtonEnabled(false); // Disable save button\n        setShowSurveyPrompt(true);    // Ensure survey prompt is displayed\n      } else {\n        const error = await response.json();\n        console.error(\"Error saving final output:\", error.message);\n      }\n    } catch (error) {\n      console.error(\"Error saving final output:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEditChange = (event) => {\n    const updatedText = event.target.value;\n    setOutputText(updatedText);\n    setIsSaveButtonEnabled(true); // Enable save button on edit\n\n    // const timestamp = new Date().toISOString();\n    // setEditHistory((prev) => [\n    //   ...prev,\n    //   { timestamp, text: updatedText },\n    // ]);\n\n    // Save the change to edit history in MongoDB\n    saveEditToHistory(updatedText);\n  };\n\n  const handleCopy = (text) => {\n    navigator.clipboard.writeText(text).then(\n      () => {\n        alert(\"Copied to clipboard!\");\n      },\n      (err) => {\n        console.error(\"Failed to copy text:\", err);\n      }\n    );\n  };\n\n  const handleDownload = (text, filename, format) => {\n    const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n    saveAs(blob, `${filename}.${format}`);\n  };\n\n  // useEffect(() => {\n  //   // Save initial input and output text in MongoDB\n  //   saveSimplification();\n  // }, []);\n  useEffect(() => {\n    const diffResult = generateDiff(inputText, outputText);\n    setDiffHtml(diffResult);\n   // saveSimplification();\n  }, [inputText, outputText]);\n\n  useEffect(() => {\n    saveSimplification(); // Save the initial inputText and outputText\n    setIsSaveButtonEnabled(true);\n\n    const savedState = JSON.parse(localStorage.getItem(\"reviewPageState\"));\n    if (savedState) {\n      setOutputText(savedState.outputText || \"\");\n      setEditHistory(savedState.editHistory || []);\n    }\n  }, []);\n  \n  const handleHistoryClick = (edit) => {\n    setOutputText(edit.text);\n    const diffResult = generateDiff(inputText, edit.text);\n    setDiffHtml(diffResult);\n    setIsEditable(false);\n  };\n\n    // Function to calculate and render diff\n  const generateDiff = (input, output) => {\n    const dmp = new DiffMatchPatch();\n    const diffs = dmp.diff_main(input, output);\n    dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n    return dmp.diff_prettyHtml(diffs);\n  };\n\n  return (\n    <>\n      <nav className={styles.navbar}>\n        <h1>Text Simplification Study</h1>\n        <button className={styles.white_btn} onClick={handleLogout}>\n          Logout\n        </button>\n      </nav>\n\n      <div className={styles.container}>\n        {/* Sidebar */}\n        <div\n          className={`${styles.sidebar} ${\n            isSidebarVisible ? styles.expanded : \"\"\n          }`}\n        >\n          <button\n            className={styles.historyIcon}\n            onClick={() => setIsSidebarVisible(!isSidebarVisible)}\n          >\n             🕒   <p style={{ fontSize: \"15px\" }}> History </p> {/* History Icon */}\n          </button>\n          {isSidebarVisible && (\n            <div className={styles.historyContent}>\n              <button\n                className={styles.closeButton}\n                onClick={() => setIsSidebarVisible(false)}\n              >\n               ✖\n              </button>\n              {/* <h3>History</h3> */}\n              <ul className={styles.historyList}>\n                {editHistory.map((edit, index) => (\n                  <li\n                    key={index}\n                    className={styles.historyItem}\n                    onClick={() => handleHistoryClick(edit)}\n                  >\n                    {edit.timestamp}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {/* Main Content */}\n        <div\n          className={`${styles.mainContent} ${\n            isSidebarVisible ? styles.withSidebar : \"\"\n          }`}\n        >\n\t\t\t<div className={styles.description}>\n\t\t\t<p>\n\t\t\t\tReview the generated output and make any necessary edits. Changes\n\t\t\t\tare highlighted in real-time for easy visualization.\n\t\t\t</p>\n\t\t\t</div>\n\n\t\t\t<div className={styles.textareas_container}>\n\n  {/* Input Text */}\n  <div className={styles.text_container}>\n    <div className={styles.labelWrapper}>\n      <label className={styles.label} htmlFor=\"inputText\">\n        Input Text\n      </label>\n      <div className={styles.actions}>\n      <div\n        className={styles.copyIcon}\n        onClick={() => handleCopy(inputText)}\n        title=\"Copy to Clipboard\"\n      >\n        \n        📋 {/* Clipboard Emoji */}\n        </div>\n\n        <div\n        className={styles.copyIcon}\n        onClick={() => handleDownload(inputText, \"InputText\", \"txt\")}\n        title=\"Download as TXT\"\n      >\n        📥 {/* Download Icon */}\n      </div>\n      </div>\n    </div>\n    <textarea\n      id=\"inputText\"\n      className={`${styles.textarea} ${styles.side_by_side}`}\n      value={inputText}\n      readOnly\n    ></textarea>\n  </div>\n\n\t\t\t{/* Output Text Box */}\n<div className={styles.text_container}>\n  <div className={styles.labelWrapper}>\n    <label className={styles.label} htmlFor=\"outputText\">\n      System-generated Text\n    </label>\n    <div className={styles.actions}>\n      <div\n        className={styles.copyIcon}\n        onClick={() => handleCopy(outputText)}\n        title=\"Copy to Clipboard\"\n      >\n        📋 {/* Clipboard Emoji */}\n      </div>\n\n      <div\n        className={styles.copyIcon}\n        onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n        title=\"Download as TXT\"\n      >\n        📥 {/* Download Icon */}\n      </div>\n      <button\n        className={styles.toggleDiffBtn}\n        onClick={() => setShowDifference(!showDifference)}\n      >\n        {showDifference ? \"Hide Difference\" : \"Show Difference\"}\n      </button>\n    </div>\n  </div>\n  <textarea\n    id=\"outputText\"\n    className={`${styles.output_box} ${styles.side_by_side}`}\n    value={outputText}\n    onChange={handleEditChange}\n    readOnly={isEditable}\n    placeholder=\"Output\"\n\n  ></textarea>\n</div>\n\n            {/* Difference Text */}\n\t\t\t{showDifference && (\n\t\t\t\t<div className={styles.text_container}>\n           <div className={styles.labelWrapper}>\n\t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n\t\t\t\t\tDifference from original text\n\t\t\t\t</label>\n        </div>   \n\n\t\t\t\t\t<textarea\n\t\t\t\t\tid=\"diffText\"\n\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n\t\t\t\t\tdangerouslySetInnerHTML={{ __html: diffHtml }}\n\t\t\t\t\t></textarea>\n\t\t\t\t {/* )} */}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t\n\t\t\t</div>\n\n\n\n          {/* Buttons */}\n\t\t\t<div className={styles.button_container}>\n\n    \n    \t\t\t\t<button\n    \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n              onClick={saveFinalOutput}\n              disabled={!isSaveButtonEnabled || isLoading}\n    \t\t\t\t>\n    \t\t\t\t\tSubmit\n    \t\t\t\t</button>\n    \t\t\t\t\n    \n\n    \t\t\t\t</div>\n          {/* Survey Prompt */}\n    \t  {showSurveyPrompt && (\n                  <div className={styles.survey_prompt}>\n                    <p>\n                      Please take the survey to help us improve {\" \"}\n                      <button\n                        className={styles.link_btn}\n                      //   onClick={() => \n                      //     navigate(\"/survey\", {\n                      //       //state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n                      //       state: {\n                      //         email: JSON.parse(localStorage.getItem(\"user\")).email,\n                      //         inputText,\n                      //         outputText, // Pass the current output text as well\n                      //         editHistory,\n                      //       },\n                      //     })\n                      //   }\n                      // >\n                      onClick={() => {\n                        const reviewPageState = {\n                          inputText,\n                          outputText,\n                          editHistory,\n                        };\n                        localStorage.setItem(\"reviewPageState\", JSON.stringify(reviewPageState));\n                        navigate(\"/survey\", {\n                          state: {\n                            email: JSON.parse(localStorage.getItem(\"user\")).email,\n                            inputText,\n                            outputText,\n                            editHistory,\n                          },\n                        });\n                      }}\n                    >\n                        Take the Survey\n                      </button>\n                    </p>\n                  </div>\n                )}\n\n\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Review;\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import { FaRegCopy, FaDownload } from \"react-icons/fa\"; // Import FontAwesome copy icon\n// import { FaCopy } from \"react-icons/fa\";\n// import { saveAs } from \"file-saver\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n//   const { state } = useLocation();\n//   const { inputText, outputText: initialOutputText } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n//   const [diffHtml, setDiffHtml] = useState(\"\");\n//   const [isEditable, setIsEditable] = useState(false);\n//   const [editHistory, setEditHistory] = useState([]);\n//   const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//   const [showDifference, setShowDifference] = useState(false);\n\n//   const navigate = useNavigate();\n\n\n//   const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n//   const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n\n//   // Function to calculate and render diff\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n// \tnavigate(\"/Login\"); \n//    // window.location.reload();\n//   };\n\n//    // Function to save the original input and output text to MongoDB\n//    const saveSimplification = async () => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n\n//       const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           userId: user._id,\n//           inputText,\n//           outputText,\n//         }),\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Simplification saved successfully.\");\n//       } else {\n//         const data = await response.json();\n//         console.error(\"Error saving simplification:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving simplification:\", error);\n//     }\n//   };\n\n//   // Function to save an edit to MongoDB\n//   const saveEdit = async (editedText) => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n\n//       const response = await fetch(\"http://localhost:8080/api/simplifications/edit\", {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           email: user.email,\n//           inputText,\n//           editedText,\n//         }),\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Edit saved successfully.\");\n//       } else {\n//         const data = await response.json();\n//         console.error(\"Error saving edit:\", data.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving edit:\", error);\n//     }\n//   };\n\n//   // Effect to calculate diff whenever text changes\n//   // useEffect(() => {\n//   //   const diffResult = generateDiff(inputText, outputText);\n//   //   setDiffHtml(diffResult);\n//   // }, [inputText, outputText]);\n\n//     // Effect to calculate diff and save the initial data\n//     useEffect(() => {\n//       const diffResult = generateDiff(inputText, outputText);\n//       setDiffHtml(diffResult);\n  \n//       // Save the original input and output text to MongoDB\n//       saveSimplification();\n//     }, [inputText, outputText]);\n\n//   const handleCopy = (text) => {\n// \tnavigator.clipboard.writeText(text).then(\n// \t  () => {\n// \t\talert(\"Copied to clipboard!\");\n// \t  },\n// \t  (err) => {\n// \t\tconsole.error(\"Failed to copy text: \", err);\n// \t  }\n// \t);\n//   };\n  \n//   // Function to handle download\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     const link = document.createElement(\"a\");\n//     link.href = URL.createObjectURL(blob);\n//     link.download = `${filename}.${format}`;\n//     link.click();\n//   };\n  \n// //   const handleEdit = () => {\n// //     setIsEditable(true);\n// //   };\n\n// //   const handleSave = () => {\n// //     // Save the current state to history\n// //     setEditHistory((prev) => [\n// //       ...prev,\n// //       { timestamp: new Date().toLocaleString(), text: outputText },\n// //     ]);\n// //     alert(\"Saved successfully!\");\n// //     setIsEditable(false);\n// //   };\n// const handleSave = async () => {\n//   const editedText = outputText;\n\n//   // Save the edit to MongoDB\n//   await saveEdit(editedText);\n\n//   // Update the edit history\n//   setEditHistory((prev) => [\n//     ...prev,\n//     { timestamp: new Date().toLocaleString(), text: editedText },\n//   ]);\n\n//   setIsEditable(false);\n//   alert(\"Edited text saved successfully.\");\n// };\n\n// //     const handleSave = async (isAuto = false) => {\n// // //\t\tsetIsSaveButtonVisible(false);\n// // if (isAuto && isAuto.nativeEvent) {\n// // \tisAuto = false; // Default behavior if called by an event\n// // }\n\n\t\t  \n// // \t\ttry {\n// // \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// // \t\t  if (!user) {\n// // \t\t\talert(\"User not logged in!\");\n// // \t\t\treturn;\n// // \t\t  }\n\t  \n// // \t\t  const payload = {\n// // \t\t\tuserId: user._id,\n// // \t\t\temail: user.email,\n// // \t\t\tinputText,\n// // \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// // \t\t  };\n\t  \n// // \t\t  const endpoint = isEditable\n// // \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// // \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\t  \n// // \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\t  \n// // \t\t  const response = await fetch(endpoint, {\n// // \t\t\tmethod,\n// // \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// // \t\t\tbody: JSON.stringify(payload),\n// // \t\t  });\n\t  \n// // \t\t  if (response.ok) {\n// // \t\t\tconst data = await response.json();\n            \n// // \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// // \t\t\t//setShowSurveyPrompt(true); \n// // \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// // \t\t\tconsole.log(\"isEditable\", isEditable);\n// // \t\t\tconsole.log(\"isAuto\", isAuto);\n// // \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// // \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// // \t\t\t  }\n// // \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// // \t\t\t{\n// // \t\t\t\tsetShowSurveyPrompt(false);\n// // \t\t\t}\n// // \t\t\telse if (isSaveButtonVisible && isEditable)\n// // \t\t\t{\n// // \t\t\t\tsetShowSurveyPrompt(true);\n// // \t\t\t} \n// // \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// // \t\t\t{\n// // \t\t\t\tsetShowSurveyPrompt(true);\n// // \t\t\t}\n\n// // \t\t\tsetEditHistory((prev) => [\n// // \t\t\t\t...prev,\n// // \t\t\t\t{ timestamp: new Date().toLocaleString(), text: outputText },\n// // \t\t\t  ]);\n\n// // \t\t\tif (isEditable) {\n// // \t\t\t {\n// // \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// // \t\t\t  // disable saving button\n// // \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// // \t\t\t   // Show the survey prompt\n// // \t\t\t // setShowSurveyPrompt(true); \n// // \t\t\t }\n\n\n// // \t\t  }} else {\n// // \t\t\tconst error = await response.json();\n// // \t\t\talert(error.message || \"Failed to save simplification.\");\n// // \t\t  }\n// // \t\t} catch (error) {\n// // \t\t  console.error(\"Error saving simplification:\", error);\n// // \t\t  alert(\"An error occurred. Please try again.\");\n// // \t\t}\n\n// // \t  };\n// const handleEdit = () => {\n//   setIsEditable(true);\n// };\n\n\n// \t// const handleEdit = () => {\n// \t//   let isAuto = true;\n// \t//   handleSave(isAuto); // Save the current output text\n// \t//   setIsEditable(true); // Enable editing mode\n// \t//   setIsSaveButtonVisible(true);\n\n// \t// };\n\n//   const handleHistoryClick = (edit) => {\n//     setOutputText(edit.text);\n//     const diffResult = generateDiff(inputText, edit.text);\n//     setDiffHtml(diffResult);\n//     setIsEditable(false);\n//   };\n\n//   return (\n//     <>\n//       <nav className={styles.navbar}>\n//         <h1>Text Simplification Study</h1>\n//         <button className={styles.white_btn} onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </nav>\n\n//       <div className={styles.container}>\n//         {/* Sidebar */}\n//         <div\n//           className={`${styles.sidebar} ${\n//             isSidebarVisible ? styles.expanded : \"\"\n//           }`}\n//         >\n//           <button\n//             className={styles.historyIcon}\n//             onClick={() => setIsSidebarVisible(!isSidebarVisible)}\n//           >\n//              🕒   <p style={{ fontSize: \"15px\" }}> History </p> {/* History Icon */}\n//           </button>\n//           {isSidebarVisible && (\n//             <div className={styles.historyContent}>\n//               <button\n//                 className={styles.closeButton}\n//                 onClick={() => setIsSidebarVisible(false)}\n//               >\n//                ✖\n//               </button>\n//               {/* <h3>History</h3> */}\n//               <ul className={styles.historyList}>\n//                 {editHistory.map((edit, index) => (\n//                   <li\n//                     key={index}\n//                     className={styles.historyItem}\n//                     onClick={() => handleHistoryClick(edit)}\n//                   >\n//                     {edit.timestamp}\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Main Content */}\n//         <div\n//           className={`${styles.mainContent} ${\n//             isSidebarVisible ? styles.withSidebar : \"\"\n//           }`}\n//         >\n// \t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t\tReview the generated output and make any necessary edits. Changes\n// \t\t\t\tare highlighted in real-time for easy visualization.\n// \t\t\t</p>\n// \t\t\t</div>\n\n// \t\t\t<div className={styles.textareas_container}>\n\n//   {/* Input Text */}\n//   <div className={styles.text_container}>\n//     <div className={styles.labelWrapper}>\n//       <label className={styles.label} htmlFor=\"inputText\">\n//         Input Text\n//       </label>\n//       <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(inputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         </div>\n//         📋 {/* Clipboard Emoji */}\n//         <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(inputText, \"InputText\", \"txt\")}\n//         title=\"Download as TXT\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//       </div>\n//     </div>\n//     <textarea\n//       id=\"inputText\"\n//       className={`${styles.textarea} ${styles.side_by_side}`}\n//       value={inputText}\n//       readOnly\n//     ></textarea>\n//   </div>\n\n// \t\t\t{/* Output Text Box */}\n// \t\t\t{/* Output Text Box */}\n// <div className={styles.text_container}>\n//   <div className={styles.labelWrapper}>\n//     <label className={styles.label} htmlFor=\"outputText\">\n//       System-generated Text\n//     </label>\n//     <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(outputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         📋 {/* Clipboard Emoji */}\n//       </div>\n\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//         title=\"Download as TXT\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//       <button\n//         className={styles.toggleDiffBtn}\n//         onClick={() => setShowDifference(!showDifference)}\n//       >\n//         {showDifference ? \"Hide Difference\" : \"Show Difference\"}\n//       </button>\n//     </div>\n//   </div>\n//   <textarea\n//     id=\"outputText\"\n//     className={`${styles.output_box} ${styles.side_by_side}`}\n//     value={outputText}\n//     onChange={(e) => setOutputText(e.target.value)}\n//     readOnly={isEditable}\n//     placeholder=\"Output\"\n//   ></textarea>\n// </div>\n\n//             {/* Difference Text */}\n// \t\t\t{showDifference && (\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tDifference from original text\n// \t\t\t\t</label>\n\n// \t\t\t\t\t<div\n// \t\t\t\t\tid=\"diffText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tdangerouslySetInnerHTML={{ __html: diffHtml }}\n// \t\t\t\t\t></div>\n// \t\t\t\t {/* )} */}\n// \t\t\t\t</div>\n// \t\t\t)}\n\t\t\t\n// \t\t\t</div>\n\n\n\n//           {/* Buttons */}\n// \t\t\t<div className={styles.button_container}>\n\n    \n//     \t\t\t\t{isSaveButtonVisible && (\n//     \t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleSave}\n//     \t\t\t\t\tdisabled={isLoading}\n//     \t\t\t\t>\n//     \t\t\t\t\tSave\n//     \t\t\t\t</button>\n//     \t\t\t\t)}\n    \n//     \t\t\t\t{!isEditable && (\n//     \t\t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleEdit}\n//     \t\t\t\t\t>\n//     \t\t\t\t\tEdit\n//     \t\t\t\t\t</button>\n//     \t\t\t\t)}\n//     \t\t\t\t</div>\n//           {/* Survey Prompt */}\n//     \t  {showSurveyPrompt && (\n//                   <div className={styles.survey_prompt}>\n//                     <p>\n//                       Please take the survey to help us improve {\" \"}\n//                       <button\n//                         className={styles.link_btn}\n//                         onClick={() =>\n//                           navigate(\"/survey\", {\n//                             state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                           })\n//                         }\n//                       >\n//                         Take the Survey\n//                       </button>\n//                     </p>\n//                   </div>\n//                 )}\n    \n\n\n\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Review;\n\n\n// import React from \"react\";\n// import { useState, useEffect, useRef } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n//   const { state } = useLocation();\n//   const { inputText, outputText: initialOutputText } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n//   const [diffHtml, setDiffHtml] = useState(\"\"); // State for storing diff HTML\n//   const [isEditable, setIsEditable] = useState(false);\n//   const [editHistory, setEditHistory] = useState([]); // Array to store edit history\n//   const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n//   const navigate = useNavigate();\n//   const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n\n\n//   // Function to calculate and render diff\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs); // Generate diff HTML\n\t\n//   };\n\n\n  \n\n//   // Effect to calculate diff whenever text changes\n//   useEffect(() => {\n//     const diffResult = generateDiff(inputText, outputText);\n//     setDiffHtml(diffResult);\n//   }, [inputText, outputText]);\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     window.location.reload();\n//   };\n\n//   \tconst handleSave = async (isAuto = false) => {\n// //\t\tsetIsSaveButtonVisible(false);\n// if (isAuto && isAuto.nativeEvent) {\n// \tisAuto = false; // Default behavior if called by an event\n// }\n\n\t\t  \n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\t  \n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// \t\t  };\n\t  \n// \t\t  const endpoint = isEditable\n// \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\t  \n// \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\t  \n// \t\t  const response = await fetch(endpoint, {\n// \t\t\tmethod,\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\t  \n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n            \n// \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// \t\t\t//setShowSurveyPrompt(true); \n// \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// \t\t\tconsole.log(\"isEditable\", isEditable);\n// \t\t\tconsole.log(\"isAuto\", isAuto);\n// \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// \t\t\t  }\n// \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(false);\n// \t\t\t}\n// \t\t\telse if (isSaveButtonVisible && isEditable)\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t} \n// \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t}\n\n// \t\t\tsetEditHistory((prev) => [\n// \t\t\t\t...prev,\n// \t\t\t\t{ timestamp: new Date().toLocaleString(), text: outputText },\n// \t\t\t  ]);\n\n// \t\t\tif (isEditable) {\n// \t\t\t {\n// \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// \t\t\t  // disable saving button\n// \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// \t\t\t   // Show the survey prompt\n// \t\t\t // setShowSurveyPrompt(true); \n// \t\t\t }\n\n\n// \t\t  }} else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n\n// \t  };\n\n// \t  const handleHistoryClick = (edit) => {\n// \t\tsetOutputText(edit.text);\n// \t\tconst diffResult = generateDiff(inputText, edit.text);\n// \t\tsetDiffHtml(diffResult);\n// \t\tsetIsEditable(false);\n// \t  };\n\n// \tconst handleEdit = () => {\n// \t  let isAuto = true;\n// \t  handleSave(isAuto); // Save the current output text\n// \t  setIsEditable(true); // Enable editing mode\n// \t  setIsSaveButtonVisible(true);\n\n// \t};\n  \n//   return (\n//     <>\n//       <nav className={styles.navbar}>\n//         <h1>Text Simplification Study</h1>\n//         <button className={styles.white_btn} onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </nav>\n\n//       <div className={styles.main_container}>\n//         <div className={styles.description}>\n//           <p>\n//             Review the generated output and make any necessary edits. Changes\n//             are highlighted in real-time for easy visualization.\n//           </p>\n\n//       {/* Sidebar */}\n//       <div className={styles.sidebar}>\n//         <button\n//           className={styles.historyIcon}\n//           onClick={() => setIsHistoryVisible(!isHistoryVisible)}\n//         >\n//           🕒 {/* History Icon */}\n//         </button>\n//         {isHistoryVisible && (\n//           <div className={styles.historyPanel}>\n//             <h3>Edit History</h3>\n//             <ul className={styles.historyList}>\n//               {editHistory.map((edit, index) => (\n//                 <li\n//                   key={index}\n//                   className={styles.historyItem}\n//                   onClick={() => handleHistoryClick(edit)}\n//                 >\n//                   {edit.timestamp}\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n\n//           <div className={styles.form_container}>\n//             {/* Input and Diff Boxes */}\n//             <div className={styles.textareas_container}>\n//               {/* Input Text Box */}\n//               <div className={styles.text_container}>\n//                 <label className={styles.label} htmlFor=\"inputText\">\n//                   Input Text\n//                 </label>\n//                 <textarea\n//                   id=\"inputText\"\n//                   className={`${styles.textarea} ${styles.side_by_side}`}\n//                   value={inputText}\n//                   readOnly\n//                 ></textarea>\n//               </div>\n// <div className={styles.text_container}>\n//   <label className={styles.label} htmlFor=\"outputText\">\n//     System-generated Text\n//   </label>\n\n// {isEditable ? (\n//     <>\n//       <textarea\n//         id=\"outputText\"\n//         className={`${styles.textarea} ${styles.side_by_side}`}\n//         value={outputText}\n//         onChange={(e) => {\n//           const updatedText = e.target.value;\n//           setOutputText(updatedText); // Update the output text state\n//           const updatedDiff = generateDiff(inputText, updatedText); // Recalculate the diff\n//           setDiffHtml(updatedDiff); // Update the diff HTML in real-time\n\t\t\n//         }}\n//         placeholder=\"Output\"\n//       ></textarea>\n\n//     </>\n//   ) : (\n//     <div\n//       id=\"diffText\"\n//       className={`${styles.output_box} ${styles.side_by_side}`}\n//       dangerouslySetInnerHTML={{ __html: diffHtml }}\n//     ></div>\n//   )} \n// </div>\n\n\n\n\n//             </div>\n\n\n//     \t\t\t\t<div className={styles.button_container}>\n\n    \n//     \t\t\t\t{isSaveButtonVisible && (\n//     \t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleSave}\n//     \t\t\t\t\tdisabled={isLoading}\n//     \t\t\t\t>\n//     \t\t\t\t\tSave\n//     \t\t\t\t</button>\n//     \t\t\t\t)}\n    \n//     \t\t\t\t{!isEditable && (\n//     \t\t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleEdit}\n//     \t\t\t\t\t>\n//     \t\t\t\t\tEdit\n//     \t\t\t\t\t</button>\n//     \t\t\t\t)}\n//     \t\t\t\t</div>\n//           {/* Survey Prompt */}\n//     \t  {showSurveyPrompt && (\n//                   <div className={styles.survey_prompt}>\n//                     <p>\n//                       Please take the survey to help us improve {\" \"}\n//                       <button\n//                         className={styles.link_btn}\n//                         onClick={() =>\n//                           navigate(\"/survey\", {\n//                             state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                           })\n//                         }\n//                       >\n//                         Take the Survey\n//                       </button>\n//                     </p>\n//                   </div>\n//                 )}\n    \n//     \t\t\t</div>\n\n//     \t\t</div> \n//     \t\t</div>\n//     \t  </>\n//   );\n// };\n\n\n// export default Review;\n\n{/* \n\t\t\t  <div className={styles.text_container}>\n  <label className={styles.label} htmlFor=\"outputText\">\n    System-generated Text\n  </label>\n  {isEditable ? (\n    <textarea\n      id=\"outputText\"\n      className={`${styles.textarea} ${styles.side_by_side}`}\n      value={outputText}\n      onChange={(e) => setOutputText(e.target.value)} // Handle user edits\n      placeholder=\"Output\"\n    ></textarea>\n  ) : (\n    <div\n      id=\"diffText\"\n      className={`${styles.output_box} ${styles.side_by_side}`}\n      dangerouslySetInnerHTML={{ __html: diffHtml }}\n    ></div>\n  )}\n</div> */}\n\n\n\n// import React from \"react\";\n// import { useState, useEffect } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n//   const { state } = useLocation();\n// //   const { inputText, outputText } = state || { inputText: \"\", outputText: \"\" };\n// //   const navigate = useNavigate();\n// const { inputText, outputText: initialOutputText } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n// \tconst [diffHtml, setDiffHtml] = useState(\"\"); \n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n//     const navigate = useNavigate();\n\n// \tconst handleLogout = () => {\n// \t  localStorage.removeItem(\"token\");\n// \t  window.location.reload();\n// \t};\n\n// \t// Function to calculate and render diff\n// \tconst generateDiff = (input, output) => {\n// \tconst dmp = new DiffMatchPatch();\n// \tconst diffs = dmp.diff_main(input, output);\n// \tdmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n// \treturn dmp.diff_prettyHtml(diffs); // Generate diff HTML\n// \t};\n\n// \t// Effect to calculate diff whenever text changes\n// \tuseEffect(() => {\n// \tconst diffResult = generateDiff(inputText, outputText);\n// \tsetDiffHtml(diffResult);\n// \t}, [inputText, outputText]);\n\t\n\n\n//   \tconst handleSave = async (isAuto = false) => {\n// //\t\tsetIsSaveButtonVisible(false);\n// if (isAuto && isAuto.nativeEvent) {\n// \tisAuto = false; // Default behavior if called by an event\n// }\n\n\t\t  \n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\t  \n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n// \t\t  };\n\t  \n// \t\t  const endpoint = isEditable\n// \t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n// \t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\t  \n// \t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\t  \n// \t\t  const response = await fetch(endpoint, {\n// \t\t\tmethod,\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\t  \n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n            \n// \t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n// \t\t\t//setShowSurveyPrompt(true); \n// \t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n// \t\t\tconsole.log(\"isEditable\", isEditable);\n// \t\t\tconsole.log(\"isAuto\", isAuto);\n// \t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n// \t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n// \t\t\t  }\n// \t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(false);\n// \t\t\t}\n// \t\t\telse if (isSaveButtonVisible && isEditable)\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t} \n// \t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n// \t\t\t{\n// \t\t\t\tsetShowSurveyPrompt(true);\n// \t\t\t}\n\n\n// \t\t\tif (isEditable) {\n// \t\t\t {\n// \t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n// \t\t\t  // disable saving button\n// \t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n// \t\t\t   // Show the survey prompt\n// \t\t\t // setShowSurveyPrompt(true); \n// \t\t\t }\n// \t\t  }} else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n\n// \t  };\n\t  \n\t\n  \n// \tconst handleEdit = () => {\n// \t  let isAuto = true;\n// \t  handleSave(isAuto); // Save the current output text\n// \t  setIsEditable(true); // Enable editing mode\n// \t  setIsSaveButtonVisible(true);\n\n// \t  //navigate(\"/edit\"); // Navigate to edit page\n\n// \t  //setShowSurveyPrompt(false);\n\n// \t  // Add back button\n// \t};\n  \n//   return (\n//     <>\n//     <nav className={styles.navbar}>\n//       <h1>Text Simplification Study</h1>\n//       <button className={styles.white_btn} onClick={handleLogout}>\n//         Logout\n//       </button>\n//     </nav>\n\n//     <div className={styles.main_container}>\n//         <div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tReview the generated output and make any necessary edits. Click the \"Edit\" button to make changes to the text. Once you are satisfied with the text, click the \"Save\" button to save your changes.\n// \t\t\t  </p>\n\t\t\t\n//             <br></br>\n            \n//      \t\t\t<div className={styles.form_container}>\n//      \t\t\t  {/* Input and Output Boxes */}\n//      \t\t\t  <div className={styles.textareas_container}>\n//      \t\t\t\t{/* Input Text Box */}\n//      \t\t\t\t<div className={styles.text_container}>\n//      \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n//      \t\t\t\t\tInput Text\n//      \t\t\t\t  </label>\n//     \t\t\t\t  <textarea\n//     \t\t\t\t\tid=\"inputText\"\n//     \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n//     \t\t\t\t\tvalue={inputText}\n//     \t\t\t\t\t//onChange={(e) => setInputText(e.target.value)}\n//     \t\t\t\t\treadOnly\n//     \t\t\t\t  ></textarea>\n//     \t\t\t\t</div>\n      \n//     \t\t\t\t{/* Output Text Box */}\n//     \t\t\t\t<div className={styles.text_container}>\n//     \t\t\t\t  <label className={styles.label} htmlFor=\"diffText\">\n//     \t\t\t\t\tSystem-generated Text\n//     \t\t\t\t  </label>\n//     \t\t\t\t  <textarea\n//     \t\t\t\t\tid=\"diffText\"\n//     \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n//     \t\t\t\t\tvalue={outputText}\n//     \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\t\tdangerouslySetInnerHTML={{ __html: diffHtml }}\n//     \t\t\t\t\treadOnly={!isEditable}\n//     \t\t\t\t\tplaceholder=\"Output\"\n//     \t\t\t\t  ></textarea>\n//     \t\t\t\t</div>\n\n//     \t\t\t  </div>\n    \n    \n//     \t\t\t\t{/* Save and Edit Buttons */}\n//     \t\t\t\t<div className={styles.button_container}>\n\n    \n//     \t\t\t\t{isSaveButtonVisible && (\n//     \t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleSave}\n//     \t\t\t\t\tdisabled={isLoading}\n//     \t\t\t\t>\n//     \t\t\t\t\tSave\n//     \t\t\t\t</button>\n//     \t\t\t\t)}\n    \n//     \t\t\t\t{!isEditable && (\n//     \t\t\t\t\t<button\n//     \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n//     \t\t\t\t\tonClick={handleEdit}\n//     \t\t\t\t\t>\n//     \t\t\t\t\tEdit\n//     \t\t\t\t\t</button>\n//     \t\t\t\t)}\n//     \t\t\t\t</div>\n//           {/* Survey Prompt */}\n//     \t  {showSurveyPrompt && (\n//                   <div className={styles.survey_prompt}>\n//                     <p>\n//                       Please take the survey to help us improve {\" \"}\n//                       <button\n//                         className={styles.link_btn}\n//                         onClick={() =>\n//                           navigate(\"/survey\", {\n//                             state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                           })\n//                         }\n//                       >\n//                         Take the Survey\n//                       </button>\n//                     </p>\n//                   </div>\n//                 )}\n    \n//     \t\t\t</div>\n//     \t\t</div> \n//     \t\t</div>\n//     \t  </>\n//   );\n// };\n\n// export default Review;"],"mappings":"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MAAM,CAAC,CAAC,CAACiB,KAAK;oBACrDnD,SAAS;oBACTC,UAAU;oBACVE;kBACF;gBACF,CAAC,CAAC;cACJ,CAAE;cAAAsF,QAAA,EACH;YAEC;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAACjG,EAAA,CAnaID,MAAM;EAAA,QAGQX,WAAW,EAYZC,WAAW;AAAA;AAAAwJ,EAAA,GAfxB9I,MAAM;AAqaZ,eAAeA,MAAM;;AAIrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UApBC;;AAwBD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA8I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}