{"ast":null,"code":"// import React, { useState, useEffect, useRef  } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import { FaRegCopy, FaDownload } from \"react-icons/fa\"; // Import FontAwesome icons\n// import { saveAs } from \"file-saver\";\n// import styles from \"./styles.module.css\";\n// const Review = () => {\n//   const { state } = useLocation();\n//   const { inputText, outputText: initialOutputText, editHistory: restoredEditHistory } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//     editHistory: [],\n//   };\n//   const [outputText, setOutputText] = useState(initialOutputText);\n//   const [editHistory, setEditHistory] = useState(restoredEditHistory || []);\n//   const [saveHistory, setSaveHistory] = useState([]);\n//   const [diffHtml, setDiffHtml] = useState(\"\");\n//   const [isSaveButtonEnabled, setIsSaveButtonEnabled] = useState(false);\n//   const navigate = useNavigate();\n//   const [isEditable, setIsEditable] = useState(false);\n//   const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//   const [showDifference, setShowDifference] = useState(false);\n//   const [inputWordCount, setInputWordCount] = useState(0);\n//   const [inputCharCount, setInputCharCount] = useState(0);\n//   const [outputWordCount, setOutputWordCount] = useState(0);\n//   const [outputCharCount, setOutputCharCount] = useState(0);\n// //   const navigate = useNavigate();\n//   const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n//   const contentEditableRef = useRef(null); // Reference to the contentEditable div\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n//   const surveyRef = useRef(null);\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\n//   const email = user?.email;\n//   const [documents, setDocuments] = useState([]);\n//   const [selectedDocument, setSelectedDocument] = useState(null);\n//   const [selectedVersion, setSelectedVersion] = useState(null);\n//   const [selectedVersionIndex, setSelectedVersionIndex] = useState(0); \n//   const [expandedDocs, setExpandedDocs] = useState({});\n//   const [liveEditedText, setLiveEditedText] = useState(initialOutputText);\n//   // const contentEditableRef = useRef(null);\n//   // const [outputText, setOutputText] = useState(\"\");\n//     const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n// \tnavigate(\"/Login\"); \n//   localStorage.removeItem(\"reviewPageState\"); // Clear the saved state\n//    // window.location.reload();\n//   };\n//   const countWordsAndChars = (text) => {\n//     const words = text.trim().split(/\\s+/).filter(Boolean).length;\n//     const chars = text.length;\n//     return { words, chars };\n//   };\n//       // Function to calculate and render diff\n//   // const generateDiff = (input, output) => {\n//   //       const dmp = new DiffMatchPatch();\n//   //       const diffs = dmp.diff_main(input, output);\n//   //       dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//   //       return dmp.diff_prettyHtml(diffs);\n//   //     };\n//       const generateDiff = (input, output) => {\n//         const dmp = new DiffMatchPatch();\n//         const diffs = dmp.diff_main(input, output);\n//         dmp.diff_cleanupSemantic(diffs);\n//         const html = diffs\n//           .map(([op, text]) => {\n//             if (op === DiffMatchPatch.DIFF_INSERT) {\n//               return `<span style=\"background-color: #d4fcdc; color: green;\">${text}</span>`;\n//             } else if (op === DiffMatchPatch.DIFF_DELETE) {\n//               return `<span style=\"background-color: #ffecec; color: red; text-decoration: line-through;\">${text}</span>`;\n//             } else {\n//               return `<span>${text}</span>`;\n//             }\n//           })\n//           .join(\"\");\n//         return html;\n//       };\n// \t// Function to format the prompt with user input\n//   const generatePrompt = (inputText) => {\n//     return `\n//     You are an expert in accessible communication, tasked with transforming complex text into clear, accessible plain language for individuals with Intellectual and Developmental Disabilities (IDD) or those requiring simplified content. Retain all essential information and intent while prioritizing readability, comprehension, and inclusivity.\n//     Text simplification refers to rewriting or adapting text to make it easier to read and understand while keeping the same level of detail and precision. Make sure you focus on simplification and not summarization. The length of generated output text must be similar to that of input text.\n//     Guidelines for Simplification:\n//     Vocabulary and Terminology:\n//     Replace uncommon, technical, or abstract words with simple, everyday language.\n//     Define unavoidable complex terms in plain language within parentheses upon first use (example: “cardiologist (heart doctor)”).\n//     Avoid idioms, metaphors, sarcasm, or culturally specific references.\n//     Sentence Structure:\n//     Use short sentences (10--15 words max). Break long sentences into 1–2 ideas each.\n//     Prefer active voice (example: “The doctor examined the patient” vs. “The patient was examined by the doctor”).\n//     Avoid nested clauses, passive voice, and ambiguous pronouns (example: “they,” “it”).\n//     Clarity and Flow:\n//     Organize content logically, using headings/subheadings to group related ideas.\n//     Use bullet points or numbered lists for steps, options, or key points.\n//     Ensure each paragraph focuses on one main idea.\n//     Tone and Engagement:\n//     Write in a neutral, conversational tone (avoid formal or academic language).\n//     Address the reader directly with “you” or “we” where appropriate.\n//     Use consistent terms for concepts (avoid synonyms that may confuse).\n//     Avoid Exclusionary Elements:\n//     Remove jargon, acronyms (unless defined), and expand abbreviations if needed (example: “ASAP” → “as soon as possible”).\n//     Eliminate metaphors, idioms, or implied meanings (example: “hit the books” → “study”).\n//     Avoid double negatives (example: “not uncommon” → “common”).\n//     Structural Support:\n//     Add clear headings to label sections (example: “How to Apply for Benefits”).\n//     Use formatting tools like bold for key terms or warnings.\n//     Chunk information into short paragraphs with line breaks for visual ease.\n//     Inclusivity Checks:\n//     Ensure content is free of bias, stereotypes, or assumptions about the reader.\n//     Use gender-neutral language (example: “they” instead of “he/she”).\n//     Output Requirements:\n//     Return only the simplified text, without markdown, emojis, or images.\n//     Preserve original context, facts, and intent. Do not omit critical details.\n//     Prioritize clarity over brevity; focus on simplification and not summarization. The length of generated output text should be same or similar to that of input text.\n//     Do not simplify already simple text.\n//     Example Transformation:\n//     Original: “Individuals experiencing adverse climatic conditions may necessitate relocation to mitigate health risks.”\n//     Simplified: “If weather conditions become dangerous, people might need to move to stay safe.”\n//     For the provided input text, apply the above guidelines rigorously. Ensure the output is accessible to readers with varied cognitive abilities, emphasizing clarity, simplicity, and logical structure. Verify that the simplified text aligns with plain language standards like WCAG and PlainLanguage.gov.\n//     \"${inputText}\"\n//     `;\n//     };\n//     const splitTextIntoChunks = (text, maxTokens) => {\n//     const words = text.split(\" \");\n//     let chunks = [];\n//     let currentChunk = [];\n//     for (let word of words) {\n//       if (currentChunk.join(\" \").length + word.length < maxTokens) {\n//       currentChunk.push(word);\n//       } else {\n//       chunks.push(currentChunk.join(\" \"));\n//       currentChunk = [word];\n//       }\n//     }\n//     if (currentChunk.length > 0) chunks.push(currentChunk.join(\" \"));\n//     return chunks;\n//     };\n//   const saveSimplification = async () => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       if (!user) return;\n//     const numWordsInput = inputText.trim().split(/\\s+/).filter(Boolean).length;\n//     const numCharsInput = inputText.length;\n//     const numWordsOutput = outputText.trim().split(/\\s+/).filter(Boolean).length;\n//     const numCharsOutput = outputText.length;\n//       const response = await fetch(\"http://localhost:5001/api/simplifications\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           userId: user._id,\n//           inputText,\n//           outputText,\n//           metrics: { numWordsInput, numCharsInput, numWordsOutput, numCharsOutput }\n//         }),\n//       });\n//       if (response.ok) {\n//         console.log(\"Simplification saved successfully.\");\n//       } else {\n//         const error = await response.json();\n//         console.error(\"Error saving simplification:\", error.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving simplification:\", error);\n//     }\n//   };\n//   // const handleLiveEdit = (e) => {\n//   //   const updatedHTML = e.currentTarget.innerText; // Use innerText to avoid HTML tags\n//   //   setLiveEditedText(updatedHTML);\n//   //   const diffResult = generateDiff(initialOutputText, updatedHTML);\n//   //   setDiffHtml(diffResult);\n//   //   setIsSaveButtonEnabled(true);\n//   // };\n//   const handleResimplify = async () => {\n//     if (!inputText.trim()) return;\n//     setIsLoading(true); // Show loading state\n//     try {\n//       const chunks = splitTextIntoChunks(inputText, 10000);\n//       let combinedOutput = \"\";\n//       for (let chunk of chunks) {\n//       const prompt = generatePrompt(chunk);\n//       const response = await fetch(\"http://localhost:5001/api/gpt4\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ prompt }),\n//       });\n//       if (!response.ok) {\n//         console.error(\"Error with API request:\", response.status);\n//         return;\n//       }\n//       const data = await response.json();\n//       console.log(\"Full API Response: \", data);\n//       const newOutput = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n//       // Update System-generated Text\n//       combinedOutput += newOutput + \" \";\n//       console.log(\"Final Combined Output: \", combinedOutput);\n//       }\n//       setOutputText(combinedOutput);\n//     } catch (error) {\n//       console.error(\"Error fetching GPT-4o response:\", error);\n//       setOutputText(\"An error occurred while simplifying the text.\");\n//     }\n//     setIsLoading(false);\n//   };\n//   //\n//   const saveEditToHistory = async (editedText) => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       if (!user) return;\n//       const numWords = editedText.trim().split(/\\s+/).filter(Boolean).length;\n//       const numChars = editedText.length;\n//       const response = await fetch(\"http://localhost:5001/api/simplifications/edit\", {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           email: user.email,\n//           inputText,\n//           editedText,\n//           numWords,\n//           numChars\n//         }),\n//       });\n//       if (response.ok) {\n//         console.log(\"Edit saved to history.\");\n//       } else {\n//         const error = await response.json();\n//         console.error(\"Error saving edit to history:\", error.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving edit to history:\", error);\n//     }\n//   };\n//   const saveFinalOutput = async () => {\n//     // const finalText = contentEditableRef.current?.innerText || \"\";\n//     // console.log(\"Final text to submit:\", finalText);\n//     // setOutputText(finalText);\n//     setIsLoading(true);\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       if (!user) return;\n//       const numWords = outputText.trim().split(/\\s+/).filter(Boolean).length;\n//       const numChars = outputText.length;\n//       const finalText = document.getElementById(\"outputText\")?.value || outputText;\n//       const response = await fetch(\"http://localhost:5001/api/simplifications/save\", {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           email: user.email,\n//           inputText,\n//           finalText: outputText,\n//           numWords,\n//           numChars,\n//           readability: 4, // Example value, replace with user input\n//           accuracy: 5, // Example value, replace with user input\n//           comments: \"Looks good.\" // Example value, replace with user input\n//         }),\n//       });\n//     const timestamp = new Date().toISOString();\n//     setEditHistory((prev) => [\n//       ...prev,\n//       { timestamp, text: finalText},\n//     ]);\n//       if (response.ok) {\n//         console.log(\"Final output saved successfully.\");\n//         setIsSaveButtonEnabled(false); // Disable save button\n//         setShowSurveyPrompt(true);    // Ensure survey prompt is displayed\n//         // ✅ Automatically scroll to survey prompt\n//         setTimeout(() => {\n//             if (surveyRef.current) {\n//                 surveyRef.current.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n//             }\n//         }, 300);\n//         const timestamp = new Date().toISOString();\n//         setSaveHistory((prev) => [...prev, { timestamp, finalText: finalText}]); // 🔹 Save to history\n//       } else {\n//         const error = await response.json();\n//         console.error(\"Error saving final output:\", error.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving final output:\", error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n//   const handleEditChange = (event) => {\n//     const updatedText = event.target.value;\n//     setOutputText(updatedText);\n//     setIsSaveButtonEnabled(true); // Enable save button on edit\n//     // const timestamp = new Date().toISOString();\n//     // setEditHistory((prev) => [\n//     //   ...prev,\n//     //   { timestamp, text: updatedText },\n//     // ]);\n//     // Save the change to edit history in MongoDB\n//     saveEditToHistory(updatedText);\n//   };\n//   const handleCopy = (text) => {\n//     navigator.clipboard.writeText(text).then(\n//       () => {\n//         alert(\"Copied to clipboard!\");\n//       },\n//       (err) => {\n//         console.error(\"Failed to copy text:\", err);\n//       }\n//     );\n//   };\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     saveAs(blob, `${filename}.${format}`);\n//   };\n//   useEffect(() => {\n//     if (!email) return;\n//     const fetchDocuments = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/simplifications/user/${email}`);\n//         const result = await response.json();\n//         if (response.ok) {\n//           const sortedDocs = result.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n//           setDocuments(sortedDocs);\n//           if (!state && sortedDocs.length > 0) {\n//             setSelectedDocument(sortedDocs[0]);\n//             setSelectedVersion(sortedDocs[0].outputText);\n//             setOutputText(sortedDocs[0].outputText);\n//           }\n//         } else {\n//           console.error(\"Error fetching documents:\", result.message);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching documents:\", error);\n//       }\n//     };\n//     fetchDocuments();\n//   }, [email]);\n//   const toggleExpandDoc = (docId) => {\n//     setExpandedDocs((prev) => ({\n//       ...prev,\n//       [docId]: !prev[docId],\n//     }));\n//   };\n//   const handleDocumentClick = (doc) => {\n//     setSelectedDocument(doc);\n//     setSelectedVersion(doc.outputText);\n//     setOutputText(doc.outputText);\n//     setSelectedVersionIndex(0);\n//   };\n//   const handleVersionChange = (docId, versionIndex) => {\n//     const doc = documents.find((d) => d._id === docId);\n//     if (!doc) return;\n//     const selectedText =\n//       versionIndex === \"0\"\n//         ? doc.outputText\n//         : doc.saveHistory[versionIndex - 1].finalText;\n//     setSelectedVersion(selectedText);\n//     setOutputText(selectedText);\n//     setSelectedDocument(doc);\n//     setSelectedVersionIndex(versionIndex);\n//   };\n//   useEffect(() => {\n//     const reviewPageState = {\n//       inputText,\n//       outputText,\n//       editHistory,\n//     };\n//     localStorage.setItem(\"reviewPageState\", JSON.stringify(reviewPageState));\n//   }, [outputText, editHistory, inputText]);\n//   useEffect(() => {\n//     const savedState = JSON.parse(localStorage.getItem(\"reviewPageState\"));\n//     if (savedState) {\n//       setOutputText(savedState.outputText || \"\");\n//       setEditHistory(savedState.editHistory || []);\n//     } else {\n//       setOutputText(initialOutputText);\n//       setEditHistory(restoredEditHistory || []);\n//     }\n//     if (!localStorage.getItem(\"initialAIOutput\")) {\n//       localStorage.setItem(\"initialAIOutput\", initialOutputText);\n//     }\n//    saveSimplification(); // Save the initial inputText and outputText\n//     setIsSaveButtonEnabled(true);\n//   }, [initialOutputText, restoredEditHistory]);\n//   // useEffect(() => {\n//   //   // Save initial input and output text in MongoDB\n//   //   saveSimplification();\n//   // }, []);\n//   useEffect(() => {\n//     const diffResult = generateDiff(inputText, outputText);\n//     setDiffHtml(diffResult);\n//    // saveSimplification();\n//   }, [inputText, outputText]);\n//   useEffect(() => {\n//     saveSimplification(); \n//     setIsSaveButtonEnabled(true);\n//     const savedState = JSON.parse(localStorage.getItem(\"reviewPageState\"));\n//     if (savedState) {\n//       setOutputText(savedState.outputText || \"\");\n//       setEditHistory(savedState.editHistory || []);\n//     }\n//   }, []);\n//   useEffect(() => {\n//     const { words: inputWords, chars: inputChars } = countWordsAndChars(inputText);\n//     const { words: outputWords, chars: outputChars } = countWordsAndChars(outputText);\n//     setInputWordCount(inputWords);\n//     setInputCharCount(inputChars);\n//     setOutputWordCount(outputWords);\n//     setOutputCharCount(outputChars);\n//   }, [inputText, outputText]);\n//   const handleHistoryClick = (edit) => {\n//     setOutputText(edit.text);\n//     const diffResult = generateDiff(inputText, edit.text);\n//     setDiffHtml(diffResult);\n//     setIsEditable(false);\n//   };\n//   return (\n//     <>\n//       <nav className={styles.navbar}>\n//         {/* <h1>Text Simplification Tool</h1> */}\n//         <h1 \n//     onClick={() => window.location.href = \"http://localhost:5001/\"}\n//     style={{ cursor: \"pointer\" }} // Makes it look clickable\n//  \t\t>\n// \t\tText Simplification Tool</h1>\n//         <button className={styles.white_btn} onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </nav>\n//       <div className={styles.container}>\n//         {/* Sidebar */}\n//         <div\n//           className={`${styles.sidebar} ${\n//             isSidebarVisible ? styles.expanded : \"\"\n//           }`}\n//         >\n//           <button\n//             className={styles.historyIcon}\n//             onClick={() => setIsSidebarVisible(!isSidebarVisible)}\n//           >\n//              🕒   <p style={{ fontSize: \"15px\" }}> History </p> \n//           </button>\n//         {isSidebarVisible && (\n//             <div className={styles.historyContent}>\n//               <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>✖</button>\n//               <ul className={styles.historyList}>\n//                 {documents.map((doc, index) => (\n//                   <li key={doc._id} className={styles.historyItem}>\n//                     {/* <div onClick={() => toggleExpandDoc(doc._id)} className={styles.docHeader}> */}\n//                     <div\n//                       // onClick={() => toggleExpandDoc(doc._id)}\n//                       onClick={() => {\n//                         toggleExpandDoc(doc._id);\n//                         handleDocumentClick(doc);\n//                       }}\n//                       className={`${styles.docHeader} ${selectedDocument?._id === doc._id ? styles.activeDoc : \"\"}`}\n//                     >\n//                       {/* <strong>Document {index + 1}</strong>  */}\n//                       <strong>Document {documents.length - index}</strong> ({doc.inputText.substring(0, 20)}..., {new Date(doc.createdAt).toLocaleDateString()})\n//                     </div>\n//                     {expandedDocs[doc._id] && (\n//                       <ul className={styles.versionList}>\n//                         <li key=\"0\" onClick={() => handleVersionChange(doc._id, 0)} className={selectedVersionIndex === 0 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"}>\n//                           Version 1 (Generated Text)\n//                         </li>\n//                         {doc.saveHistory.map((version, vIndex) => (\n//                           <li\n//                             key={vIndex + 1}\n//                             onClick={() => handleVersionChange(doc._id, vIndex + 1)}\n//                             className={selectedVersionIndex === vIndex + 1 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"}\n//                           >\n//                             Version {vIndex + 2} (Saved on {new Date(version.timestamp).toLocaleDateString()})\n//                           </li>\n//                         ))}\n//                       </ul>\n//                     )}\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           )}\n//         {/* <div className={styles.versionSelector}>\n//           <label>Select Version:</label>\n//           <select onChange={handleVersionChange} value={documents.indexOf(selectedDocument)}>\n//             <option value=\"0\">Version 1 (Generated Text)</option>\n//             {selectedDocument?.saveHistory.map((version, index) => (\n//               <option key={index + 1} value={index + 1}>\n//                 Version {index + 2} (Saved on {new Date(version.timestamp).toLocaleDateString()})\n//               </option>\n//             ))}\n//           </select>\n//         </div> */}\n//         </div>\n//         {/* Main Content */}\n//         <div\n//           className={`${styles.mainContent} ${\n//             isSidebarVisible ? styles.withSidebar : \"\"\n//           }`}\n//         >\n// \t\t\t<div className={styles.description}>\n// \t\t\t<p>\n//         Please review the simplified text carefully and if needed, correct/edit it to suit your requirements. Once you are satisfied with your revisions, save the final version and complete the short survey to provide your feedback.\n//       </p>\n// \t\t\t</div>\n// \t\t\t<div className={styles.textareas_container}>\n//   {/* Input Text */}\n//   <div className={styles.text_container}>\n//     <div className={styles.labelWrapper}>\n//       <label className={styles.label} htmlFor=\"inputText\">\n//         Input Text\n//       </label>\n//       <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(inputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         📋 {/* Clipboard Emoji */}\n//         </div>\n//         <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(inputText, \"InputText\", \"txt\")}\n//         title=\"Download as .txt file\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//             {/* New Re-simplify Button */}\n//       <div\n//         className={styles.copyIcon}\n//         onClick={handleResimplify}\n//         title=\"Re-simplify Text\"\n//         style={{ cursor: \"pointer\" }}\n//       >\n//         🔄 \n//       </div>\n//       </div>\n//     </div>\n//     <p className={styles.countText}>Words: {inputWordCount} | Characters: {inputCharCount}</p>\n//     {/* <textarea id=\"inputText\" className={styles.textarea} value={selectedDocument?.inputText || \"\"} readOnly></textarea> */}\n//     <textarea\n//       id=\"inputText\"\n//       className={`${styles.textarea} ${styles.side_by_side}`}\n//       value={selectedDocument?.inputText || \"\"}\n//       readOnly\n//     ></textarea>\n//   </div>\n// \t\t\t{/* Output Text Box */}\n// <div className={styles.text_container}>\n//   <div className={styles.labelWrapper}>\n//     <label className={styles.label} htmlFor=\"outputText\">\n//       AI-generated Text\n//     </label>\n//     <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(outputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         📋 {/* Clipboard Emoji */}\n//       </div>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//         title=\"Download as .txt file\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//       <button\n//         className={styles.toggleDiffBtn}\n//         onClick={() => setShowDifference(!showDifference)}\n//       >\n//         {showDifference ? \"Hide Difference with input text\" : \"Show Difference with input text\"}\n//       </button>\n//     </div>\n//   </div>\n//     {/* Word and Character Count */}\n//     <p className={styles.countText}>Words: {outputWordCount} | Characters: {outputCharCount}</p>\n//   <textarea\n//     id=\"outputText\"\n//     className={`${styles.output_box} ${styles.side_by_side}`}\n//     value={outputText}\n//     onChange={handleEditChange}\n//     readOnly={isEditable}\n//     placeholder=\"Output\"\n//   ></textarea>\n//   {/* <div\n//     ref={contentEditableRef}\n//     contentEditable={!isEditable}\n//     className={`${styles.output_box} ${styles.side_by_side} ${styles.editableDiv}`}\n//     onInput={(e) => handleLiveEdit(e)}\n//     dangerouslySetInnerHTML={{ __html: diffHtml }}\n//   ></div> */}\n// </div>\n//             {/* Difference Text */}\n// \t\t\t{showDifference && (\n// \t\t\t\t<div className={styles.text_container}>\n//           <div className={styles.labelWrapper}>\n//             <label className={styles.label} htmlFor=\"outputText\">\n//               Difference from input text\n//             </label>\n//           </div>   \n// \t\t\t\t\t<div\n//             id=\"diffText\"\n//             className={`${styles.output_box} ${styles.side_by_side}`}\n//             dangerouslySetInnerHTML={{ __html: diffHtml }}\n// \t\t\t\t\t>\n//           </div>\n// \t\t\t\t {/* )} */}\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t\t</div>\n//           {/* Buttons */}\n// \t\t\t<div className={styles.button_container}>\n//     \t\t\t\t{/* <button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//               onClick={saveFinalOutput}\n//               disabled={!isSaveButtonEnabled || isLoading}\n//               title={!isSaveButtonEnabled ? \"Please make an edit before submitting.\" : \"\"}\n//     \t\t\t\t>\n//     \t\t\t\t\tSubmit\n//     \t\t\t\t</button> */}\n//             <button\n//             className={styles.submit_btn}\n//             onClick={saveFinalOutput}\n//             disabled={!isSaveButtonEnabled || isLoading}\n//             title={!isSaveButtonEnabled ? \"Please make an edit before saving again.\" : \"\"}\n//             >\n//             Save\n//             </button>\n//       </div>\n//   {/* Survey Prompt (Appears Only After Submitting) */}\n//   {showSurveyPrompt && (\n//     <div className={styles.survey_prompt} ref={surveyRef}>\n//       <p className={styles.survey_text}>\n//         Please take the survey to help us improve.\n//         <button\n//           className={styles.survey_btn}\n//           onClick={() => {\n//             const currentOutput = document.getElementById(\"outputText\")?.value;\n//             const initialAIOutput = localStorage.getItem(\"initialAIOutput\") || initialOutputText;\n//             const reviewPageState = { inputText, outputText: currentOutput, editHistory, saveHistory };\n//             localStorage.setItem(\"reviewPageState\", JSON.stringify(reviewPageState));\n//             navigate(\"/survey\", {\n//               state: {\n//                 email: JSON.parse(localStorage.getItem(\"user\")).email,\n//                 inputText,\n//                 outputText: initialAIOutput,\n//                 editHistory,\n//                 saveHistory: [...saveHistory, { timestamp: new Date().toISOString(), finalText: currentOutput }],\n//               },\n//             });\n//           }}\n//         >\n//           📑 Take the Survey\n//         </button>\n//       </p>\n//     </div>\n//   )}\n// <p className={styles.help_text}>Need Help? <a href=\"mailto:anukumar@uw.edu\">Contact Support</a></p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n// export default Review;\nimport React,{useState,useEffect,useRef}from\"react\";import{useLocation,useNavigate}from\"react-router-dom\";import DiffMatchPatch from\"diff-match-patch\";import{saveAs}from\"file-saver\";import styles from\"./styles.module.css\";// -----------------------------------------------------------------------------\n// REVIEW PAGE – keeps input/output/version history perfectly in‑sync\n// -----------------------------------------------------------------------------\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Review=()=>{var _JSON$parse;/* -------------------------------------------------------------------------\n   * 1.  INITIAL NAVIGATION STATE\n   * ---------------------------------------------------------------------- */const{state}=useLocation();const{inputText:navInputText=\"\",outputText:navOutputText=\"\",editHistory:restoredEditHistory=[]}=state||{};/* Local editable copies – we never mutate nav* directly */const[inputText,setInputText]=useState(navInputText);const[outputText,setOutputText]=useState(navOutputText);const initialOutputText=navOutputText;// still needed for survey redirect\nconst[editHistory,setEditHistory]=useState(restoredEditHistory);const[saveHistory,setSaveHistory]=useState([]);/* UI‑state */const[diffHtml,setDiffHtml]=useState(\"\");const[isSaveButtonEnabled,setIsSaveButtonEnabled]=useState(false);const[isEditable,setIsEditable]=useState(false);const[isSidebarVisible,setIsSidebarVisible]=useState(false);const[showDifference,setShowDifference]=useState(false);const[isLoading,setIsLoading]=useState(false);const[showSurveyPrompt,setShowSurveyPrompt]=useState(false);/* Word / char counters */const[inputWordCount,setInputWordCount]=useState(0);const[inputCharCount,setInputCharCount]=useState(0);const[outputWordCount,setOutputWordCount]=useState(0);const[outputCharCount,setOutputCharCount]=useState(0);/*  Sidebar – docs & versions  */const[documents,setDocuments]=useState([]);// const [selectedDocument, setSelectedDocument] = useState(null);\nconst[selectedDocId,setSelectedDocId]=useState(null);const[selectedVersionIdx,setSelectedVersionIdx]=useState(0);// const [selectedVersionIndex, setSelectedVersionIndex] = useState(0);\nconst[expandedDocs,setExpandedDocs]=useState({});/* Misc */const navigate=useNavigate();const surveyRef=useRef(null);const email=(_JSON$parse=JSON.parse(localStorage.getItem(\"user\")))===null||_JSON$parse===void 0?void 0:_JSON$parse.email;/* -------------------------------------------------------------------------\n   * 2.  HELPERS\n   * ---------------------------------------------------------------------- */const countWordsAndChars=txt=>({words:txt.trim().split(/\\s+/).filter(Boolean).length,chars:txt.length});/** pretty diff → HTML */const generateDiff=(a,b)=>{const dmp=new DiffMatchPatch();const diffs=dmp.diff_main(a,b);dmp.diff_cleanupSemantic(diffs);return diffs.map(_ref=>{let[op,txt]=_ref;if(op===DiffMatchPatch.DIFF_INSERT)return`<span style=\"background:#d4fcdc;color:green;\">${txt}</span>`;if(op===DiffMatchPatch.DIFF_DELETE)return`<span style=\"background:#ffecec;color:red;text-decoration:line-through;\">${txt}</span>`;return txt;}).join(\"\");};/** chunker for long prompts */const splitTextIntoChunks=(txt,maxTokens)=>{const words=txt.split(\" \");const chunks=[];let chunk=[];words.forEach(w=>{if(chunk.join(\" \").length+w.length<maxTokens)chunk.push(w);else{chunks.push(chunk.join(\" \"));chunk=[w];}});if(chunk.length)chunks.push(chunk.join(\" \"));return chunks;};const generatePrompt=inputText=>{return`\n    You are an expert in accessible communication, tasked with transforming complex text into clear, accessible plain language for individuals with Intellectual and Developmental Disabilities (IDD) or those requiring simplified content. Retain all essential information and intent while prioritizing readability, comprehension, and inclusivity.\n\n    Text simplification refers to rewriting or adapting text to make it easier to read and understand while keeping the same level of detail and precision. Make sure you focus on simplification and not summarization. The length of generated output text must be similar to that of input text.\n\n    Guidelines for Simplification:\n    Vocabulary and Terminology:\n    Replace uncommon, technical, or abstract words with simple, everyday language.\n    Define unavoidable complex terms in plain language within parentheses upon first use (example: “cardiologist (heart doctor)”).\n    Avoid idioms, metaphors, sarcasm, or culturally specific references.\n\n    Sentence Structure:\n    Use short sentences (10--15 words max). Break long sentences into 1–2 ideas each.\n    Prefer active voice (example: “The doctor examined the patient” vs. “The patient was examined by the doctor”).\n    Avoid nested clauses, passive voice, and ambiguous pronouns (example: “they,” “it”).\n\n    Clarity and Flow:\n    Organize content logically, using headings/subheadings to group related ideas.\n    Use bullet points or numbered lists for steps, options, or key points.\n    Ensure each paragraph focuses on one main idea.\n\n    Tone and Engagement:\n    Write in a neutral, conversational tone (avoid formal or academic language).\n    Address the reader directly with “you” or “we” where appropriate.\n    Use consistent terms for concepts (avoid synonyms that may confuse).\n\n    Avoid Exclusionary Elements:\n    Remove jargon, acronyms (unless defined), and expand abbreviations if needed (example: “ASAP” → “as soon as possible”).\n    Eliminate metaphors, idioms, or implied meanings (example: “hit the books” → “study”).\n    Avoid double negatives (example: “not uncommon” → “common”).\n\n    Structural Support:\n    Add clear headings to label sections (example: “How to Apply for Benefits”).\n    Use formatting tools like bold for key terms or warnings.\n    Chunk information into short paragraphs with line breaks for visual ease.\n\n    Inclusivity Checks:\n    Ensure content is free of bias, stereotypes, or assumptions about the reader.\n    Use gender-neutral language (example: “they” instead of “he/she”).\n\n\n    Output Requirements:\n    Return only the simplified text, without markdown, emojis, or images.\n    Preserve original context, facts, and intent. Do not omit critical details.\n    Prioritize clarity over brevity; focus on simplification and not summarization. The length of generated output text should be same or similar to that of input text.\n    Do not simplify already simple text.\n\n    Example Transformation:\n    Original: “Individuals experiencing adverse climatic conditions may necessitate relocation to mitigate health risks.”\n    Simplified: “If weather conditions become dangerous, people might need to move to stay safe.”\n\n    For the provided input text, apply the above guidelines rigorously. Ensure the output is accessible to readers with varied cognitive abilities, emphasizing clarity, simplicity, and logical structure. Verify that the simplified text aligns with plain language standards like WCAG and PlainLanguage.gov.\n\n    \"${inputText}\"\n    `;};/* -------------------------------------------------------------------------\n   * 3.  NETWORK HELPERS (save / resimplify)\n   * ---------------------------------------------------------------------- */const saveSimplification=async()=>{const user=JSON.parse(localStorage.getItem(\"user\"));if(!user)return;const{words:wIn,chars:cIn}=countWordsAndChars(inputText);const{words:wOut,chars:cOut}=countWordsAndChars(outputText);await fetch(\"http://localhost:5001/api/simplifications\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({userId:user._id,inputText,outputText,metrics:{numWordsInput:wIn,numCharsInput:cIn,numWordsOutput:wOut,numCharsOutput:cOut}})}).catch(err=>console.error(err));};const saveEditToHistory=async txt=>{const user=JSON.parse(localStorage.getItem(\"user\"));if(!user)return;const{words,chars}=countWordsAndChars(txt);await fetch(\"http://localhost:5001/api/simplifications/edit\",{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:user.email,inputText,editedText:txt,numWords:words,numChars:chars})});};/* -------------------------------------------------------------------------\n   * 4.  EFFECTS – fetch docs, sync diff, counters, localStorage state\n   * ---------------------------------------------------------------------- */useEffect(()=>{if(!email)return;(async()=>{try{const res=await fetch(`http://localhost:5001/api/simplifications/user/${email}`);const result=await res.json();if(res.ok){const sorted=result.data.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));setDocuments(sorted);if(!state&&sorted.length){setSelectedDocument(sorted[0]);setInputText(sorted[0].inputText);setOutputText(sorted[0].outputText);}}}catch(e){console.error(\"fetch docs\",e);}})();},[email,state]);// diff when either side changes\nuseEffect(()=>setDiffHtml(generateDiff(inputText,outputText)),[inputText,outputText]);// word/char counters\nuseEffect(()=>{const{words:wIn,chars:cIn}=countWordsAndChars(inputText);const{words:wOut,chars:cOut}=countWordsAndChars(outputText);setInputWordCount(wIn);setInputCharCount(cIn);setOutputWordCount(wOut);setOutputCharCount(cOut);},[inputText,outputText]);// persist review page snapshot (so back/refresh is safe)\nuseEffect(()=>{localStorage.setItem(\"reviewPageState\",JSON.stringify({inputText,outputText,editHistory}));},[inputText,outputText,editHistory]);/* -------------------------------------------------------------------------\n   * 5.  HANDLERS – sidebar, editing, resimplify, save, etc.\n   * ---------------------------------------------------------------------- */// const handleDocumentClick = (doc) => {\n//   setSelectedDocument(doc);\n//   setInputText(doc.inputText);\n//   setOutputText(doc.outputText);\n//   setSelectedVersionIndex(0);\n// };\nconst handleDocumentClick=doc=>{setSelectedDocId(doc._id);setSelectedVersionIdx(0);// generated text\nsetInputText(doc.inputText);setOutputText(doc.outputText);};//  const handleVersionChange = (docId, idx) => {\n//     const doc = documents.find((d) => d._id === docId);\n//     if (!doc) return;\n//     const txt = idx === 0 ? doc.outputText : (doc.saveHistory ?? [])[idx - 1]?.finalText ?? doc.outputText;\n//     setSelectedDocId(docId);\n//     setSelectedVersionIdx(idx);\n//     setInputText(doc.inputText);\n//     setOutputText(txt);\n//   };\nconst handleVersionChange=(docId,idx)=>{var _finalText,_ref2,_doc$saveHistory;const doc=documents.find(d=>d._id===docId);if(!doc)return;const txt=idx===0?doc.outputText:(_finalText=(_ref2=((_doc$saveHistory=doc.saveHistory)!==null&&_doc$saveHistory!==void 0?_doc$saveHistory:[])[idx-1])===null||_ref2===void 0?void 0:_ref2.finalText)!==null&&_finalText!==void 0?_finalText:doc.outputText;setSelectedDocId(docId);setSelectedVersionIdx(idx);setInputText(doc.inputText);setOutputText(txt);};const handleEditChange=e=>{const txt=e.target.value;setOutputText(txt);setIsSaveButtonEnabled(true);saveEditToHistory(txt);};const handleResimplify=async()=>{if(!inputText.trim())return;setIsLoading(true);try{const chunks=splitTextIntoChunks(inputText,10000);let combo=\"\";for(const ch of chunks){const res=await fetch(\"http://localhost:5001/api/gpt4\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({prompt:generatePrompt(ch)})});if(!res.ok)continue;const data=await res.json();combo+=((data===null||data===void 0?void 0:data.response)||\"\").replace(/^\"|\"$/g,\"\")+\" \";}setOutputText(combo.trim());}catch(e){console.error(e);}setIsLoading(false);};const saveFinalOutput=async()=>{setIsLoading(true);try{const user=JSON.parse(localStorage.getItem(\"user\"));if(!user)return;const{words,chars}=countWordsAndChars(outputText);const res=await fetch(\"http://localhost:5001/api/simplifications/save\",{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email:user.email,inputText,finalText:outputText,numWords:words,numChars:chars,readability:4,accuracy:5,comments:\"Looks good.\"})});if(res.ok){setIsSaveButtonEnabled(false);setShowSurveyPrompt(true);setSaveHistory(p=>[...p,{timestamp:new Date().toISOString(),finalText:outputText}]);setTimeout(()=>{var _surveyRef$current;return(_surveyRef$current=surveyRef.current)===null||_surveyRef$current===void 0?void 0:_surveyRef$current.scrollIntoView({behavior:\"smooth\"});},300);}}catch(e){console.error(e);}setIsLoading(false);};const handleLogout=()=>{localStorage.removeItem(\"token\");localStorage.removeItem(\"reviewPageState\");navigate(\"/Login\");};const handleCopy=txt=>navigator.clipboard.writeText(txt);const handleDownload=(txt,name)=>saveAs(new Blob([txt],{type:\"text/plain;charset=utf-8\"}),`${name}.txt`);/* -------------------------------------------------------------------------\n   * 6.  RENDER\n   * ---------------------------------------------------------------------- */return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"nav\",{className:styles.navbar,children:[/*#__PURE__*/_jsx(\"h1\",{onClick:()=>window.location.href=\"http://localhost:5001/\",style:{cursor:\"pointer\"},children:\"Text Simplification Tool\"}),/*#__PURE__*/_jsx(\"button\",{className:styles.white_btn,onClick:handleLogout,children:\"Logout\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{className:`${styles.sidebar} ${isSidebarVisible?styles.expanded:\"\"}`,children:[/*#__PURE__*/_jsxs(\"button\",{className:styles.historyIcon,onClick:()=>setIsSidebarVisible(s=>!s),children:[\"\\uD83D\\uDD52 \",/*#__PURE__*/_jsx(\"p\",{style:{fontSize:15},children:\" History \"})]}),isSidebarVisible&&/*#__PURE__*/_jsxs(\"div\",{className:styles.historyContent,children:[/*#__PURE__*/_jsx(\"button\",{className:styles.closeButton,onClick:()=>setIsSidebarVisible(false),children:\"\\u2716\"}),/*#__PURE__*/_jsx(\"ul\",{className:styles.historyList,children:documents.map((doc,idx)=>{var _doc$saveHistory2;return/*#__PURE__*/_jsxs(\"li\",{className:styles.historyItem,children:[/*#__PURE__*/_jsxs(\"div\",{onClick:()=>{setExpandedDocs(p=>({...p,[doc._id]:!p[doc._id]}));handleDocumentClick(doc);},className:`${styles.docHeader} ${selectedDocId===doc._id?styles.activeDoc:\"\"}`// className={`${styles.docHeader} ${selectedDocument?._id === doc._id ? styles.activeDoc : \"\"}`}\n,children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"Document \",documents.length-idx]}),\" (\",doc.inputText.slice(0,20),\"...)\"]}),expandedDocs[doc._id]&&/*#__PURE__*/_jsxs(\"ul\",{className:styles.versionList,children:[/*#__PURE__*/_jsx(\"li\",{onClick:()=>handleVersionChange(doc._id,0)// className={selectedVersionIndex === 0 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"}\n,className:selectedDocId===doc._id&&selectedVersionIdx===0?styles.activeVersion:\"\",children:\"Version 1 (Generated)\"},\"0\"),((_doc$saveHistory2=doc.saveHistory)!==null&&_doc$saveHistory2!==void 0?_doc$saveHistory2:[]).map((v,vIdx)=>/*#__PURE__*/_jsxs(\"li\",{onClick:()=>handleVersionChange(doc._id,vIdx+1)// className={\n//   selectedVersionIndex === vIdx + 1 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"\n// }\n,className:selectedDocId===doc._id&&selectedVersionIdx===vIdx+1?styles.activeVersion:\"\",children:[\"Version \",vIdx+2,\" (\",new Date(v.timestamp).toLocaleDateString(),\")\"]},vIdx+1))]})]},doc._id);})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:`${styles.mainContent} ${isSidebarVisible?styles.withSidebar:\"\"}`,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.description,children:/*#__PURE__*/_jsx(\"p\",{children:\"Please review the simplified text, edit if necessary, then save and complete the short survey to help us improve.\"})}),/*#__PURE__*/_jsxs(\"div\",{className:styles.textareas_container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.text_container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.labelWrapper,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,children:\"Input Text\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles.actions,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.copyIcon,title:\"Copy\",onClick:()=>handleCopy(inputText),children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.copyIcon,title:\"Download\",onClick:()=>handleDownload(inputText,\"InputText\"),children:\"\\uD83D\\uDCE5\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.copyIcon,title:\"Re\\u2011simplify\",onClick:handleResimplify,children:\"\\uD83D\\uDD04\"})]})]}),/*#__PURE__*/_jsxs(\"p\",{className:styles.countText,children:[\"Words: \",inputWordCount,\" | Characters: \",inputCharCount]}),/*#__PURE__*/_jsx(\"textarea\",{className:`${styles.textarea} ${styles.side_by_side}`,value:inputText,readOnly:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.text_container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.labelWrapper,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,children:\"AI\\u2011generated Text\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles.actions,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.copyIcon,title:\"Copy\",onClick:()=>handleCopy(outputText),children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.copyIcon,title:\"Download\",onClick:()=>handleDownload(outputText,\"GeneratedText\"),children:\"\\uD83D\\uDCE5\"}),/*#__PURE__*/_jsx(\"button\",{className:styles.toggleDiffBtn,onClick:()=>setShowDifference(s=>!s),children:showDifference?\"Hide Difference\":\"Show Difference\"})]})]}),/*#__PURE__*/_jsxs(\"p\",{className:styles.countText,children:[\"Words: \",outputWordCount,\" | Characters: \",outputCharCount]}),/*#__PURE__*/_jsx(\"textarea\",{id:\"outputText\",className:`${styles.output_box} ${styles.side_by_side}`,value:outputText,onChange:handleEditChange,readOnly:isEditable})]}),showDifference&&/*#__PURE__*/_jsxs(\"div\",{className:styles.text_container,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,children:\"Difference from input\"}),/*#__PURE__*/_jsx(\"div\",{className:`${styles.output_box} ${styles.side_by_side}`,dangerouslySetInnerHTML:{__html:diffHtml}})]})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.button_container,children:/*#__PURE__*/_jsx(\"button\",{className:styles.submit_btn,onClick:saveFinalOutput,disabled:!isSaveButtonEnabled||isLoading,title:!isSaveButtonEnabled?\"Make an edit before saving.\":\"\",children:\"Save\"})}),showSurveyPrompt&&/*#__PURE__*/_jsx(\"div\",{className:styles.survey_prompt,ref:surveyRef,children:/*#__PURE__*/_jsxs(\"p\",{className:styles.survey_text,children:[\"Please take the survey to help us improve.\",/*#__PURE__*/_jsx(\"button\",{className:styles.survey_btn,onClick:()=>{navigate(\"/survey\",{state:{email,inputText,outputText:localStorage.getItem(\"initialAIOutput\")||initialOutputText,editHistory,saveHistory:[...saveHistory,{timestamp:new Date().toISOString(),finalText:outputText}]}});},children:\"\\uD83D\\uDCD1\\xA0Take the Survey\"})]})}),/*#__PURE__*/_jsxs(\"p\",{className:styles.help_text,children:[\"Need Help? \",/*#__PURE__*/_jsx(\"a\",{href:\"mailto:anukumar@uw.edu\",children:\"Contact Support\"})]})]})]})]});};export default Review;","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","DiffMatchPatch","saveAs","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Review","_JSON$parse","state","inputText","navInputText","outputText","navOutputText","editHistory","restoredEditHistory","setInputText","setOutputText","initialOutputText","setEditHistory","saveHistory","setSaveHistory","diffHtml","setDiffHtml","isSaveButtonEnabled","setIsSaveButtonEnabled","isEditable","setIsEditable","isSidebarVisible","setIsSidebarVisible","showDifference","setShowDifference","isLoading","setIsLoading","showSurveyPrompt","setShowSurveyPrompt","inputWordCount","setInputWordCount","inputCharCount","setInputCharCount","outputWordCount","setOutputWordCount","outputCharCount","setOutputCharCount","documents","setDocuments","selectedDocId","setSelectedDocId","selectedVersionIdx","setSelectedVersionIdx","expandedDocs","setExpandedDocs","navigate","surveyRef","email","JSON","parse","localStorage","getItem","countWordsAndChars","txt","words","trim","split","filter","Boolean","length","chars","generateDiff","a","b","dmp","diffs","diff_main","diff_cleanupSemantic","map","_ref","op","DIFF_INSERT","DIFF_DELETE","join","splitTextIntoChunks","maxTokens","chunks","chunk","forEach","w","push","generatePrompt","saveSimplification","user","wIn","cIn","wOut","cOut","fetch","method","headers","body","stringify","userId","_id","metrics","numWordsInput","numCharsInput","numWordsOutput","numCharsOutput","catch","err","console","error","saveEditToHistory","editedText","numWords","numChars","res","result","json","ok","sorted","data","sort","Date","createdAt","setSelectedDocument","e","setItem","handleDocumentClick","doc","handleVersionChange","docId","idx","_finalText","_ref2","_doc$saveHistory","find","d","finalText","handleEditChange","target","value","handleResimplify","combo","ch","prompt","response","replace","saveFinalOutput","readability","accuracy","comments","p","timestamp","toISOString","setTimeout","_surveyRef$current","current","scrollIntoView","behavior","handleLogout","removeItem","handleCopy","navigator","clipboard","writeText","handleDownload","name","Blob","type","children","className","navbar","onClick","window","location","href","style","cursor","white_btn","container","sidebar","expanded","historyIcon","s","fontSize","historyContent","closeButton","historyList","_doc$saveHistory2","historyItem","docHeader","activeDoc","slice","versionList","activeVersion","v","vIdx","toLocaleDateString","mainContent","withSidebar","description","textareas_container","text_container","labelWrapper","label","actions","copyIcon","title","countText","textarea","side_by_side","readOnly","toggleDiffBtn","id","output_box","onChange","dangerouslySetInnerHTML","__html","button_container","submit_btn","disabled","survey_prompt","ref","survey_text","survey_btn","help_text"],"sources":["/Users/anukumar/Desktop/Spring2025/local-textsimplification/client/src/components/Review/index.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef  } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// import { FaRegCopy, FaDownload } from \"react-icons/fa\"; // Import FontAwesome icons\n// import { saveAs } from \"file-saver\";\n// import styles from \"./styles.module.css\";\n\n// const Review = () => {\n\n\n//   const { state } = useLocation();\n//   const { inputText, outputText: initialOutputText, editHistory: restoredEditHistory } = state || {\n//     inputText: \"\",\n//     outputText: \"\",\n//     editHistory: [],\n//   };\n\n//   const [outputText, setOutputText] = useState(initialOutputText);\n//   const [editHistory, setEditHistory] = useState(restoredEditHistory || []);\n//   const [saveHistory, setSaveHistory] = useState([]);\n\n\n//   const [diffHtml, setDiffHtml] = useState(\"\");\n//   const [isSaveButtonEnabled, setIsSaveButtonEnabled] = useState(false);\n//   const navigate = useNavigate();\n\n\n//   const [isEditable, setIsEditable] = useState(false);\n//   const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//   const [showDifference, setShowDifference] = useState(false);\n\n//   const [inputWordCount, setInputWordCount] = useState(0);\n//   const [inputCharCount, setInputCharCount] = useState(0);\n\n//   const [outputWordCount, setOutputWordCount] = useState(0);\n//   const [outputCharCount, setOutputCharCount] = useState(0);\n\n\n\n// //   const navigate = useNavigate();\n\n\n//   const [isHistoryVisible, setIsHistoryVisible] = useState(false); // Show/Hide history sidebar\n//   const contentEditableRef = useRef(null); // Reference to the contentEditable div\n\n\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n// \tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n//   const surveyRef = useRef(null);\n\n//   const user = JSON.parse(localStorage.getItem(\"user\"));\n//   const email = user?.email;\n\n//   const [documents, setDocuments] = useState([]);\n//   const [selectedDocument, setSelectedDocument] = useState(null);\n//   const [selectedVersion, setSelectedVersion] = useState(null);\n//   const [selectedVersionIndex, setSelectedVersionIndex] = useState(0); \n//   const [expandedDocs, setExpandedDocs] = useState({});\n\n//   const [liveEditedText, setLiveEditedText] = useState(initialOutputText);\n//   // const contentEditableRef = useRef(null);\n\n//   // const [outputText, setOutputText] = useState(\"\");\n\n\n//     const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n// \tnavigate(\"/Login\"); \n\n//   localStorage.removeItem(\"reviewPageState\"); // Clear the saved state\n\n//    // window.location.reload();\n//   };\n\n//   const countWordsAndChars = (text) => {\n//     const words = text.trim().split(/\\s+/).filter(Boolean).length;\n//     const chars = text.length;\n//     return { words, chars };\n//   };\n  \n//       // Function to calculate and render diff\n//   // const generateDiff = (input, output) => {\n//   //       const dmp = new DiffMatchPatch();\n//   //       const diffs = dmp.diff_main(input, output);\n//   //       dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//   //       return dmp.diff_prettyHtml(diffs);\n//   //     };\n\n//       const generateDiff = (input, output) => {\n//         const dmp = new DiffMatchPatch();\n//         const diffs = dmp.diff_main(input, output);\n//         dmp.diff_cleanupSemantic(diffs);\n      \n//         const html = diffs\n//           .map(([op, text]) => {\n//             if (op === DiffMatchPatch.DIFF_INSERT) {\n//               return `<span style=\"background-color: #d4fcdc; color: green;\">${text}</span>`;\n//             } else if (op === DiffMatchPatch.DIFF_DELETE) {\n//               return `<span style=\"background-color: #ffecec; color: red; text-decoration: line-through;\">${text}</span>`;\n//             } else {\n//               return `<span>${text}</span>`;\n//             }\n//           })\n//           .join(\"\");\n      \n//         return html;\n//       };\n      \n    \n// \t// Function to format the prompt with user input\n//   const generatePrompt = (inputText) => {\n//     return `\n//     You are an expert in accessible communication, tasked with transforming complex text into clear, accessible plain language for individuals with Intellectual and Developmental Disabilities (IDD) or those requiring simplified content. Retain all essential information and intent while prioritizing readability, comprehension, and inclusivity.\n\n//     Text simplification refers to rewriting or adapting text to make it easier to read and understand while keeping the same level of detail and precision. Make sure you focus on simplification and not summarization. The length of generated output text must be similar to that of input text.\n\n//     Guidelines for Simplification:\n//     Vocabulary and Terminology:\n//     Replace uncommon, technical, or abstract words with simple, everyday language.\n//     Define unavoidable complex terms in plain language within parentheses upon first use (example: “cardiologist (heart doctor)”).\n//     Avoid idioms, metaphors, sarcasm, or culturally specific references.\n\n//     Sentence Structure:\n//     Use short sentences (10--15 words max). Break long sentences into 1–2 ideas each.\n//     Prefer active voice (example: “The doctor examined the patient” vs. “The patient was examined by the doctor”).\n//     Avoid nested clauses, passive voice, and ambiguous pronouns (example: “they,” “it”).\n\n//     Clarity and Flow:\n//     Organize content logically, using headings/subheadings to group related ideas.\n//     Use bullet points or numbered lists for steps, options, or key points.\n//     Ensure each paragraph focuses on one main idea.\n\n//     Tone and Engagement:\n//     Write in a neutral, conversational tone (avoid formal or academic language).\n//     Address the reader directly with “you” or “we” where appropriate.\n//     Use consistent terms for concepts (avoid synonyms that may confuse).\n\n//     Avoid Exclusionary Elements:\n//     Remove jargon, acronyms (unless defined), and expand abbreviations if needed (example: “ASAP” → “as soon as possible”).\n//     Eliminate metaphors, idioms, or implied meanings (example: “hit the books” → “study”).\n//     Avoid double negatives (example: “not uncommon” → “common”).\n\n//     Structural Support:\n//     Add clear headings to label sections (example: “How to Apply for Benefits”).\n//     Use formatting tools like bold for key terms or warnings.\n//     Chunk information into short paragraphs with line breaks for visual ease.\n\n//     Inclusivity Checks:\n//     Ensure content is free of bias, stereotypes, or assumptions about the reader.\n//     Use gender-neutral language (example: “they” instead of “he/she”).\n\n\n//     Output Requirements:\n//     Return only the simplified text, without markdown, emojis, or images.\n//     Preserve original context, facts, and intent. Do not omit critical details.\n//     Prioritize clarity over brevity; focus on simplification and not summarization. The length of generated output text should be same or similar to that of input text.\n//     Do not simplify already simple text.\n\n//     Example Transformation:\n//     Original: “Individuals experiencing adverse climatic conditions may necessitate relocation to mitigate health risks.”\n//     Simplified: “If weather conditions become dangerous, people might need to move to stay safe.”\n\n//     For the provided input text, apply the above guidelines rigorously. Ensure the output is accessible to readers with varied cognitive abilities, emphasizing clarity, simplicity, and logical structure. Verify that the simplified text aligns with plain language standards like WCAG and PlainLanguage.gov.\n\n//     \"${inputText}\"\n//     `;\n//     };\n  \n//     const splitTextIntoChunks = (text, maxTokens) => {\n//     const words = text.split(\" \");\n//     let chunks = [];\n//     let currentChunk = [];\n    \n//     for (let word of words) {\n//       if (currentChunk.join(\" \").length + word.length < maxTokens) {\n//       currentChunk.push(word);\n//       } else {\n//       chunks.push(currentChunk.join(\" \"));\n//       currentChunk = [word];\n//       }\n//     }\n//     if (currentChunk.length > 0) chunks.push(currentChunk.join(\" \"));\n//     return chunks;\n//     };\n\n//   const saveSimplification = async () => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       if (!user) return;\n\n\n//     const numWordsInput = inputText.trim().split(/\\s+/).filter(Boolean).length;\n//     const numCharsInput = inputText.length;\n//     const numWordsOutput = outputText.trim().split(/\\s+/).filter(Boolean).length;\n//     const numCharsOutput = outputText.length;\n\n//       const response = await fetch(\"http://localhost:5001/api/simplifications\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           userId: user._id,\n//           inputText,\n//           outputText,\n//           metrics: { numWordsInput, numCharsInput, numWordsOutput, numCharsOutput }\n\n//         }),\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Simplification saved successfully.\");\n        \n//       } else {\n//         const error = await response.json();\n//         console.error(\"Error saving simplification:\", error.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving simplification:\", error);\n//     }\n//   };\n\n//   // const handleLiveEdit = (e) => {\n//   //   const updatedHTML = e.currentTarget.innerText; // Use innerText to avoid HTML tags\n//   //   setLiveEditedText(updatedHTML);\n  \n//   //   const diffResult = generateDiff(initialOutputText, updatedHTML);\n//   //   setDiffHtml(diffResult);\n//   //   setIsSaveButtonEnabled(true);\n//   // };\n\n\n\n\n//   const handleResimplify = async () => {\n//     if (!inputText.trim()) return;\n  \n//     setIsLoading(true); // Show loading state\n  \n//     try {\n\n//       const chunks = splitTextIntoChunks(inputText, 10000);\n//       let combinedOutput = \"\";\n    \n//       for (let chunk of chunks) {\n//       const prompt = generatePrompt(chunk);\n//       const response = await fetch(\"http://localhost:5001/api/gpt4\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({ prompt }),\n//       });\n      \n  \n//       if (!response.ok) {\n//         console.error(\"Error with API request:\", response.status);\n//         return;\n//       }\n  \n//       const data = await response.json();\n//       console.log(\"Full API Response: \", data);\n//       const newOutput = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n  \n//       // Update System-generated Text\n//       combinedOutput += newOutput + \" \";\n//       console.log(\"Final Combined Output: \", combinedOutput);\n    \n//       }\n//       setOutputText(combinedOutput);\n//     } catch (error) {\n//       console.error(\"Error fetching GPT-4o response:\", error);\n//       setOutputText(\"An error occurred while simplifying the text.\");\n//     }\n  \n//     setIsLoading(false);\n//   };\n\n\n  \n//   //\n//   const saveEditToHistory = async (editedText) => {\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       if (!user) return;\n\n//       const numWords = editedText.trim().split(/\\s+/).filter(Boolean).length;\n//       const numChars = editedText.length;\n\n//       const response = await fetch(\"http://localhost:5001/api/simplifications/edit\", {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           email: user.email,\n//           inputText,\n//           editedText,\n//           numWords,\n//           numChars\n//         }),\n//       });\n\n//       if (response.ok) {\n//         console.log(\"Edit saved to history.\");\n//       } else {\n//         const error = await response.json();\n//         console.error(\"Error saving edit to history:\", error.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving edit to history:\", error);\n//     }\n//   };\n\n//   const saveFinalOutput = async () => {\n\n//     // const finalText = contentEditableRef.current?.innerText || \"\";\n//     // console.log(\"Final text to submit:\", finalText);\n//     // setOutputText(finalText);\n\n\n//     setIsLoading(true);\n\n//     try {\n//       const user = JSON.parse(localStorage.getItem(\"user\"));\n//       if (!user) return;\n\n//       const numWords = outputText.trim().split(/\\s+/).filter(Boolean).length;\n//       const numChars = outputText.length;\n//       const finalText = document.getElementById(\"outputText\")?.value || outputText;\n\n//       const response = await fetch(\"http://localhost:5001/api/simplifications/save\", {\n//         method: \"PUT\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           email: user.email,\n//           inputText,\n//           finalText: outputText,\n//           numWords,\n//           numChars,\n//           readability: 4, // Example value, replace with user input\n//           accuracy: 5, // Example value, replace with user input\n//           comments: \"Looks good.\" // Example value, replace with user input\n//         }),\n//       });\n\n//     const timestamp = new Date().toISOString();\n//     setEditHistory((prev) => [\n//       ...prev,\n//       { timestamp, text: finalText},\n//     ]);\n\n//       if (response.ok) {\n//         console.log(\"Final output saved successfully.\");\n//         setIsSaveButtonEnabled(false); // Disable save button\n//         setShowSurveyPrompt(true);    // Ensure survey prompt is displayed\n\n//         // ✅ Automatically scroll to survey prompt\n//         setTimeout(() => {\n//             if (surveyRef.current) {\n//                 surveyRef.current.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n//             }\n//         }, 300);\n\n//         const timestamp = new Date().toISOString();\n//         setSaveHistory((prev) => [...prev, { timestamp, finalText: finalText}]); // 🔹 Save to history\n  \n//       } else {\n//         const error = await response.json();\n//         console.error(\"Error saving final output:\", error.message);\n//       }\n//     } catch (error) {\n//       console.error(\"Error saving final output:\", error);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const handleEditChange = (event) => {\n//     const updatedText = event.target.value;\n//     setOutputText(updatedText);\n//     setIsSaveButtonEnabled(true); // Enable save button on edit\n\n//     // const timestamp = new Date().toISOString();\n//     // setEditHistory((prev) => [\n//     //   ...prev,\n//     //   { timestamp, text: updatedText },\n//     // ]);\n\n//     // Save the change to edit history in MongoDB\n//     saveEditToHistory(updatedText);\n//   };\n\n//   const handleCopy = (text) => {\n//     navigator.clipboard.writeText(text).then(\n//       () => {\n//         alert(\"Copied to clipboard!\");\n//       },\n//       (err) => {\n//         console.error(\"Failed to copy text:\", err);\n//       }\n//     );\n//   };\n\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     saveAs(blob, `${filename}.${format}`);\n//   };\n\n//   useEffect(() => {\n//     if (!email) return;\n\n//     const fetchDocuments = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5001/api/simplifications/user/${email}`);\n//         const result = await response.json();\n\n//         if (response.ok) {\n\n//           const sortedDocs = result.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n//           setDocuments(sortedDocs);\n//           if (!state && sortedDocs.length > 0) {\n//             setSelectedDocument(sortedDocs[0]);\n//             setSelectedVersion(sortedDocs[0].outputText);\n//             setOutputText(sortedDocs[0].outputText);\n//           }\n//         } else {\n//           console.error(\"Error fetching documents:\", result.message);\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching documents:\", error);\n//       }\n//     };\n\n//     fetchDocuments();\n//   }, [email]);\n\n//   const toggleExpandDoc = (docId) => {\n//     setExpandedDocs((prev) => ({\n//       ...prev,\n//       [docId]: !prev[docId],\n//     }));\n//   };\n\n//   const handleDocumentClick = (doc) => {\n//     setSelectedDocument(doc);\n//     setSelectedVersion(doc.outputText);\n//     setOutputText(doc.outputText);\n//     setSelectedVersionIndex(0);\n//   };\n\n\n//   const handleVersionChange = (docId, versionIndex) => {\n//     const doc = documents.find((d) => d._id === docId);\n//     if (!doc) return;\n\n//     const selectedText =\n//       versionIndex === \"0\"\n//         ? doc.outputText\n//         : doc.saveHistory[versionIndex - 1].finalText;\n\n//     setSelectedVersion(selectedText);\n//     setOutputText(selectedText);\n//     setSelectedDocument(doc);\n//     setSelectedVersionIndex(versionIndex);\n//   };\n\n    \n//   useEffect(() => {\n//     const reviewPageState = {\n//       inputText,\n//       outputText,\n//       editHistory,\n//     };\n//     localStorage.setItem(\"reviewPageState\", JSON.stringify(reviewPageState));\n//   }, [outputText, editHistory, inputText]);\n  \n//   useEffect(() => {\n//     const savedState = JSON.parse(localStorage.getItem(\"reviewPageState\"));\n//     if (savedState) {\n//       setOutputText(savedState.outputText || \"\");\n//       setEditHistory(savedState.editHistory || []);\n//     } else {\n//       setOutputText(initialOutputText);\n//       setEditHistory(restoredEditHistory || []);\n//     }\n  \n//     if (!localStorage.getItem(\"initialAIOutput\")) {\n//       localStorage.setItem(\"initialAIOutput\", initialOutputText);\n//     }\n\n//    saveSimplification(); // Save the initial inputText and outputText\n//     setIsSaveButtonEnabled(true);\n//   }, [initialOutputText, restoredEditHistory]);\n  \n\n\n  \n//   // useEffect(() => {\n//   //   // Save initial input and output text in MongoDB\n//   //   saveSimplification();\n//   // }, []);\n//   useEffect(() => {\n//     const diffResult = generateDiff(inputText, outputText);\n//     setDiffHtml(diffResult);\n//    // saveSimplification();\n//   }, [inputText, outputText]);\n\n//   useEffect(() => {\n//     saveSimplification(); \n//     setIsSaveButtonEnabled(true);\n\n//     const savedState = JSON.parse(localStorage.getItem(\"reviewPageState\"));\n//     if (savedState) {\n//       setOutputText(savedState.outputText || \"\");\n//       setEditHistory(savedState.editHistory || []);\n//     }\n//   }, []);\n  \n//   useEffect(() => {\n//     const { words: inputWords, chars: inputChars } = countWordsAndChars(inputText);\n//     const { words: outputWords, chars: outputChars } = countWordsAndChars(outputText);\n  \n//     setInputWordCount(inputWords);\n//     setInputCharCount(inputChars);\n//     setOutputWordCount(outputWords);\n//     setOutputCharCount(outputChars);\n//   }, [inputText, outputText]);\n\n  \n//   const handleHistoryClick = (edit) => {\n//     setOutputText(edit.text);\n//     const diffResult = generateDiff(inputText, edit.text);\n//     setDiffHtml(diffResult);\n//     setIsEditable(false);\n//   };\n\n\n//   return (\n//     <>\n//       <nav className={styles.navbar}>\n//         {/* <h1>Text Simplification Tool</h1> */}\n//         <h1 \n//     onClick={() => window.location.href = \"http://localhost:5001/\"}\n//     style={{ cursor: \"pointer\" }} // Makes it look clickable\n//  \t\t>\n// \t\tText Simplification Tool</h1>\n//         <button className={styles.white_btn} onClick={handleLogout}>\n//           Logout\n//         </button>\n//       </nav>\n\n//       <div className={styles.container}>\n//         {/* Sidebar */}\n//         <div\n//           className={`${styles.sidebar} ${\n//             isSidebarVisible ? styles.expanded : \"\"\n//           }`}\n//         >\n//           <button\n//             className={styles.historyIcon}\n//             onClick={() => setIsSidebarVisible(!isSidebarVisible)}\n//           >\n//              🕒   <p style={{ fontSize: \"15px\" }}> History </p> \n//           </button>\n\n//         {isSidebarVisible && (\n//             <div className={styles.historyContent}>\n//               <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>✖</button>\n//               <ul className={styles.historyList}>\n//                 {documents.map((doc, index) => (\n//                   <li key={doc._id} className={styles.historyItem}>\n//                     {/* <div onClick={() => toggleExpandDoc(doc._id)} className={styles.docHeader}> */}\n//                     <div\n//                       // onClick={() => toggleExpandDoc(doc._id)}\n//                       onClick={() => {\n//                         toggleExpandDoc(doc._id);\n//                         handleDocumentClick(doc);\n//                       }}\n//                       className={`${styles.docHeader} ${selectedDocument?._id === doc._id ? styles.activeDoc : \"\"}`}\n//                     >\n\n//                       {/* <strong>Document {index + 1}</strong>  */}\n//                       <strong>Document {documents.length - index}</strong> ({doc.inputText.substring(0, 20)}..., {new Date(doc.createdAt).toLocaleDateString()})\n//                     </div>\n\n//                     {expandedDocs[doc._id] && (\n//                       <ul className={styles.versionList}>\n//                         <li key=\"0\" onClick={() => handleVersionChange(doc._id, 0)} className={selectedVersionIndex === 0 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"}>\n//                           Version 1 (Generated Text)\n//                         </li>\n//                         {doc.saveHistory.map((version, vIndex) => (\n//                           <li\n//                             key={vIndex + 1}\n//                             onClick={() => handleVersionChange(doc._id, vIndex + 1)}\n//                             className={selectedVersionIndex === vIndex + 1 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"}\n//                           >\n//                             Version {vIndex + 2} (Saved on {new Date(version.timestamp).toLocaleDateString()})\n//                           </li>\n//                         ))}\n//                       </ul>\n//                     )}\n//                   </li>\n//                 ))}\n//               </ul>\n//             </div>\n//           )}\n//         {/* <div className={styles.versionSelector}>\n//           <label>Select Version:</label>\n//           <select onChange={handleVersionChange} value={documents.indexOf(selectedDocument)}>\n//             <option value=\"0\">Version 1 (Generated Text)</option>\n//             {selectedDocument?.saveHistory.map((version, index) => (\n//               <option key={index + 1} value={index + 1}>\n//                 Version {index + 2} (Saved on {new Date(version.timestamp).toLocaleDateString()})\n//               </option>\n//             ))}\n//           </select>\n//         </div> */}\n\n//         </div>\n\n//         {/* Main Content */}\n//         <div\n//           className={`${styles.mainContent} ${\n//             isSidebarVisible ? styles.withSidebar : \"\"\n//           }`}\n//         >\n// \t\t\t<div className={styles.description}>\n// \t\t\t<p>\n\t\n//         Please review the simplified text carefully and if needed, correct/edit it to suit your requirements. Once you are satisfied with your revisions, save the final version and complete the short survey to provide your feedback.\n//       </p>\n// \t\t\t</div>\n\n// \t\t\t<div className={styles.textareas_container}>\n\n//   {/* Input Text */}\n//   <div className={styles.text_container}>\n//     <div className={styles.labelWrapper}>\n//       <label className={styles.label} htmlFor=\"inputText\">\n//         Input Text\n//       </label>\n//       <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(inputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n        \n//         📋 {/* Clipboard Emoji */}\n//         </div>\n\n//         <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(inputText, \"InputText\", \"txt\")}\n//         title=\"Download as .txt file\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n\n//             {/* New Re-simplify Button */}\n//       <div\n//         className={styles.copyIcon}\n//         onClick={handleResimplify}\n//         title=\"Re-simplify Text\"\n//         style={{ cursor: \"pointer\" }}\n//       >\n//         🔄 \n//       </div>\n\n//       </div>\n//     </div>\n//     <p className={styles.countText}>Words: {inputWordCount} | Characters: {inputCharCount}</p>\n//     {/* <textarea id=\"inputText\" className={styles.textarea} value={selectedDocument?.inputText || \"\"} readOnly></textarea> */}\n\n//     <textarea\n//       id=\"inputText\"\n//       className={`${styles.textarea} ${styles.side_by_side}`}\n//       value={selectedDocument?.inputText || \"\"}\n//       readOnly\n//     ></textarea>\n//   </div>\n\n// \t\t\t{/* Output Text Box */}\n// <div className={styles.text_container}>\n//   <div className={styles.labelWrapper}>\n//     <label className={styles.label} htmlFor=\"outputText\">\n//       AI-generated Text\n//     </label>\n//     <div className={styles.actions}>\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleCopy(outputText)}\n//         title=\"Copy to Clipboard\"\n//       >\n//         📋 {/* Clipboard Emoji */}\n//       </div>\n\n//       <div\n//         className={styles.copyIcon}\n//         onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//         title=\"Download as .txt file\"\n//       >\n//         📥 {/* Download Icon */}\n//       </div>\n//       <button\n//         className={styles.toggleDiffBtn}\n//         onClick={() => setShowDifference(!showDifference)}\n//       >\n//         {showDifference ? \"Hide Difference with input text\" : \"Show Difference with input text\"}\n//       </button>\n//     </div>\n//   </div>\n//     {/* Word and Character Count */}\n//     <p className={styles.countText}>Words: {outputWordCount} | Characters: {outputCharCount}</p>\n\n//   <textarea\n//     id=\"outputText\"\n//     className={`${styles.output_box} ${styles.side_by_side}`}\n//     value={outputText}\n//     onChange={handleEditChange}\n//     readOnly={isEditable}\n//     placeholder=\"Output\"\n\n//   ></textarea>\n\n//   {/* <div\n//     ref={contentEditableRef}\n//     contentEditable={!isEditable}\n//     className={`${styles.output_box} ${styles.side_by_side} ${styles.editableDiv}`}\n//     onInput={(e) => handleLiveEdit(e)}\n//     dangerouslySetInnerHTML={{ __html: diffHtml }}\n//   ></div> */}\n\n// </div>\n\n//             {/* Difference Text */}\n// \t\t\t{showDifference && (\n// \t\t\t\t<div className={styles.text_container}>\n//           <div className={styles.labelWrapper}>\n//             <label className={styles.label} htmlFor=\"outputText\">\n//               Difference from input text\n//             </label>\n//           </div>   \n         \n// \t\t\t\t\t<div\n//             id=\"diffText\"\n//             className={`${styles.output_box} ${styles.side_by_side}`}\n//             dangerouslySetInnerHTML={{ __html: diffHtml }}\n// \t\t\t\t\t>\n//           </div>\n// \t\t\t\t {/* )} */}\n// \t\t\t\t</div>\n// \t\t\t)}\n\t\t\t\n// \t\t\t</div>\n\n\n\n//           {/* Buttons */}\n// \t\t\t<div className={styles.button_container}>\n\n    \n//     \t\t\t\t{/* <button\n//     \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n//               onClick={saveFinalOutput}\n//               disabled={!isSaveButtonEnabled || isLoading}\n//               title={!isSaveButtonEnabled ? \"Please make an edit before submitting.\" : \"\"}\n\n//     \t\t\t\t>\n//     \t\t\t\t\tSubmit\n//     \t\t\t\t</button> */}\n\n//             <button\n//             className={styles.submit_btn}\n//             onClick={saveFinalOutput}\n//             disabled={!isSaveButtonEnabled || isLoading}\n//             title={!isSaveButtonEnabled ? \"Please make an edit before saving again.\" : \"\"}\n//             >\n//             Save\n//             </button>\n//       </div>\n\n//   {/* Survey Prompt (Appears Only After Submitting) */}\n//   {showSurveyPrompt && (\n//     <div className={styles.survey_prompt} ref={surveyRef}>\n//       <p className={styles.survey_text}>\n//         Please take the survey to help us improve.\n//         <button\n//           className={styles.survey_btn}\n//           onClick={() => {\n//             const currentOutput = document.getElementById(\"outputText\")?.value;\n//             const initialAIOutput = localStorage.getItem(\"initialAIOutput\") || initialOutputText;\n//             const reviewPageState = { inputText, outputText: currentOutput, editHistory, saveHistory };\n//             localStorage.setItem(\"reviewPageState\", JSON.stringify(reviewPageState));\n\n//             navigate(\"/survey\", {\n//               state: {\n//                 email: JSON.parse(localStorage.getItem(\"user\")).email,\n//                 inputText,\n//                 outputText: initialAIOutput,\n//                 editHistory,\n//                 saveHistory: [...saveHistory, { timestamp: new Date().toISOString(), finalText: currentOutput }],\n//               },\n//             });\n//           }}\n//         >\n//           📑 Take the Survey\n//         </button>\n//       </p>\n//     </div>\n//   )}\n\n// <p className={styles.help_text}>Need Help? <a href=\"mailto:anukumar@uw.edu\">Contact Support</a></p>\n\n\n\n\n//         </div>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Review;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport DiffMatchPatch from \"diff-match-patch\";\nimport { saveAs } from \"file-saver\";\nimport styles from \"./styles.module.css\";\n\n// -----------------------------------------------------------------------------\n// REVIEW PAGE – keeps input/output/version history perfectly in‑sync\n// -----------------------------------------------------------------------------\n\nconst Review = () => {\n  /* -------------------------------------------------------------------------\n   * 1.  INITIAL NAVIGATION STATE\n   * ---------------------------------------------------------------------- */\n  const { state } = useLocation();\n  const {\n    inputText: navInputText = \"\",\n    outputText: navOutputText = \"\",\n    editHistory: restoredEditHistory = [],\n  } = state || {};\n\n  /* Local editable copies – we never mutate nav* directly */\n  const [inputText, setInputText] = useState(navInputText);\n  const [outputText, setOutputText] = useState(navOutputText);\n  const initialOutputText = navOutputText; // still needed for survey redirect\n  const [editHistory, setEditHistory] = useState(restoredEditHistory);\n  const [saveHistory, setSaveHistory] = useState([]);\n\n  /* UI‑state */\n  const [diffHtml, setDiffHtml] = useState(\"\");\n  const [isSaveButtonEnabled, setIsSaveButtonEnabled] = useState(false);\n  const [isEditable, setIsEditable] = useState(false);\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n  const [showDifference, setShowDifference] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showSurveyPrompt, setShowSurveyPrompt] = useState(false);\n\n  /* Word / char counters */\n  const [inputWordCount, setInputWordCount] = useState(0);\n  const [inputCharCount, setInputCharCount] = useState(0);\n  const [outputWordCount, setOutputWordCount] = useState(0);\n  const [outputCharCount, setOutputCharCount] = useState(0);\n\n  /*  Sidebar – docs & versions  */\n  const [documents, setDocuments] = useState([]);\n  // const [selectedDocument, setSelectedDocument] = useState(null);\n  const [selectedDocId,       setSelectedDocId] = useState(null);\n  const [selectedVersionIdx,  setSelectedVersionIdx]  = useState(0); \n  // const [selectedVersionIndex, setSelectedVersionIndex] = useState(0);\n  const [expandedDocs, setExpandedDocs] = useState({});\n\n  /* Misc */\n  const navigate = useNavigate();\n  const surveyRef = useRef(null);\n  const email = JSON.parse(localStorage.getItem(\"user\"))?.email;\n\n  /* -------------------------------------------------------------------------\n   * 2.  HELPERS\n   * ---------------------------------------------------------------------- */\n  const countWordsAndChars = (txt) => ({\n    words: txt.trim().split(/\\s+/).filter(Boolean).length,\n    chars: txt.length,\n  });\n\n  /** pretty diff → HTML */\n  const generateDiff = (a, b) => {\n    const dmp = new DiffMatchPatch();\n    const diffs = dmp.diff_main(a, b);\n    dmp.diff_cleanupSemantic(diffs);\n    return diffs\n      .map(([op, txt]) => {\n        if (op === DiffMatchPatch.DIFF_INSERT)\n          return `<span style=\"background:#d4fcdc;color:green;\">${txt}</span>`;\n        if (op === DiffMatchPatch.DIFF_DELETE)\n          return `<span style=\"background:#ffecec;color:red;text-decoration:line-through;\">${txt}</span>`;\n        return txt;\n      })\n      .join(\"\");\n  };\n\n  /** chunker for long prompts */\n  const splitTextIntoChunks = (txt, maxTokens) => {\n    const words = txt.split(\" \");\n    const chunks = [];\n    let chunk = [];\n    words.forEach((w) => {\n      if (chunk.join(\" \").length + w.length < maxTokens) chunk.push(w);\n      else {\n        chunks.push(chunk.join(\" \"));\n        chunk = [w];\n      }\n    });\n    if (chunk.length) chunks.push(chunk.join(\" \"));\n    return chunks;\n  };\n\n  const generatePrompt = (inputText) => {\n    return `\n    You are an expert in accessible communication, tasked with transforming complex text into clear, accessible plain language for individuals with Intellectual and Developmental Disabilities (IDD) or those requiring simplified content. Retain all essential information and intent while prioritizing readability, comprehension, and inclusivity.\n\n    Text simplification refers to rewriting or adapting text to make it easier to read and understand while keeping the same level of detail and precision. Make sure you focus on simplification and not summarization. The length of generated output text must be similar to that of input text.\n\n    Guidelines for Simplification:\n    Vocabulary and Terminology:\n    Replace uncommon, technical, or abstract words with simple, everyday language.\n    Define unavoidable complex terms in plain language within parentheses upon first use (example: “cardiologist (heart doctor)”).\n    Avoid idioms, metaphors, sarcasm, or culturally specific references.\n\n    Sentence Structure:\n    Use short sentences (10--15 words max). Break long sentences into 1–2 ideas each.\n    Prefer active voice (example: “The doctor examined the patient” vs. “The patient was examined by the doctor”).\n    Avoid nested clauses, passive voice, and ambiguous pronouns (example: “they,” “it”).\n\n    Clarity and Flow:\n    Organize content logically, using headings/subheadings to group related ideas.\n    Use bullet points or numbered lists for steps, options, or key points.\n    Ensure each paragraph focuses on one main idea.\n\n    Tone and Engagement:\n    Write in a neutral, conversational tone (avoid formal or academic language).\n    Address the reader directly with “you” or “we” where appropriate.\n    Use consistent terms for concepts (avoid synonyms that may confuse).\n\n    Avoid Exclusionary Elements:\n    Remove jargon, acronyms (unless defined), and expand abbreviations if needed (example: “ASAP” → “as soon as possible”).\n    Eliminate metaphors, idioms, or implied meanings (example: “hit the books” → “study”).\n    Avoid double negatives (example: “not uncommon” → “common”).\n\n    Structural Support:\n    Add clear headings to label sections (example: “How to Apply for Benefits”).\n    Use formatting tools like bold for key terms or warnings.\n    Chunk information into short paragraphs with line breaks for visual ease.\n\n    Inclusivity Checks:\n    Ensure content is free of bias, stereotypes, or assumptions about the reader.\n    Use gender-neutral language (example: “they” instead of “he/she”).\n\n\n    Output Requirements:\n    Return only the simplified text, without markdown, emojis, or images.\n    Preserve original context, facts, and intent. Do not omit critical details.\n    Prioritize clarity over brevity; focus on simplification and not summarization. The length of generated output text should be same or similar to that of input text.\n    Do not simplify already simple text.\n\n    Example Transformation:\n    Original: “Individuals experiencing adverse climatic conditions may necessitate relocation to mitigate health risks.”\n    Simplified: “If weather conditions become dangerous, people might need to move to stay safe.”\n\n    For the provided input text, apply the above guidelines rigorously. Ensure the output is accessible to readers with varied cognitive abilities, emphasizing clarity, simplicity, and logical structure. Verify that the simplified text aligns with plain language standards like WCAG and PlainLanguage.gov.\n\n    \"${inputText}\"\n    `;\n    };\n\n  /* -------------------------------------------------------------------------\n   * 3.  NETWORK HELPERS (save / resimplify)\n   * ---------------------------------------------------------------------- */\n  const saveSimplification = async () => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (!user) return;\n    const { words: wIn, chars: cIn } = countWordsAndChars(inputText);\n    const { words: wOut, chars: cOut } = countWordsAndChars(outputText);\n    await fetch(\"http://localhost:5001/api/simplifications\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        userId: user._id,\n        inputText,\n        outputText,\n        metrics: { numWordsInput: wIn, numCharsInput: cIn, numWordsOutput: wOut, numCharsOutput: cOut },\n      }),\n    }).catch((err) => console.error(err));\n  };\n\n  const saveEditToHistory = async (txt) => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (!user) return;\n    const { words, chars } = countWordsAndChars(txt);\n    await fetch(\"http://localhost:5001/api/simplifications/edit\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email: user.email, inputText, editedText: txt, numWords: words, numChars: chars }),\n    });\n  };\n\n  /* -------------------------------------------------------------------------\n   * 4.  EFFECTS – fetch docs, sync diff, counters, localStorage state\n   * ---------------------------------------------------------------------- */\n  useEffect(() => {\n    if (!email) return;\n    (async () => {\n      try {\n        const res = await fetch(`http://localhost:5001/api/simplifications/user/${email}`);\n        const result = await res.json();\n        if (res.ok) {\n          const sorted = result.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n          setDocuments(sorted);\n          if (!state && sorted.length) {\n            setSelectedDocument(sorted[0]);\n            setInputText(sorted[0].inputText);\n            setOutputText(sorted[0].outputText);\n          }\n        }\n      } catch (e) {\n        console.error(\"fetch docs\", e);\n      }\n    })();\n  }, [email, state]);\n\n  // diff when either side changes\n  useEffect(() => setDiffHtml(generateDiff(inputText, outputText)), [inputText, outputText]);\n\n  // word/char counters\n  useEffect(() => {\n    const { words: wIn, chars: cIn } = countWordsAndChars(inputText);\n    const { words: wOut, chars: cOut } = countWordsAndChars(outputText);\n    setInputWordCount(wIn);\n    setInputCharCount(cIn);\n    setOutputWordCount(wOut);\n    setOutputCharCount(cOut);\n  }, [inputText, outputText]);\n\n  // persist review page snapshot (so back/refresh is safe)\n  useEffect(() => {\n    localStorage.setItem(\"reviewPageState\", JSON.stringify({ inputText, outputText, editHistory }));\n  }, [inputText, outputText, editHistory]);\n\n  /* -------------------------------------------------------------------------\n   * 5.  HANDLERS – sidebar, editing, resimplify, save, etc.\n   * ---------------------------------------------------------------------- */\n  // const handleDocumentClick = (doc) => {\n  //   setSelectedDocument(doc);\n  //   setInputText(doc.inputText);\n  //   setOutputText(doc.outputText);\n  //   setSelectedVersionIndex(0);\n  // };\n\n  const handleDocumentClick = (doc) => {\n     setSelectedDocId(doc._id);\n      setSelectedVersionIdx(0);        // generated text\n      setInputText(doc.inputText);\n      setOutputText(doc.outputText);\n     };\n//  const handleVersionChange = (docId, idx) => {\n//     const doc = documents.find((d) => d._id === docId);\n//     if (!doc) return;\n//     const txt = idx === 0 ? doc.outputText : (doc.saveHistory ?? [])[idx - 1]?.finalText ?? doc.outputText;\n//     setSelectedDocId(docId);\n//     setSelectedVersionIdx(idx);\n//     setInputText(doc.inputText);\n//     setOutputText(txt);\n//   };\n\n\n  const handleVersionChange = (docId, idx) => {\n    const doc = documents.find((d) => d._id === docId);\n    if (!doc) return;\n    const txt = idx === 0 ? doc.outputText : (doc.saveHistory ?? [])[idx - 1]?.finalText ?? doc.outputText;\n    setSelectedDocId(docId);\n    setSelectedVersionIdx(idx);\n    setInputText(doc.inputText);\n    setOutputText(txt);\n  };\n\n  const handleEditChange = (e) => {\n    const txt = e.target.value;\n    setOutputText(txt);\n    setIsSaveButtonEnabled(true);\n    saveEditToHistory(txt);\n  };\n\n  const handleResimplify = async () => {\n    if (!inputText.trim()) return;\n    setIsLoading(true);\n    try {\n      const chunks = splitTextIntoChunks(inputText, 10000);\n      let combo = \"\";\n      for (const ch of chunks) {\n        const res = await fetch(\"http://localhost:5001/api/gpt4\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ prompt: generatePrompt(ch) }),\n        });\n        if (!res.ok) continue;\n        const data = await res.json();\n        combo += (data?.response || \"\").replace(/^\"|\"$/g, \"\") + \" \";\n      }\n      setOutputText(combo.trim());\n    } catch (e) {\n      console.error(e);\n    }\n    setIsLoading(false);\n  };\n\n  const saveFinalOutput = async () => {\n    setIsLoading(true);\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      if (!user) return;\n      const { words, chars } = countWordsAndChars(outputText);\n      const res = await fetch(\"http://localhost:5001/api/simplifications/save\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: user.email,\n          inputText,\n          finalText: outputText,\n          numWords: words,\n          numChars: chars,\n          readability: 4,\n          accuracy: 5,\n          comments: \"Looks good.\",\n        }),\n      });\n      if (res.ok) {\n        setIsSaveButtonEnabled(false);\n        setShowSurveyPrompt(true);\n        setSaveHistory((p) => [...p, { timestamp: new Date().toISOString(), finalText: outputText }]);\n        setTimeout(() => surveyRef.current?.scrollIntoView({ behavior: \"smooth\" }), 300);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    setIsLoading(false);\n  };\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"reviewPageState\");\n    navigate(\"/Login\");\n  };\n\n  const handleCopy = (txt) => navigator.clipboard.writeText(txt);\n  const handleDownload = (txt, name) => saveAs(new Blob([txt], { type: \"text/plain;charset=utf-8\" }), `${name}.txt`);\n\n  /* -------------------------------------------------------------------------\n   * 6.  RENDER\n   * ---------------------------------------------------------------------- */\n  return (\n    <>\n      <nav className={styles.navbar}>\n        <h1 onClick={() => (window.location.href = \"http://localhost:5001/\")} style={{ cursor: \"pointer\" }}>\n          Text Simplification Tool\n        </h1>\n        <button className={styles.white_btn} onClick={handleLogout}>\n          Logout\n        </button>\n      </nav>\n\n      <div className={styles.container}>\n        {/* ---------------- SIDEBAR ---------------- */}\n        <div className={`${styles.sidebar} ${isSidebarVisible ? styles.expanded : \"\"}`}>\n          <button className={styles.historyIcon} onClick={() => setIsSidebarVisible((s) => !s)}>\n            🕒 <p style={{ fontSize: 15 }}> History </p>\n          </button>\n\n          {isSidebarVisible && (\n            <div className={styles.historyContent}>\n              <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>\n                ✖\n              </button>\n              <ul className={styles.historyList}>\n                {documents.map((doc, idx) => (\n                  <li key={doc._id} className={styles.historyItem}>\n                    <div\n                      onClick={() => {\n                        setExpandedDocs((p) => ({ ...p, [doc._id]: !p[doc._id] }));\n                        handleDocumentClick(doc);\n                      }}\n                      className={`${styles.docHeader} ${selectedDocId === doc._id ? styles.activeDoc : \"\"}`}\n                      // className={`${styles.docHeader} ${selectedDocument?._id === doc._id ? styles.activeDoc : \"\"}`}\n                    \n                    >\n                      <strong>Document {documents.length - idx}</strong> ({doc.inputText.slice(0, 20)}...)\n                    </div>\n                    {expandedDocs[doc._id] && (\n                      <ul className={styles.versionList}>\n                        <li\n                          key=\"0\"\n                          onClick={() => handleVersionChange(doc._id, 0)}\n                          // className={selectedVersionIndex === 0 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"}\n                          \n                          className={selectedDocId === doc._id && selectedVersionIdx === 0 ? styles.activeVersion : \"\"}\n\n                        >\n                          Version 1 (Generated)\n                        </li>\n                        {/* {doc.saveHistory.map((v, vIdx) => ( */}\n                          {(doc.saveHistory ?? []).map((v, vIdx) => (\n                          <li\n                            key={vIdx + 1}\n                            onClick={() => handleVersionChange(doc._id, vIdx + 1)}\n                            // className={\n                            //   selectedVersionIndex === vIdx + 1 && selectedDocument?._id === doc._id ? styles.activeVersion : \"\"\n                            \n                            // }\n                            className={selectedDocId === doc._id && selectedVersionIdx === vIdx + 1 ? styles.activeVersion : \"\"}\n                          >\n                            Version {vIdx + 2} ({new Date(v.timestamp).toLocaleDateString()})\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {/* ---------------- MAIN ---------------- */}\n        <div className={`${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`}>\n          <div className={styles.description}>\n            <p>\n              Please review the simplified text, edit if necessary, then save and complete the short survey to help us improve.\n            </p>\n          </div>\n\n          <div className={styles.textareas_container}>\n            {/* Input */}\n            <div className={styles.text_container}>\n              <div className={styles.labelWrapper}>\n                <label className={styles.label}>Input Text</label>\n                <div className={styles.actions}>\n                  <div className={styles.copyIcon} title=\"Copy\" onClick={() => handleCopy(inputText)}>📋</div>\n                  <div className={styles.copyIcon} title=\"Download\" onClick={() => handleDownload(inputText, \"InputText\")}>📥</div>\n                  <div className={styles.copyIcon} title=\"Re‑simplify\" onClick={handleResimplify}>🔄</div>\n                </div>\n              </div>\n              <p className={styles.countText}>\n                Words: {inputWordCount} | Characters: {inputCharCount}\n              </p>\n              <textarea className={`${styles.textarea} ${styles.side_by_side}`} value={inputText} readOnly />\n            </div>\n\n            {/* Output */}\n            <div className={styles.text_container}>\n              <div className={styles.labelWrapper}>\n                <label className={styles.label}>AI‑generated Text</label>\n                <div className={styles.actions}>\n                  <div className={styles.copyIcon} title=\"Copy\" onClick={() => handleCopy(outputText)}>📋</div>\n                  <div className={styles.copyIcon} title=\"Download\" onClick={() => handleDownload(outputText, \"GeneratedText\")}>📥</div>\n                  <button className={styles.toggleDiffBtn} onClick={() => setShowDifference((s) => !s)}>\n                    {showDifference ? \"Hide Difference\" : \"Show Difference\"}\n                  </button>\n                </div>\n              </div>\n              <p className={styles.countText}>\n                Words: {outputWordCount} | Characters: {outputCharCount}\n              </p>\n              <textarea\n                id=\"outputText\"\n                className={`${styles.output_box} ${styles.side_by_side}`}\n                value={outputText}\n                onChange={handleEditChange}\n                readOnly={isEditable}\n              />\n            </div>\n\n            {/* Diff */}\n            {showDifference && (\n              <div className={styles.text_container}>\n                <label className={styles.label}>Difference from input</label>\n                <div className={`${styles.output_box} ${styles.side_by_side}`} dangerouslySetInnerHTML={{ __html: diffHtml }} />\n              </div>\n            )}\n          </div>\n\n          {/* Save Button */}\n          <div className={styles.button_container}>\n            <button\n              className={styles.submit_btn}\n              onClick={saveFinalOutput}\n              disabled={!isSaveButtonEnabled || isLoading}\n              title={!isSaveButtonEnabled ? \"Make an edit before saving.\" : \"\"}\n            >\n              Save\n            </button>\n          </div>\n\n          {/* Survey Prompt */}\n          {showSurveyPrompt && (\n            <div className={styles.survey_prompt} ref={surveyRef}>\n              <p className={styles.survey_text}>\n                Please take the survey to help us improve.\n                <button\n                  className={styles.survey_btn}\n                  onClick={() => {\n                    navigate(\"/survey\", {\n                      state: {\n                        email,\n                        inputText,\n                        outputText: localStorage.getItem(\"initialAIOutput\") || initialOutputText,\n                        editHistory,\n                        saveHistory: [...saveHistory, { timestamp: new Date().toISOString(), finalText: outputText }],\n                      },\n                    });\n                  }}\n                >\n                  📑 Take the Survey\n                </button>\n              </p>\n            </div>\n          )}\n\n          <p className={styles.help_text}>\n            Need Help? <a href=\"mailto:anukumar@uw.edu\">Contact Support</a>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Review;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,WAAW,CAAEC,WAAW,KAAQ,kBAAkB,CAC3D,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAC7C,OAASC,MAAM,KAAQ,YAAY,CACnC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CAExC;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEA,KAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}