{"ast":null,"code":"var _jsxFileName = \"/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v2/client/src/components/Review/index.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport styles from \"./styles.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Review = () => {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const {\n    inputText,\n    outputText\n  } = state || {\n    inputText: \"\",\n    outputText: \"\"\n  };\n  //   const navigate = useNavigate();\n\n  // const [inputText, setInputText] = useState(\"\");\n  // const [outputText, setOutputText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n  const [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n  const [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n  const [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n  const navigate = useNavigate();\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n\n  //   const handleSave = () => {\n  //     alert(\"Text saved successfully!\");\n  //     // Add your save logic here if needed\n  //     navigate(\"/simplify\"); // Redirect back to Main\n  //   };\n\n  //   const handleEdit = () => {\n  //     navigate(\"/simplify\", { state: { inputText, outputText } });\n  //   };\n\n  const handleSave = async (isAuto = false) => {\n    //\t\tsetIsSaveButtonVisible(false);\n    if (isAuto && isAuto.nativeEvent) {\n      isAuto = false; // Default behavior if called by an event\n    }\n\n    //console.log(\"isAuto:\", isAuto);\n    //console.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n      if (!user) {\n        alert(\"User not logged in!\");\n        return;\n      }\n      const payload = {\n        userId: user._id,\n        email: user.email,\n        inputText,\n        ...(isEditable ? {\n          editedText: outputText\n        } : {\n          outputText,\n          editableText: outputText\n        })\n      };\n      const endpoint = isEditable ? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n      : \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\n      const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\n      const response = await fetch(endpoint, {\n        method,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        alert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n        //setShowSurveyPrompt(true); \n        console.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n        console.log(\"isEditable\", isEditable);\n        console.log(\"isAuto\", isAuto);\n        if (!isSaveButtonVisible) {\n          //edit, save, edit\n          setShowSurveyPrompt(false); // Show the survey prompt\n        } else if (isSaveButtonVisible && !isEditable && isAuto)\n          //true false -- first time save or edit button clicked\n          {\n            setShowSurveyPrompt(false);\n          } else if (isSaveButtonVisible && isEditable) {\n          setShowSurveyPrompt(true);\n        } else if (isSaveButtonVisible && !isEditable && !isAuto)\n          //true false -- first time save or edit button clicked\n          {\n            setShowSurveyPrompt(true);\n          }\n        if (isEditable) {\n          {\n            setIsEditable(false); // Exit editing mode after saving edits\n            // disable saving button\n            setIsSaveButtonVisible(false); // Hide the save button\n            // Show the survey prompt\n            // setShowSurveyPrompt(true); \n          }\n        }\n      } else {\n        const error = await response.json();\n        alert(error.message || \"Failed to save simplification.\");\n      }\n    } catch (error) {\n      console.error(\"Error saving simplification:\", error);\n      alert(\"An error occurred. Please try again.\");\n    }\n\n    //setShowSurveyPrompt(true);\n    // Page for survey (only save -- 2 boxes, else edit+save -- 3 boxes) -- fetch inputText, outputText and editedText. If outputText is same as editedText, then show only 2 text boxes, else 3 text boxes (all not editable) with 5 questions below.\n    // Navigate to survey page\n\n    //navigate(\"/survey\", { state: { email: user.email, inputText } });\n    //isAuto = false;\n    //navigate(\"/save\"); // Navigate to save page\n  };\n  const handleEdit = () => {\n    let isAuto = true;\n    handleSave(isAuto); // Save the current output text\n    setIsEditable(true); // Enable editing mode\n    setIsSaveButtonVisible(true);\n\n    //navigate(\"/edit\"); // Navigate to edit page\n\n    //setShowSurveyPrompt(false);\n\n    // Add back button\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.navbar,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Text Simplification Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.white_btn,\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.main_container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.form_container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.textareas_container,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.label,\n              htmlFor: \"inputText\",\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"inputText\",\n              className: `${styles.textarea} ${styles.side_by_side}`,\n              value: inputText\n              //onChange={(e) => setInputText(e.target.value)}\n              ,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.label,\n              htmlFor: \"outputText\",\n              children: \"System-generated Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"outputText\",\n              className: `${styles.output_box} ${styles.side_by_side}`,\n              value: outputText\n              //onChange={(e) => setOutputText(e.target.value)}\n              ,\n              readOnly: !isEditable,\n              placeholder: \"Output\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.button_container,\n          children: [isSaveButtonVisible && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.save_btn} ${styles.text_btn}`,\n            onClick: handleSave,\n            disabled: isLoading,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 9\n          }, this), !isEditable && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.edit_btn} ${styles.text_btn}`,\n            onClick: handleEdit,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 9\n        }, this), showSurveyPrompt && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.survey_prompt,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Please take the survey to help us improve \", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              className: styles.link_btn,\n              onClick: () => navigate(\"/survey\", {\n                state: {\n                  email: JSON.parse(localStorage.getItem(\"user\")).email,\n                  inputText\n                }\n              }),\n              children: \"Take the Survey\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true)\n  // <div className={styles.review_container}>\n  //   <h1>Review Simplified Text</h1>\n  //   <div className={styles.textareas_container}>\n  //     <div className={styles.text_container}>\n  //       <label className={styles.label}>Input Text</label>\n  //       <textarea\n  //         className={`${styles.textarea} ${styles.readonly}`}\n  //         value={inputText}\n  //         readOnly\n  //       ></textarea>\n  //     </div>\n\n  //     <div className={styles.text_container}>\n  //       <label className={styles.label}>Simplified Text</label>\n  //       <textarea\n  //         className={`${styles.textarea} ${styles.readonly}`}\n  //         value={outputText}\n  //         readOnly\n  //       ></textarea>\n  //     </div>\n  //   </div>\n\n  //   <div className={styles.button_container}>\n  //     <button className={styles.save_btn} onClick={handleSave}>\n  //       Save\n  //     </button>\n  //     <button className={styles.edit_btn} onClick={handleEdit}>\n  //       Edit\n  //     </button>\n  //   </div>\n  // </div>\n  // </>\n  ;\n};\n_s(Review, \"ayr6C4y71peAALOkEZd3r4eUdj8=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Review;\nexport default Review;\n\n// \t  <>\n\n// \t\t<div className={styles.main_container}>\n// \t\t  {!isSubmitted ? (\n// \t\t\t<div className={styles.description}>\n// \t\t\t  <p>\n// \t\t\t\tThis app is about simplifying text for improved readability and\n// \t\t\t\taccessibility.\n// \t\t\t  </p>\n// \t\t\t  <p>\n// \t\t\t\tUpload a document or paste your text to get a simplified version\n// \t\t\t\twith just a click.\n// \t\t\t  </p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={styles.textarea}\n// \t\t\t\t\t  placeholder=\"Original Text\"\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\n// \t\t\t\t  {/* OR Divider */}\n// \t\t\t\t  <div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t  {/* File Upload */}\n// \t\t\t\t  <div className={styles.upload_area}>\n// \t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t  {uploadedFileName ? (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  ) : (\n// \t\t\t\t\t\t<>\n// \t\t\t\t\t\t  Click to Upload a PDF\n// \t\t\t\t\t\t  <br />\n// \t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t</>\n// \t\t\t\t\t  )}\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<input\n// \t\t\t\t\t  type=\"file\"\n// \t\t\t\t\t  id=\"fileUpload\"\n// \t\t\t\t\t  accept=\"application/pdf\"\n// \t\t\t\t\t  onChange={handleFileUpload}\n// \t\t\t\t\t  className={styles.hidden_input}\n// \t\t\t\t\t/>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n// \t\t\t  {/* Submit Button */}\n// \t\t\t  <button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t  >\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n// \t\t\t  </button>\n// \t\t\t</div>\n// \t\t  ) : (\n// \t\t\t<div className={styles.form_container}>\n// \t\t\t  {/* Input and Output Boxes */}\n// \t\t\t  <div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n// \t\t\t  </div>\n\n// \t\t\t\t{/* Save and Edit Buttons */}\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t{/* <button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button> */}\n\n// \t\t\t\t{isSaveButtonVisible && (\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t)}\n\n// \t\t\t\t{!isEditable && (\n// \t\t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t\t</button>\n// \t\t\t\t)}\n// \t\t\t\t</div>\n//       {/* Survey Prompt */}\n// \t  {showSurveyPrompt && (\n//               <div className={styles.survey_prompt}>\n//                 <p>\n//                   Please take the survey to help us improve.{\" \"}\n//                   <button\n//                     className={styles.link_btn}\n//                     onClick={() =>\n//                       navigate(\"/survey\", {\n//                         state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n//                       })\n//                     }\n//                   >\n//                     Take the Survey\n//                   </button>\n//                 </p>\n//               </div>\n//             )}\n\n// \t\t\t</div>\n// \t\t  )}\n// \t\t</div>\n// \t  </>\n// \t);\n//   };\nvar _c;\n$RefreshReg$(_c, \"Review\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Review","_s","state","inputText","outputText","isLoading","setIsLoading","isSubmitted","setIsSubmitted","isEditable","setIsEditable","uploadedFileName","setUploadedFileName","isSaveButtonVisible","setIsSaveButtonVisible","showSurveyPrompt","setShowSurveyPrompt","navigate","handleLogout","localStorage","removeItem","window","location","reload","handleSave","isAuto","nativeEvent","user","JSON","parse","getItem","alert","payload","userId","_id","email","editedText","editableText","endpoint","method","response","fetch","headers","body","stringify","ok","data","json","console","log","error","message","handleEdit","children","className","navbar","fileName","_jsxFileName","lineNumber","columnNumber","white_btn","onClick","main_container","form_container","textareas_container","text_container","label","htmlFor","id","textarea","side_by_side","value","readOnly","output_box","placeholder","button_container","save_btn","text_btn","disabled","edit_btn","survey_prompt","link_btn","_c","$RefreshReg$"],"sources":["/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v2/client/src/components/Review/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport styles from \"./styles.module.css\";\n\nconst Review = () => {\n  const { state } = useLocation();\n  const { inputText, outputText } = state || { inputText: \"\", outputText: \"\" };\n//   const navigate = useNavigate();\n\n  \t// const [inputText, setInputText] = useState(\"\");\n\t// const [outputText, setOutputText] = useState(\"\");\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n\tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n\tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n    const navigate = useNavigate();\n\n\tconst handleLogout = () => {\n\t  localStorage.removeItem(\"token\");\n\t  window.location.reload();\n\t};\n\n//   const handleSave = () => {\n//     alert(\"Text saved successfully!\");\n//     // Add your save logic here if needed\n//     navigate(\"/simplify\"); // Redirect back to Main\n//   };\n\n//   const handleEdit = () => {\n//     navigate(\"/simplify\", { state: { inputText, outputText } });\n//   };\n\n  \tconst handleSave = async (isAuto = false) => {\n//\t\tsetIsSaveButtonVisible(false);\nif (isAuto && isAuto.nativeEvent) {\n\tisAuto = false; // Default behavior if called by an event\n}\n\n//console.log(\"isAuto:\", isAuto);\n\t\t//console.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n\t\t\n\t\t  \n\t\ttry {\n\t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n\t\t  if (!user) {\n\t\t\talert(\"User not logged in!\");\n\t\t\treturn;\n\t\t  }\n\t  \n\t\t  const payload = {\n\t\t\tuserId: user._id,\n\t\t\temail: user.email,\n\t\t\tinputText,\n\t\t\t...(isEditable ? { editedText: outputText } : { outputText, editableText: outputText }),\n\t\t  };\n\t  \n\t\t  const endpoint = isEditable\n\t\t\t? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for updating\n\t\t\t: \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\t  \n\t\t  const method = isEditable ? \"PUT\" : \"POST\"; // Use PUT for updates, POST for saves\n\t  \n\t\t  const response = await fetch(endpoint, {\n\t\t\tmethod,\n\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\tbody: JSON.stringify(payload),\n\t\t  });\n\t  \n\t\t  if (response.ok) {\n\t\t\tconst data = await response.json();\n\t\t\talert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n\n\t\t\t//setShowSurveyPrompt(true); \n\t\t\tconsole.log(\"isSaveButtonVisible\", isSaveButtonVisible);\n\t\t\tconsole.log(\"isEditable\", isEditable);\n\t\t\tconsole.log(\"isAuto\", isAuto);\n\t\t\tif (!isSaveButtonVisible) {  //edit, save, edit\n\t\t\t\tsetShowSurveyPrompt(false); // Show the survey prompt\n\t\t\t  }\n\t\t\telse if (isSaveButtonVisible && !isEditable && isAuto)  //true false -- first time save or edit button clicked\n\t\t\t{\n\t\t\t\tsetShowSurveyPrompt(false);\n\t\t\t}\n\t\t\telse if (isSaveButtonVisible && isEditable)\n\t\t\t{\n\t\t\t\tsetShowSurveyPrompt(true);\n\t\t\t} \n\t\t\telse if (isSaveButtonVisible && !isEditable && !isAuto)  //true false -- first time save or edit button clicked\n\t\t\t{\n\t\t\t\tsetShowSurveyPrompt(true);\n\t\t\t}\n\n\n\t\t\tif (isEditable) {\n\t\t\t {\n\t\t\t\tsetIsEditable(false); // Exit editing mode after saving edits\n\t\t\t  // disable saving button\n\t\t\t  setIsSaveButtonVisible(false); // Hide the save button\n\t\t\t   // Show the survey prompt\n\t\t\t // setShowSurveyPrompt(true); \n\t\t\t }\n\t\t  }} else {\n\t\t\tconst error = await response.json();\n\t\t\talert(error.message || \"Failed to save simplification.\");\n\t\t  }\n\t\t} catch (error) {\n\t\t  console.error(\"Error saving simplification:\", error);\n\t\t  alert(\"An error occurred. Please try again.\");\n\t\t}\n\n\t\t//setShowSurveyPrompt(true);\n\t\t// Page for survey (only save -- 2 boxes, else edit+save -- 3 boxes) -- fetch inputText, outputText and editedText. If outputText is same as editedText, then show only 2 text boxes, else 3 text boxes (all not editable) with 5 questions below.\n\t\t        // Navigate to survey page\n\t\t\t\t\n\t\t//navigate(\"/survey\", { state: { email: user.email, inputText } });\n\t\t//isAuto = false;\n\t\t//navigate(\"/save\"); // Navigate to save page\n\t  };\n\t  \n\t\n  \n\tconst handleEdit = () => {\n\t  let isAuto = true;\n\t  handleSave(isAuto); // Save the current output text\n\t  setIsEditable(true); // Enable editing mode\n\t  setIsSaveButtonVisible(true);\n\n\t  //navigate(\"/edit\"); // Navigate to edit page\n\n\t  //setShowSurveyPrompt(false);\n\n\t  // Add back button\n\t};\n  \n  return (\n    <>\n    <nav className={styles.navbar}>\n      <h1>Text Simplification Study</h1>\n      <button className={styles.white_btn} onClick={handleLogout}>\n        Logout\n      </button>\n    </nav>\n\n    <div className={styles.main_container}>\n     \t\t\t<div className={styles.form_container}>\n     \t\t\t  {/* Input and Output Boxes */}\n     \t\t\t  <div className={styles.textareas_container}>\n     \t\t\t\t{/* Input Text Box */}\n     \t\t\t\t<div className={styles.text_container}>\n     \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n     \t\t\t\t\tInput Text\n     \t\t\t\t  </label>\n    \t\t\t\t  <textarea\n    \t\t\t\t\tid=\"inputText\"\n    \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n    \t\t\t\t\tvalue={inputText}\n    \t\t\t\t\t//onChange={(e) => setInputText(e.target.value)}\n    \t\t\t\t\treadOnly\n    \t\t\t\t  ></textarea>\n    \t\t\t\t</div>\n      \n    \t\t\t\t{/* Output Text Box */}\n    \t\t\t\t<div className={styles.text_container}>\n    \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n    \t\t\t\t\tSystem-generated Text\n    \t\t\t\t  </label>\n    \t\t\t\t  <textarea\n    \t\t\t\t\tid=\"outputText\"\n    \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n    \t\t\t\t\tvalue={outputText}\n    \t\t\t\t\t//onChange={(e) => setOutputText(e.target.value)}\n    \t\t\t\t\treadOnly={!isEditable}\n    \t\t\t\t\tplaceholder=\"Output\"\n    \t\t\t\t  ></textarea>\n    \t\t\t\t</div>\n    \t\t\t  </div>\n    \n    \n    \t\t\t\t{/* Save and Edit Buttons */}\n    \t\t\t\t<div className={styles.button_container}>\n\n    \n    \t\t\t\t{isSaveButtonVisible && (\n    \t\t\t\t<button\n    \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n    \t\t\t\t\tonClick={handleSave}\n    \t\t\t\t\tdisabled={isLoading}\n    \t\t\t\t>\n    \t\t\t\t\tSave\n    \t\t\t\t</button>\n    \t\t\t\t)}\n    \n    \t\t\t\t{!isEditable && (\n    \t\t\t\t\t<button\n    \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n    \t\t\t\t\tonClick={handleEdit}\n    \t\t\t\t\t>\n    \t\t\t\t\tEdit\n    \t\t\t\t\t</button>\n    \t\t\t\t)}\n    \t\t\t\t</div>\n          {/* Survey Prompt */}\n    \t  {showSurveyPrompt && (\n                  <div className={styles.survey_prompt}>\n                    <p>\n                      Please take the survey to help us improve {\" \"}\n                      <button\n                        className={styles.link_btn}\n                        onClick={() =>\n                          navigate(\"/survey\", {\n                            state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n                          })\n                        }\n                      >\n                        Take the Survey\n                      </button>\n                    </p>\n                  </div>\n                )}\n    \n    \t\t\t</div>\n    \t\t  \n    \t\t</div>\n    \t  </>\n    // <div className={styles.review_container}>\n    //   <h1>Review Simplified Text</h1>\n    //   <div className={styles.textareas_container}>\n    //     <div className={styles.text_container}>\n    //       <label className={styles.label}>Input Text</label>\n    //       <textarea\n    //         className={`${styles.textarea} ${styles.readonly}`}\n    //         value={inputText}\n    //         readOnly\n    //       ></textarea>\n    //     </div>\n\n    //     <div className={styles.text_container}>\n    //       <label className={styles.label}>Simplified Text</label>\n    //       <textarea\n    //         className={`${styles.textarea} ${styles.readonly}`}\n    //         value={outputText}\n    //         readOnly\n    //       ></textarea>\n    //     </div>\n    //   </div>\n\n    //   <div className={styles.button_container}>\n    //     <button className={styles.save_btn} onClick={handleSave}>\n    //       Save\n    //     </button>\n    //     <button className={styles.edit_btn} onClick={handleEdit}>\n    //       Edit\n    //     </button>\n    //   </div>\n    // </div>\n    // </>\n  );\n};\n\nexport default Review;\n\n\n    // \t  <>\n    \n    // \t\t<div className={styles.main_container}>\n    // \t\t  {!isSubmitted ? (\n    // \t\t\t<div className={styles.description}>\n    // \t\t\t  <p>\n    // \t\t\t\tThis app is about simplifying text for improved readability and\n    // \t\t\t\taccessibility.\n    // \t\t\t  </p>\n    // \t\t\t  <p>\n    // \t\t\t\tUpload a document or paste your text to get a simplified version\n    // \t\t\t\twith just a click.\n    // \t\t\t  </p>\n      \n    // \t\t\t  <div className={styles.form_container}>\n    // \t\t\t\t{/* Input Area */}\n    // \t\t\t\t<div className={styles.input_area}>\n    // \t\t\t\t  <div className={styles.text_container}>\n    // \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n    // \t\t\t\t\t  Input Text\n    // \t\t\t\t\t</label>\n    // \t\t\t\t\t<textarea\n    // \t\t\t\t\t  id=\"inputText\"\n    // \t\t\t\t\t  className={styles.textarea}\n    // \t\t\t\t\t  placeholder=\"Original Text\"\n    // \t\t\t\t\t  value={inputText}\n    // \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n    // \t\t\t\t\t></textarea>\n    // \t\t\t\t  </div>\n      \n    // \t\t\t\t  {/* OR Divider */}\n    // \t\t\t\t  <div className={styles.or_divider}>OR</div>\n      \n    // \t\t\t\t  {/* File Upload */}\n    // \t\t\t\t  <div className={styles.upload_area}>\n    // \t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n    // \t\t\t\t\t  {uploadedFileName ? (\n    // \t\t\t\t\t\t<>\n    // \t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n    // \t\t\t\t\t\t</>\n    // \t\t\t\t\t  ) : (\n    // \t\t\t\t\t\t<>\n    // \t\t\t\t\t\t  Click to Upload a PDF\n    // \t\t\t\t\t\t  <br />\n    // \t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n    // \t\t\t\t\t\t</>\n    // \t\t\t\t\t  )}\n    // \t\t\t\t\t</label>\n    // \t\t\t\t\t<input\n    // \t\t\t\t\t  type=\"file\"\n    // \t\t\t\t\t  id=\"fileUpload\"\n    // \t\t\t\t\t  accept=\"application/pdf\"\n    // \t\t\t\t\t  onChange={handleFileUpload}\n    // \t\t\t\t\t  className={styles.hidden_input}\n    // \t\t\t\t\t/>\n    // \t\t\t\t  </div>\n    // \t\t\t\t</div>\n    // \t\t\t  </div>\n    // \t\t\t  {/* Submit Button */}\n    // \t\t\t  <button\n    // \t\t\t\tclassName={styles.submit_btn}\n    // \t\t\t\tonClick={handleSubmit}\n    // \t\t\t\tdisabled={!inputText.trim() || isLoading}\n    // \t\t\t  >\n    // \t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n    // \t\t\t  </button>\n    // \t\t\t</div>\n    // \t\t  ) : (\n    // \t\t\t<div className={styles.form_container}>\n    // \t\t\t  {/* Input and Output Boxes */}\n    // \t\t\t  <div className={styles.textareas_container}>\n    // \t\t\t\t{/* Input Text Box */}\n    // \t\t\t\t<div className={styles.text_container}>\n    // \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n    // \t\t\t\t\tInput Text\n    // \t\t\t\t  </label>\n    // \t\t\t\t  <textarea\n    // \t\t\t\t\tid=\"inputText\"\n    // \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n    // \t\t\t\t\tvalue={inputText}\n    // \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n    // \t\t\t\t\treadOnly\n    // \t\t\t\t  ></textarea>\n    // \t\t\t\t</div>\n      \n    // \t\t\t\t{/* Output Text Box */}\n    // \t\t\t\t<div className={styles.text_container}>\n    // \t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n    // \t\t\t\t\tSystem-generated Text\n    // \t\t\t\t  </label>\n    // \t\t\t\t  <textarea\n    // \t\t\t\t\tid=\"outputText\"\n    // \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n    // \t\t\t\t\tvalue={outputText}\n    // \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n    // \t\t\t\t\treadOnly={!isEditable}\n    // \t\t\t\t\tplaceholder=\"Output\"\n    // \t\t\t\t  ></textarea>\n    // \t\t\t\t</div>\n    // \t\t\t  </div>\n    \n    \n    // \t\t\t\t{/* Save and Edit Buttons */}\n    // \t\t\t\t<div className={styles.button_container}>\n    // \t\t\t\t{/* <button\n    // \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n    // \t\t\t\t\tonClick={handleSave}\n    // \t\t\t\t>\n    // \t\t\t\t\tSave\n    // \t\t\t\t</button> */}\n    \n    // \t\t\t\t{isSaveButtonVisible && (\n    // \t\t\t\t<button\n    // \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n    // \t\t\t\t\tonClick={handleSave}\n    // \t\t\t\t\tdisabled={isLoading}\n    // \t\t\t\t>\n    // \t\t\t\t\tSave\n    // \t\t\t\t</button>\n    // \t\t\t\t)}\n    \n    // \t\t\t\t{!isEditable && (\n    // \t\t\t\t\t<button\n    // \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n    // \t\t\t\t\tonClick={handleEdit}\n    // \t\t\t\t\t>\n    // \t\t\t\t\tEdit\n    // \t\t\t\t\t</button>\n    // \t\t\t\t)}\n    // \t\t\t\t</div>\n    //       {/* Survey Prompt */}\n    // \t  {showSurveyPrompt && (\n    //               <div className={styles.survey_prompt}>\n    //                 <p>\n    //                   Please take the survey to help us improve.{\" \"}\n    //                   <button\n    //                     className={styles.link_btn}\n    //                     onClick={() =>\n    //                       navigate(\"/survey\", {\n    //                         state: { email: JSON.parse(localStorage.getItem(\"user\")).email, inputText },\n    //                       })\n    //                     }\n    //                   >\n    //                     Take the Survey\n    //                   </button>\n    //                 </p>\n    //               </div>\n    //             )}\n    \n    // \t\t\t</div>\n    // \t\t  )}\n    // \t\t</div>\n    // \t  </>\n    // \t);\n    //   };\n      \n    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}