{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import styles from\"./styles.module.css\";import{useNavigate}from\"react-router-dom\";import*as pdfjsLib from\"pdfjs-dist/legacy/build/pdf\";// import { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\nimport{jwtDecode}from\"jwt-decode\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";pdfjsLib.GlobalWorkerOptions.workerSrc=`${process.env.PUBLIC_URL}/pdf.worker.mjs`;const Main=()=>{const[inputText,setInputText]=useState(\"\");const[outputText,setOutputText]=useState(\"\");const[isLoading,setIsLoading]=useState(false);const[isSubmitted,setIsSubmitted]=useState(false);const[isEditable,setIsEditable]=useState(false);// For toggling edit mode\nconst[uploadedFileName,setUploadedFileName]=useState(\"\");// State for file name\nconst[isSaveButtonVisible,setIsSaveButtonVisible]=useState(true);const[showSurveyPrompt,setShowSurveyPrompt]=useState(false);// State for survey prompt\nconst[documents,setDocuments]=useState([]);// Store user documents\nconst[selectedDocument,setSelectedDocument]=useState(null);// Selected doc\nconst[isSidebarVisible,setIsSidebarVisible]=useState(false);// Sidebar toggle\nconst navigate=useNavigate();const[isUploading,setIsUploading]=useState(false);// State for showing buffer\nconst user=JSON.parse(localStorage.getItem(\"user\"));const email=user===null||user===void 0?void 0:user.email;const[inputWordCount,setInputWordCount]=useState(0);const[inputCharCount,setInputCharCount]=useState(0);const[pdfPageCount,setPdfPageCount]=useState(0);const inputTextSnapshot=useRef(\"\");const handleLogout=()=>{localStorage.removeItem(\"token\");navigate(\"/Login\");};// Load user's past documents (original texts only)\nuseEffect(()=>{if(!email)return;const fetchDocuments=async()=>{try{const response=await fetch(`https://textsimplification-eecqhvdcduczf8cz.westus-01.azurewebsites.net/api/simplifications/user/${email}`);const result=await response.json();if(response.ok){const sortedDocs=result.data.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));setDocuments(sortedDocs);}else{console.error(\"Error fetching documents:\",result.message);}}catch(error){console.error(\"Error fetching documents:\",error);}};fetchDocuments();},[email]);// Handle document selection from history\nconst handleDocumentClick=doc=>{setSelectedDocument(doc);setInputText(doc.inputText);};const handleFileUpload=async event=>{const file=event.target.files[0];if(!file)return;setIsUploading(true);// Show buffer while processing\nsetUploadedFileName(file.name);// Set file name\ntry{//setUploadedFileName(file.name); // Set the uploaded file name\nconst fileReader=new FileReader();fileReader.onload=async function(){const typedArray=new Uint8Array(this.result);const pdf=await pdfjsLib.getDocument(typedArray).promise;setPdfPageCount(pdf.numPages);let text=\"\";// Extract text from all pages\nfor(let i=1;i<=pdf.numPages;i++){const page=await pdf.getPage(i);const textContent=await page.getTextContent();text+=textContent.items.map(item=>item.str).join(\" \");}setInputText(text);};fileReader.readAsArrayBuffer(file);}catch(error){console.error(\"Error reading PDF:\",error);alert(\"Failed to extract text from the PDF.\");}finally{setIsUploading(false);// Hide buffer once done\n}};const countWordsAndChars=text=>{const words=text.trim().split(/\\s+/).filter(Boolean).length;const chars=text.length;return{words,chars};};useEffect(()=>{const{words:inputWords,chars:inputChars}=countWordsAndChars(inputText);setInputWordCount(inputWords);setInputCharCount(inputChars);},[inputText]);// Function to format the prompt with user input\nconst generatePrompt=inputText=>{return`\n\tYou are an expert in accessible communication, tasked with transforming complex text into clear, accessible plain language for individuals with Intellectual and Developmental Disabilities (IDD) or those requiring simplified content. Retain all essential information and intent while prioritizing readability, comprehension, and inclusivity.\n\n\tText simplification refers to rewriting or adapting text to make it easier to read and understand while keeping the same level of detail and precision. Make sure you focus on simplification and not summarization. The length of generated output text must be similar to that of input text.\n\n\tStick to the provided input text and only simplify the language. Don't provide the answer or hallucinate or provide any irrelevant information, not mentioned in the input text. \n\n\tGuidelines for Simplification:\n\tVocabulary and Terminology:\n\tReplace uncommon, technical, or abstract words with simple, everyday language.\n\tDefine unavoidable complex terms in plain language within parentheses upon first use (example: “cardiologist (heart doctor)”).\n\tAvoid idioms, metaphors, sarcasm, or culturally specific references.\n\n\tSentence Structure:\n\tUse short sentences (10--15 words max). Break long sentences into 1–2 ideas each.\n\tPrefer active voice (example: “The doctor examined the patient” vs. “The patient was examined by the doctor”).\n\tAvoid nested clauses, passive voice, and ambiguous pronouns (example: “they,” “it”).\n\n\tClarity and Flow:\n\tOrganize content logically, using headings/subheadings to group related ideas.\n\tUse bullet points or numbered lists for steps, options, or key points.\n\tEnsure each paragraph focuses on one main idea.\n\n\tTone and Engagement:\n\tWrite in a neutral, conversational tone (avoid formal or academic language).\n\tAddress the reader directly with “you” or “we” where appropriate.\n\tUse consistent terms for concepts (avoid synonyms that may confuse).\n\n\tAvoid Exclusionary Elements:\n\tRemove jargon, acronyms (unless defined), and expand abbreviations if needed (example: “ASAP” → “as soon as possible”).\n\tEliminate metaphors, idioms, or implied meanings (example: “hit the books” → “study”).\n\tAvoid double negatives (example: “not uncommon” → “common”).\n\n\tStructural Support:\n\tAdd clear headings to label sections (example: “How to Apply for Benefits”).\n\tUse formatting tools like bold for key terms or warnings.\n\tChunk information into short paragraphs with line breaks for visual ease.\n\n\tInclusivity Checks:\n\tEnsure content is free of bias, stereotypes, or assumptions about the reader.\n\tUse gender-neutral language (example: “they” instead of “he/she”).\n\n\n\tOutput Requirements:\n\tReturn only the simplified text, without markdown, emojis, or images.\n\tPreserve original context, facts, and intent. Do not omit critical details.\n\tPrioritize clarity over brevity; focus on simplification and not summarization. The length of generated output text should be same or similar to that of input text.\n\tDo not simplify already simple text.\n\n\tExample Transformation:\n\tOriginal: “Individuals experiencing adverse climatic conditions may necessitate relocation to mitigate health risks.”\n\tSimplified: “If weather conditions become dangerous, people might need to move to stay safe.”\n\n\tFor the provided input text, apply the above guidelines rigorously. Ensure the output is accessible to readers with varied cognitive abilities, emphasizing clarity, simplicity, and logical structure. Verify that the simplified text aligns with plain language standards like WCAG and PlainLanguage.gov.\n\n\t\"${inputText}\"\n\t`;};const splitTextIntoChunks=(text,maxTokens)=>{const words=text.split(\" \");let chunks=[];let currentChunk=[];for(let word of words){if(currentChunk.join(\" \").length+word.length<maxTokens){currentChunk.push(word);}else{chunks.push(currentChunk.join(\" \"));currentChunk=[word];}}if(currentChunk.length>0)chunks.push(currentChunk.join(\" \"));return chunks;};const handleSubmit=async()=>{// const inputText = document.getElementById('inputText').value;\nconst trimmedInput=inputText.trim();if(!trimmedInput)return;// inputTextSnapshot.current = inputText; \nsetIsLoading(true);try{const chunks=splitTextIntoChunks(trimmedInput,10000);let combinedOutput=\"\";for(let chunk of chunks){var _data$response;const prompt=generatePrompt(chunk);const response=await fetch(\"https://textsimplification-eecqhvdcduczf8cz.westus-01.azurewebsites.net/api/gpt4\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({prompt})});if(!response.ok){console.error(`API request failed with status: ${response.status}`);continue;// Skip this chunk if the API request failed\n}const data=await response.json();console.log(\"Full API Response: \",data);const data1=(data===null||data===void 0?void 0:(_data$response=data.response)===null||_data$response===void 0?void 0:_data$response.replace(/^\"|\"$/g,\"\"))||\"No response received.\";// Append results\ncombinedOutput+=data1+\" \";}console.log(\"Final Combined Output: \",combinedOutput);console.log(\"Data: \",combinedOutput);const cleanedResponse=combinedOutput.trim();setOutputText(cleanedResponse);setIsSubmitted(true);navigate(\"/review\",{state:{inputText:trimmedInput,outputText:cleanedResponse}});}catch(error){console.error(\"Error fetching GPT-4o response:\",error);setOutputText(\"An error occurred while simplifying the text.\");}setIsLoading(false);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"nav\",{className:styles.navbar,children:[/*#__PURE__*/_jsx(\"h1\",{onClick:()=>window.location.href=\"https://textsimplification-eecqhvdcduczf8cz.westus-01.azurewebsites.net/\",style:{cursor:\"pointer\"}// Makes it look clickable\n,children:\"Text Simplification Tool\"}),/*#__PURE__*/_jsx(\"button\",{className:styles.white_btn,onClick:handleLogout,children:\"Logout\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{className:`${styles.sidebar} ${isSidebarVisible?styles.expanded:\"\"}`,children:[/*#__PURE__*/_jsxs(\"button\",{className:styles.historyIcon,onClick:()=>setIsSidebarVisible(!isSidebarVisible),children:[\"\\uD83D\\uDD52   \",/*#__PURE__*/_jsx(\"p\",{style:{fontSize:\"15px\"},children:\" History \"})]}),isSidebarVisible&&/*#__PURE__*/_jsxs(\"div\",{className:styles.historyContent,children:[/*#__PURE__*/_jsx(\"button\",{className:styles.closeButton,onClick:()=>setIsSidebarVisible(false),children:\"\\u2716\"}),/*#__PURE__*/_jsx(\"ul\",{className:styles.historyList,children:documents.map((doc,index)=>/*#__PURE__*/_jsxs(\"li\",{onClick:()=>handleDocumentClick(doc),className:`${styles.historyItem} ${(selectedDocument===null||selectedDocument===void 0?void 0:selectedDocument._id)===doc._id?styles.activeDoc:\"\"}`,children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"Document \",documents.length-index]}),\"(\",doc.inputText.substring(0,20),\"...)\"]},doc._id))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:`${styles.mainContent} ${isSidebarVisible?styles.withSidebar:\"\"}`,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.description,children:/*#__PURE__*/_jsx(\"p\",{children:\"This tool helps make complex text easier to read while preserving its original meaning. Whether you're simplifying academic content, technical documents, or general text for better accessibility, this tool provides a quick and efficient way to generate a more readable version. You can enter text manually or upload a document to get started.\"})}),/*#__PURE__*/_jsx(\"div\",{className:styles.form_container,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.input_area,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.text_container,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,htmlFor:\"inputText\",children:\"Input Text\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"inputText\",className:`${styles.textarea} ${isLoading?styles.disabled:\"\"}`//   className={styles.textarea}\n,placeholder:\"Write/Paste your text here or upload a PDF document to extract content automatically.\",value:inputText,onChange:e=>setInputText(e.target.value),disabled:isLoading// Disable input when loading\n}),/*#__PURE__*/_jsxs(\"p\",{className:styles.countText,children:[\"Words: \",inputWordCount,\" | Characters: \",inputCharCount,pdfPageCount>0&&` | Pages: ${pdfPageCount}`]})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.or_divider,children:\"OR\"}),/*#__PURE__*/_jsxs(\"div\",{className:`${styles.upload_area} ${isLoading?styles.disabled:\"\"}`,onDragOver:e=>e.preventDefault()// Prevent default behavior\n,onDrop:e=>{e.preventDefault();const file=e.dataTransfer.files[0];// Get the first dropped file\nif(file){handleFileUpload({target:{files:[file]}});// Simulate file selection event\n}},children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"fileUpload\",className:styles.upload_box,children:isUploading?/*#__PURE__*/_jsx(\"span\",{className:styles.loadingText,children:\"Extracting text, please wait...\"}):uploadedFileName?/*#__PURE__*/_jsxs(_Fragment,{children:[\"File uploaded: \",/*#__PURE__*/_jsx(\"strong\",{children:uploadedFileName})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[\"Click to Upload a PDF\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"span\",{children:\"...or drag and drop a file.\"})]})}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"fileUpload\",accept:\"application/pdf\",onChange:handleFileUpload,className:styles.hidden_input,disabled:isUploading||isLoading// Disable upload while processing\n//disabled={isUploading} // Disable upload while processing\n})]})]})}),/*#__PURE__*/_jsx(\"button\",{className:styles.submit_btn,onClick:handleSubmit,disabled:!inputText.trim()||isLoading||isUploading,id:\"simplifyBtn\"//title={!inputText.trim() ? \"Enter text or upload a file to enable simplification.\" : \"\"}\n,children:isLoading?\"Processing...\":\"Simplify Text\"}),/*#__PURE__*/_jsxs(\"p\",{className:styles.help_text,children:[\"Need Help? \",/*#__PURE__*/_jsx(\"a\",{href:\"mailto:anukumar@uw.edu\",children:\"Contact Support\"})]})]})]})]});};export default Main;","map":{"version":3,"names":["React","useState","useEffect","useRef","styles","useNavigate","pdfjsLib","jwtDecode","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","Main","inputText","setInputText","outputText","setOutputText","isLoading","setIsLoading","isSubmitted","setIsSubmitted","isEditable","setIsEditable","uploadedFileName","setUploadedFileName","isSaveButtonVisible","setIsSaveButtonVisible","showSurveyPrompt","setShowSurveyPrompt","documents","setDocuments","selectedDocument","setSelectedDocument","isSidebarVisible","setIsSidebarVisible","navigate","isUploading","setIsUploading","user","JSON","parse","localStorage","getItem","email","inputWordCount","setInputWordCount","inputCharCount","setInputCharCount","pdfPageCount","setPdfPageCount","inputTextSnapshot","handleLogout","removeItem","fetchDocuments","response","fetch","result","json","ok","sortedDocs","data","sort","a","b","Date","createdAt","console","error","message","handleDocumentClick","doc","handleFileUpload","event","file","target","files","name","fileReader","FileReader","onload","typedArray","Uint8Array","pdf","getDocument","promise","numPages","text","i","page","getPage","textContent","getTextContent","items","map","item","str","join","readAsArrayBuffer","alert","countWordsAndChars","words","trim","split","filter","Boolean","length","chars","inputWords","inputChars","generatePrompt","splitTextIntoChunks","maxTokens","chunks","currentChunk","word","push","handleSubmit","trimmedInput","combinedOutput","chunk","_data$response","prompt","method","headers","body","stringify","status","log","data1","replace","cleanedResponse","state","children","className","navbar","onClick","window","location","href","style","cursor","white_btn","container","sidebar","expanded","historyIcon","fontSize","historyContent","closeButton","historyList","index","historyItem","_id","activeDoc","substring","mainContent","withSidebar","description","form_container","input_area","text_container","label","htmlFor","id","textarea","disabled","placeholder","value","onChange","e","countText","or_divider","upload_area","onDragOver","preventDefault","onDrop","dataTransfer","upload_box","loadingText","type","accept","hidden_input","submit_btn","help_text"],"sources":["/Users/anukumar/Desktop/Autumn 2024/Text Simplification/textsimplification/client/src/components/Main/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef  } from \"react\";\nimport styles from \"./styles.module.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n// import { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\nimport { jwtDecode } from \"jwt-decode\";\n\n\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\nconst Main = () => {\n\n\tconst [inputText, setInputText] = useState(\"\");\n\tconst [outputText, setOutputText] = useState(\"\");\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n\tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\tconst [isSaveButtonVisible, setIsSaveButtonVisible] = useState(true);\n\tconst [showSurveyPrompt, setShowSurveyPrompt] = useState(false); // State for survey prompt\n\n\tconst [documents, setDocuments] = useState([]); // Store user documents\n\tconst [selectedDocument, setSelectedDocument] = useState(null); // Selected doc\n\tconst [isSidebarVisible, setIsSidebarVisible] = useState(false); // Sidebar toggle\n\n\tconst navigate = useNavigate();\n\tconst [isUploading, setIsUploading] = useState(false); // State for showing buffer\n\n\tconst user = JSON.parse(localStorage.getItem(\"user\"));\n\tconst email = user?.email;\n\n\tconst [inputWordCount, setInputWordCount] = useState(0);\n\tconst [inputCharCount, setInputCharCount] = useState(0);\n\tconst [pdfPageCount, setPdfPageCount] = useState(0);\n\n\tconst inputTextSnapshot = useRef(\"\");\n\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    navigate(\"/Login\"); \n  };\n\n    // Load user's past documents (original texts only)\n\tuseEffect(() => {\n\t\tif (!email) return;\n\t\n\t\tconst fetchDocuments = async () => {\n\t\t  try {\n\t\t\tconst response = await fetch(\n\t\t\t  `https://textsimplification-eecqhvdcduczf8cz.westus-01.azurewebsites.net/api/simplifications/user/${email}`\n\t\t\t);\n\t\t\tconst result = await response.json();\n\t\n\t\t\tif (response.ok) {\n\t\t\t  const sortedDocs = result.data.sort(\n\t\t\t\t(a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n\t\t\t  );\n\t\t\t  setDocuments(sortedDocs);\n\t\t\t} else {\n\t\t\t  console.error(\"Error fetching documents:\", result.message);\n\t\t\t}\n\t\t  } catch (error) {\n\t\t\tconsole.error(\"Error fetching documents:\", error);\n\t\t  }\n\t\t};\n\t\n\t\tfetchDocuments();\n\t  }, [email]);\n\n\t  // Handle document selection from history\n  const handleDocumentClick = (doc) => {\n    setSelectedDocument(doc);\n    setInputText(doc.inputText);\n  };\n\n  \tconst handleFileUpload = async (event) => {\n\t  const file = event.target.files[0];\n\t  if (!file) return;\n  \n\t  setIsUploading(true); // Show buffer while processing\n\t  setUploadedFileName(file.name); // Set file name\n\n\t  try {\n\t\t//setUploadedFileName(file.name); // Set the uploaded file name\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = async function () {\n\t\t  const typedArray = new Uint8Array(this.result);\n  \n\t\t  const pdf = await pdfjsLib.getDocument(typedArray).promise;\n\n\t\t  setPdfPageCount(pdf.numPages);\n\n\t\t  let text = \"\";\n  \n\t\t  // Extract text from all pages\n\t\t  for (let i = 1; i <= pdf.numPages; i++) {\n\t\t\tconst page = await pdf.getPage(i);\n\t\t\tconst textContent = await page.getTextContent();\n\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n\t\t  }\n  \n\t\t  setInputText(text);\n\t\t};\n\t\tfileReader.readAsArrayBuffer(file);\n\t  } catch (error) {\n\t\tconsole.error(\"Error reading PDF:\", error);\n\t\talert(\"Failed to extract text from the PDF.\");\n\t  } finally {\n\t\tsetIsUploading(false); // Hide buffer once done\n\t  }\n\t};\n \n\tconst countWordsAndChars = (text) => {\n\t\tconst words = text.trim().split(/\\s+/).filter(Boolean).length;\n\t\tconst chars = text.length;\n\t\treturn { words, chars };\n\t  };\n\t  \n\t    useEffect(() => {\n\t\t  const { words: inputWords, chars: inputChars } = countWordsAndChars(inputText);\n\n\t\t  setInputWordCount(inputWords);\n\t\t  setInputCharCount(inputChars);\n\n\t\t}, [inputText]);\n\t  \n\t\t\n\n\t// Function to format the prompt with user input\nconst generatePrompt = (inputText) => {\n\treturn `\n\tYou are an expert in accessible communication, tasked with transforming complex text into clear, accessible plain language for individuals with Intellectual and Developmental Disabilities (IDD) or those requiring simplified content. Retain all essential information and intent while prioritizing readability, comprehension, and inclusivity.\n\n\tText simplification refers to rewriting or adapting text to make it easier to read and understand while keeping the same level of detail and precision. Make sure you focus on simplification and not summarization. The length of generated output text must be similar to that of input text.\n\n\tStick to the provided input text and only simplify the language. Don't provide the answer or hallucinate or provide any irrelevant information, not mentioned in the input text. \n\n\tGuidelines for Simplification:\n\tVocabulary and Terminology:\n\tReplace uncommon, technical, or abstract words with simple, everyday language.\n\tDefine unavoidable complex terms in plain language within parentheses upon first use (example: “cardiologist (heart doctor)”).\n\tAvoid idioms, metaphors, sarcasm, or culturally specific references.\n\n\tSentence Structure:\n\tUse short sentences (10--15 words max). Break long sentences into 1–2 ideas each.\n\tPrefer active voice (example: “The doctor examined the patient” vs. “The patient was examined by the doctor”).\n\tAvoid nested clauses, passive voice, and ambiguous pronouns (example: “they,” “it”).\n\n\tClarity and Flow:\n\tOrganize content logically, using headings/subheadings to group related ideas.\n\tUse bullet points or numbered lists for steps, options, or key points.\n\tEnsure each paragraph focuses on one main idea.\n\n\tTone and Engagement:\n\tWrite in a neutral, conversational tone (avoid formal or academic language).\n\tAddress the reader directly with “you” or “we” where appropriate.\n\tUse consistent terms for concepts (avoid synonyms that may confuse).\n\n\tAvoid Exclusionary Elements:\n\tRemove jargon, acronyms (unless defined), and expand abbreviations if needed (example: “ASAP” → “as soon as possible”).\n\tEliminate metaphors, idioms, or implied meanings (example: “hit the books” → “study”).\n\tAvoid double negatives (example: “not uncommon” → “common”).\n\n\tStructural Support:\n\tAdd clear headings to label sections (example: “How to Apply for Benefits”).\n\tUse formatting tools like bold for key terms or warnings.\n\tChunk information into short paragraphs with line breaks for visual ease.\n\n\tInclusivity Checks:\n\tEnsure content is free of bias, stereotypes, or assumptions about the reader.\n\tUse gender-neutral language (example: “they” instead of “he/she”).\n\n\n\tOutput Requirements:\n\tReturn only the simplified text, without markdown, emojis, or images.\n\tPreserve original context, facts, and intent. Do not omit critical details.\n\tPrioritize clarity over brevity; focus on simplification and not summarization. The length of generated output text should be same or similar to that of input text.\n\tDo not simplify already simple text.\n\n\tExample Transformation:\n\tOriginal: “Individuals experiencing adverse climatic conditions may necessitate relocation to mitigate health risks.”\n\tSimplified: “If weather conditions become dangerous, people might need to move to stay safe.”\n\n\tFor the provided input text, apply the above guidelines rigorously. Ensure the output is accessible to readers with varied cognitive abilities, emphasizing clarity, simplicity, and logical structure. Verify that the simplified text aligns with plain language standards like WCAG and PlainLanguage.gov.\n\n\t\"${inputText}\"\n\t`;\n  };\n\n  const splitTextIntoChunks = (text, maxTokens) => {\n\tconst words = text.split(\" \");\n\tlet chunks = [];\n\tlet currentChunk = [];\n  \n\tfor (let word of words) {\n\t  if (currentChunk.join(\" \").length + word.length < maxTokens) {\n\t\tcurrentChunk.push(word);\n\t  } else {\n\t\tchunks.push(currentChunk.join(\" \"));\n\t\tcurrentChunk = [word];\n\t  }\n\t}\n\tif (currentChunk.length > 0) chunks.push(currentChunk.join(\" \"));\n\treturn chunks;\n  };\n\n\n  const handleSubmit = async () => {\n\n\t// const inputText = document.getElementById('inputText').value;\n\tconst trimmedInput = inputText.trim();\n\tif (!trimmedInput) return;\n\n\t// inputTextSnapshot.current = inputText; \n\tsetIsLoading(true);\n  \n\ttry {\n\t  const chunks = splitTextIntoChunks(trimmedInput, 10000);\n\t  let combinedOutput = \"\";\n  \n\t  for (let chunk of chunks) {\n\t\tconst prompt = generatePrompt(chunk);\n\t\tconst response = await fetch(\"https://textsimplification-eecqhvdcduczf8cz.westus-01.azurewebsites.net/api/gpt4\", {\n\t\t  method: \"POST\",\n\t\t  headers: { \"Content-Type\": \"application/json\" },\n\t\t  body: JSON.stringify({ prompt }),\n\t\t});\n\t\t\n\t\tif (!response.ok) {\n\t\t\tconsole.error(`API request failed with status: ${response.status}`);\n\t\t\tcontinue; // Skip this chunk if the API request failed\n\t\t  }\n\n\t\tconst data = await response.json();\n\t\tconsole.log(\"Full API Response: \", data);\n\n\n\t\tconst data1 = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\"; // Append results\n\t\tcombinedOutput += data1 + \" \";\n\t}\n\t  console.log(\"Final Combined Output: \", combinedOutput);\n\n\tconsole.log(\"Data: \", combinedOutput);\n\n\tconst cleanedResponse = combinedOutput.trim();\n\tsetOutputText(cleanedResponse);\n\tsetIsSubmitted(true);\n\tnavigate(\"/review\", { state: { inputText: trimmedInput, outputText: cleanedResponse } });\n\t\n\t} catch (error) {\n\t  console.error(\"Error fetching GPT-4o response:\", error);\n\t  setOutputText(\"An error occurred while simplifying the text.\");\n\t}\n  \n\tsetIsLoading(false);\n  };\n\n  \n\n  return (\n    <>\n      <nav className={styles.navbar}>\n        {/* <h1>Text Simplification Tool</h1> */}\n\t\t<h1 \n    onClick={() => window.location.href = \"https://textsimplification-eecqhvdcduczf8cz.westus-01.azurewebsites.net/\"}\n    style={{ cursor: \"pointer\" }} // Makes it look clickable\n \t\t>\n\t\tText Simplification Tool</h1>\n        <button className={styles.white_btn} onClick={handleLogout}>\n          Logout\n        </button>\n      </nav>\n\n\t  <div className={styles.container}>\n\n\t\t\t <div\n\t\t\t\t  className={`${styles.sidebar} ${\n\t\t\t\t\tisSidebarVisible ? styles.expanded : \"\"\n\t\t\t\t  }`}\n\t\t\t\t>\n\n\t\t\t{/* </div> */}\n\n\t\t\t<button\n\t\t\tclassName={styles.historyIcon}\n\t\t\tonClick={() => setIsSidebarVisible(!isSidebarVisible)}\n\t\t\t>\n\t\t\t\t🕒   <p style={{ fontSize: \"15px\" }}> History </p> \n\t\t\t</button>\n\n\n          {isSidebarVisible && (\n            <div className={styles.historyContent}>\n              <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>\n                ✖\n              </button>\n              <ul className={styles.historyList}>\n                {documents.map((doc, index) => (\n    \n\t\t\t\t<li\n\t\t\t\tkey={doc._id}\n\t\t\t\tonClick={() => handleDocumentClick(doc)}\n\t\t\t\tclassName={`${styles.historyItem} ${selectedDocument?._id === doc._id ? styles.activeDoc : \"\"}`}\n\t\t\t\t>\n\t\t\t\t{/* <strong>Document {index + 1}</strong>  */}\n\t\t\t\t<strong>Document {documents.length - index}</strong>({doc.inputText.substring(0, 20)}...)\n\t\t\t\t</li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n\t  {/* <div className={styles.main_container}> */}\n\t  <div className={`${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`}>\n         \n\t\t\t<div className={styles.description}>\n\t\t\t  <p>\n\t\t\t  This tool helps make complex text easier to read while preserving its original meaning. Whether you're simplifying academic content, technical documents, or general text for better accessibility, this tool provides a quick and efficient way to generate a more readable version. You can enter text manually or upload a document to get started.\n\t\t\t  </p>\n\t</div>\n\t\t\t  <div className={styles.form_container}>\n\t\t\t\t{/* Input Area */}\n\t\t\t\t<div className={styles.input_area}>\n\t\t\t\t  <div className={styles.text_container}>\n\t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n\t\t\t\t\t  Input Text\n\t\t\t\t\t</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t  id=\"inputText\"\n\t\t\t\t\t  className={`${styles.textarea} ${isLoading ? styles.disabled : \"\"}`}\n\t\t\t\t\t//   className={styles.textarea}\n\t\t\t\t\t  placeholder=\"Write/Paste your text here or upload a PDF document to extract content automatically.\"\n\t\t\t\t\t  value={inputText}\n\t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n\t\t\t\t\t  disabled={isLoading} // Disable input when loading\n\t\t\t\t\t></textarea>\n\t\t\t\t \n\t\t\t\t <p className={styles.countText}>Words: {inputWordCount} | Characters: {inputCharCount}\n\t\t\t\t {pdfPageCount > 0 && ` | Pages: ${pdfPageCount}`}\n\t\t\t\t </p>\n\t\t\t\t\t\n\t\t\t\t  </div>\n  \n\t\t\t\t  {/* OR Divider */}\n\t\t\t\t  <div className={styles.or_divider}>OR</div>\n  \n\t\t\t\t  {/* File Upload */}\n\t\t\t\t  <div className={`${styles.upload_area} ${isLoading ? styles.disabled : \"\"}`}\n\t\t\t\t\tonDragOver={(e) => e.preventDefault()} // Prevent default behavior\n\t\t\t\t\tonDrop={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst file = e.dataTransfer.files[0]; // Get the first dropped file\n\t\t\t\t\t\tif (file) {\n\t\t\t\t\t\thandleFileUpload({ target: { files: [file] } }); // Simulate file selection event\n\t\t\t\t\t\t}\n\t\t\t\t\t}}>\n\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{isUploading ? (\n\t\t\t\t\t\t\t<span className={styles.loadingText}>Extracting text, please wait...</span>\n\t\t\t\t\t\t\t) : uploadedFileName ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\tClick to Upload a PDF\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<span>...or drag and drop a file.</span>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\n\t\t\t\t\t</label>\n\t\t\t\t\t<input\n\t\t\t\t\t  type=\"file\"\n\t\t\t\t\t  id=\"fileUpload\"\n\t\t\t\t\t  accept=\"application/pdf\"\n\t\t\t\t\t  onChange={handleFileUpload}\n\t\t\t\t\t  className={styles.hidden_input}\n\t\t\t\t\t  disabled={isUploading || isLoading} // Disable upload while processing\n\t\t\t\t\t  //disabled={isUploading} // Disable upload while processing\n\t\t\t\t\t/>\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t  {/* Submit Button */}\n\t\t\t  <button\n\t\t\t\tclassName={styles.submit_btn}\n\t\t\t\tonClick={handleSubmit}\n\t\t\t\tdisabled={!inputText.trim() || isLoading || isUploading}\n\t\t\t\tid=\"simplifyBtn\"\n\t\t\t\t//title={!inputText.trim() ? \"Enter text or upload a file to enable simplification.\" : \"\"}\n\t\t\t  >\n\t\t\t\t{isLoading ? \"Processing...\" : \"Simplify Text\"}\n\t\t\t  </button>\n\t\n\t\t\t  <p className={styles.help_text}>Need Help? <a href=\"mailto:anukumar@uw.edu\">Contact Support</a></p>\n\n      </div>\n\n      </div>\n    </>\n  );\n};\n\nexport default Main;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}