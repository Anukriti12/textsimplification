{"ast":null,"code":"import React,{useMemo,useState}from\"react\";import{calcMetrics}from\"../../utils/textMetrics\";// ← already written\nimport styles from\"./styles.module.css\";// make next\n/** Small icon‑button that pops a metrics panel. */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function StatsButton(_ref){var _metrics$fleschReadin,_metrics$fleschKincai,_metrics$lexicalDensi,_metrics$avgSentenceL,_metrics$avgCharsPerW,_metrics$avgSyllables;let{text}=_ref;const[open,setOpen]=useState(false);/* re‑compute only if the text itself changes */const metrics=useMemo(()=>calcMetrics(text||\"\"),[text]);return/*#__PURE__*/_jsxs(\"div\",{className:styles.wrapper,children:[/*#__PURE__*/_jsx(\"span\",{className:styles.icon,title:\"Show statistics\",onClick:()=>setOpen(o=>!o),children:\"\\uD83D\\uDCCA\"}),open&&/*#__PURE__*/_jsxs(\"div\",{className:styles.panel,children:[/*#__PURE__*/_jsx(\"button\",{className:styles.close,onClick:()=>setOpen(false),children:\"\\u2716\"}),/*#__PURE__*/_jsx(\"h4\",{children:\"Readability\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles.row,children:[/*#__PURE__*/_jsx(\"label\",{children:\"Flesch Reading Ease\"}),/*#__PURE__*/_jsx(\"span\",{children:(_metrics$fleschReadin=metrics.fleschReadingEase)===null||_metrics$fleschReadin===void 0?void 0:_metrics$fleschReadin.toFixed(1)})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.row,children:[/*#__PURE__*/_jsx(\"label\",{children:\"Flesch\\u2011Kincaid Grade\"}),/*#__PURE__*/_jsx(\"span\",{children:(_metrics$fleschKincai=metrics.fleschKincaidGrade)===null||_metrics$fleschKincai===void 0?void 0:_metrics$fleschKincai.toFixed(1)})]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Linguistic Metrics\"}),[[\"Lexical density\",(_metrics$lexicalDensi=metrics.lexicalDensity)===null||_metrics$lexicalDensi===void 0?void 0:_metrics$lexicalDensi.toFixed(2)],[\"Word count\",metrics.wordCount],[\"Unique words\",metrics.uniqueWords],[\"Sentence count\",metrics.sentenceCount],[\"Avg. sentence length\",(_metrics$avgSentenceL=metrics.avgSentenceLength)===null||_metrics$avgSentenceL===void 0?void 0:_metrics$avgSentenceL.toFixed(2)],[\"Chars (with spaces)\",metrics.charsWithSpaces],[\"Chars (no spaces)\",metrics.charsWithoutSpaces],[\"Avg. chars / word\",(_metrics$avgCharsPerW=metrics.avgCharsPerWord)===null||_metrics$avgCharsPerW===void 0?void 0:_metrics$avgCharsPerW.toFixed(2)],[\"Syllables (∼)\",metrics.syllableCount],[\"Avg. syllables / word\",(_metrics$avgSyllables=metrics.avgSyllablesPerWord)===null||_metrics$avgSyllables===void 0?void 0:_metrics$avgSyllables.toFixed(2)]].map(_ref2=>{let[k,v]=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:styles.row,children:[/*#__PURE__*/_jsx(\"label\",{children:k}),/*#__PURE__*/_jsx(\"span\",{children:v})]},k);})]})]});}","map":{"version":3,"names":["React","useMemo","useState","calcMetrics","styles","jsx","_jsx","jsxs","_jsxs","StatsButton","_ref","_metrics$fleschReadin","_metrics$fleschKincai","_metrics$lexicalDensi","_metrics$avgSentenceL","_metrics$avgCharsPerW","_metrics$avgSyllables","text","open","setOpen","metrics","className","wrapper","children","icon","title","onClick","o","panel","close","row","fleschReadingEase","toFixed","fleschKincaidGrade","lexicalDensity","wordCount","uniqueWords","sentenceCount","avgSentenceLength","charsWithSpaces","charsWithoutSpaces","avgCharsPerWord","syllableCount","avgSyllablesPerWord","map","_ref2","k","v"],"sources":["/Users/anukumar/Desktop/Spring2025/textsimplification/client/src/components/StatsButton/index.js"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { calcMetrics } from \"../../utils/textMetrics\";   // ← already written\nimport styles from \"./styles.module.css\";                 // make next\n\n/** Small icon‑button that pops a metrics panel. */\nexport default function StatsButton({ text }) {\n  const [open, setOpen] = useState(false);\n\n  /* re‑compute only if the text itself changes */\n  const metrics = useMemo(() => calcMetrics(text || \"\"), [text]);\n\n  return (\n    <div className={styles.wrapper}>\n      <span\n        className={styles.icon}\n        title=\"Show statistics\"\n        onClick={() => setOpen((o) => !o)}\n      >\n        📊\n      </span>\n\n      {open && (\n        <div className={styles.panel}>\n          <button className={styles.close} onClick={() => setOpen(false)}>✖</button>\n\n          <h4>Readability</h4>\n          <div className={styles.row}>\n            <label>Flesch Reading Ease</label>\n            <span>{metrics.fleschReadingEase?.toFixed(1)}</span>\n          </div>\n          <div className={styles.row}>\n            <label>Flesch‑Kincaid Grade</label>\n            <span>{metrics.fleschKincaidGrade?.toFixed(1)}</span>\n          </div>\n\n          <h4>Linguistic Metrics</h4>\n          {[\n            [\"Lexical density\", metrics.lexicalDensity?.toFixed(2)],\n            [\"Word count\", metrics.wordCount],\n            [\"Unique words\", metrics.uniqueWords],\n            [\"Sentence count\", metrics.sentenceCount],\n            [\"Avg. sentence length\", metrics.avgSentenceLength?.toFixed(2)],\n            [\"Chars (with spaces)\", metrics.charsWithSpaces],\n            [\"Chars (no spaces)\", metrics.charsWithoutSpaces],\n            [\"Avg. chars / word\", metrics.avgCharsPerWord?.toFixed(2)],\n            [\"Syllables (∼)\", metrics.syllableCount],\n            [\"Avg. syllables / word\", metrics.avgSyllablesPerWord?.toFixed(2)],\n          ].map(([k, v]) => (\n            <div key={k} className={styles.row}>\n              <label>{k}</label>\n              <span>{v}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}