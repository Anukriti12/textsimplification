{"ast":null,"code":"var _jsxFileName = \"/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_copy/client/src/components/Main/index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport styles from \"./styles.module.css\";\n//import * as pdfjsLib from \"pdfjs-dist\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.js`;\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`;\n\nconst Main = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n  const handleSubmit = async () => {\n    if (!inputText.trim()) return;\n    setIsLoading(true);\n    try {\n      var _data$response;\n      const prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n      const response = await fetch(\"http://localhost:5001/api/gpt4\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt\n        })\n      });\n      const data = await response.json();\n      const cleanedResponse = (data === null || data === void 0 ? void 0 : (_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.replace(/^\"|\"$/g, \"\")) || \"No response received.\";\n      setOutputText(cleanedResponse);\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error(\"Error fetching GPT-4 response:\", error);\n      setOutputText(\"An error occurred while fetching the response.\");\n    }\n    setIsLoading(false);\n  };\n  const handleSave = () => {\n    alert(\"Output saved!\");\n  };\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    try {\n      const fileReader = new FileReader();\n      fileReader.onload = async function () {\n        const typedArray = new Uint8Array(this.result);\n        const pdf = await pdfjsLib.getDocument(typedArray).promise;\n        let text = \"\";\n\n        // Extract text from all pages\n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          text += textContent.items.map(item => item.str).join(\" \");\n        }\n        setInputText(text);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error(\"Error reading PDF:\", error);\n      alert(\"Failed to extract text from the PDF.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.navbar,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Text Simplification Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.white_btn,\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.main_container,\n      children: !isSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.form_container,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: styles.textarea,\n          placeholder: \"Original Text\",\n          value: inputText,\n          onChange: e => setInputText(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.upload_container,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"application/pdf\",\n            onChange: handleFileUpload,\n            className: styles.file_input\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.submit_btn,\n          onClick: handleSubmit,\n          disabled: isLoading,\n          children: isLoading ? \"Processing...\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.form_container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.textareas_container,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: `${styles.textarea} ${styles.side_by_side}`,\n            placeholder: \"Original Text\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: `${styles.output_box} ${styles.side_by_side}`,\n            value: outputText,\n            onChange: e => setOutputText(e.target.value) // Allow editing\n            ,\n            placeholder: \"Output\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.submit_btn,\n          onClick: handleSave,\n          disabled: isLoading,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n_s(Main, \"LRCSIScnvgMFc7cmdReFA+VbZGk=\");\n_c = Main;\nexport default Main;\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, '') || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","styles","pdfjsLib","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","Main","_s","inputText","setInputText","outputText","setOutputText","isLoading","setIsLoading","isSubmitted","setIsSubmitted","handleLogout","localStorage","removeItem","window","location","reload","handleSubmit","trim","_data$response","prompt","response","fetch","method","headers","body","JSON","stringify","data","json","cleanedResponse","replace","error","console","handleSave","alert","handleFileUpload","event","file","target","files","fileReader","FileReader","onload","typedArray","Uint8Array","result","pdf","getDocument","promise","text","i","numPages","page","getPage","textContent","getTextContent","items","map","item","str","join","readAsArrayBuffer","children","className","navbar","fileName","_jsxFileName","lineNumber","columnNumber","white_btn","onClick","main_container","form_container","textarea","placeholder","value","onChange","e","upload_container","type","accept","file_input","submit_btn","disabled","textareas_container","side_by_side","output_box","_c","$RefreshReg$"],"sources":["/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_copy/client/src/components/Main/index.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport styles from \"./styles.module.css\";\n//import * as pdfjsLib from \"pdfjs-dist\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.js`;\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`;\n\nconst Main = () => {\n\tconst [inputText, setInputText] = useState(\"\");\n\tconst [outputText, setOutputText] = useState(\"\");\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n\tconst handleLogout = () => {\n\t\tlocalStorage.removeItem(\"token\");\n\t\twindow.location.reload();\n\t};\n\n\tconst handleSubmit = async () => {\n\t\tif (!inputText.trim()) return;\n\t\tsetIsLoading(true);\n\n\t\ttry {\n\t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n\t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\tbody: JSON.stringify({ prompt }),\n\t\t\t});\n\n\t\t\tconst data = await response.json();\n\t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n\t\t\tsetOutputText(cleanedResponse);\n\t\t\tsetIsSubmitted(true);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n\t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n\t\t}\n\n\t\tsetIsLoading(false);\n\t};\n\n\tconst handleSave = () => {\n\t\talert(\"Output saved!\");\n\t};\n\n\tconst handleFileUpload = async (event) => {\n\t\tconst file = event.target.files[0];\n\t\tif (!file) return;\n\n\t\ttry {\n\t\t\tconst fileReader = new FileReader();\n\t\t\tfileReader.onload = async function () {\n\t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n\t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n\t\t\t\tlet text = \"\";\n\n\t\t\t\t// Extract text from all pages\n\t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n\t\t\t\t\tconst page = await pdf.getPage(i);\n\t\t\t\t\tconst textContent = await page.getTextContent();\n\t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n\t\t\t\t}\n\n\t\t\t\tsetInputText(text);\n\t\t\t};\n\t\t\tfileReader.readAsArrayBuffer(file);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error reading PDF:\", error);\n\t\t\talert(\"Failed to extract text from the PDF.\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{/* Navbar */}\n\t\t\t<nav className={styles.navbar}>\n\t\t\t\t<h1>Text Simplification Study</h1>\n\t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n\t\t\t\t\tLogout\n\t\t\t\t</button>\n\t\t\t</nav>\n\n\t\t\t{/* Main Content */}\n\t\t\t<div className={styles.main_container}>\n\t\t\t\t{/* Conditional Rendering for Layout */}\n\t\t\t\t{!isSubmitted ? (\n\t\t\t\t\t<div className={styles.form_container}>\n\t\t\t\t\t\t{/* Full-width Input Box */}\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tclassName={styles.textarea}\n\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n\t\t\t\t\t\t\tvalue={inputText}\n\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n\t\t\t\t\t\t></textarea>\n\n\t\t\t\t\t\t{/* File Upload */}\n\t\t\t\t\t\t<div className={styles.upload_container}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"file\"\n\t\t\t\t\t\t\t\taccept=\"application/pdf\"\n\t\t\t\t\t\t\t\tonChange={handleFileUpload}\n\t\t\t\t\t\t\t\tclassName={styles.file_input}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Centered Submit Button */}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={styles.submit_btn}\n\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className={styles.form_container}>\n\t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n\t\t\t\t\t\t<div className={styles.textareas_container}>\n\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n\t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n\t\t\t\t\t\t\t\tvalue={inputText}\n\t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n\t\t\t\t\t\t\t></textarea>\n\n\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n\t\t\t\t\t\t\t\tvalue={outputText}\n\t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n\t\t\t\t\t\t\t\tplaceholder=\"Output\"\n\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{/* Centered Save Button */}\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={styles.submit_btn}\n\t\t\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Main;\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, '') || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n"],"mappings":"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,OACG,CAAC;EAAA,eACL,CAAC;AAEL,CAAC;AAACnE,EAAA,CA9IID,IAAI;AAAAuF,EAAA,GAAJvF,IAAI;AAgJV,eAAeA,IAAI;;AAEnB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}