{"ast":null,"code":"var _jsxFileName = \"/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v2/client/src/components/Main/index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\nconst Main = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n  const [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n  const handleSubmit = async () => {\n    if (!inputText.trim()) return;\n    setIsLoading(true);\n    try {\n      var _data$response;\n      const prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n      const response = await fetch(\"http://localhost:5001/api/gpt4\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt\n        })\n      });\n      const data = await response.json();\n      const cleanedResponse = (data === null || data === void 0 ? void 0 : (_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.replace(/^\"|\"$/g, \"\")) || \"No response received.\";\n      setOutputText(cleanedResponse);\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error(\"Error fetching GPT-4 response:\", error);\n      setOutputText(\"An error occurred while fetching the response.\");\n    }\n    setIsLoading(false);\n  };\n  const handleSave = async () => {\n    try {\n      const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n      console.log(\"User info from localStorage:\", user);\n      if (!user) {\n        alert(\"User not logged in!\");\n        return;\n      }\n      const payload = {\n        userId: user._id,\n        email: user.email,\n        inputText,\n        ...(isEditable ? {\n          editedText: outputText\n        } // Only send editedText if editing\n        : {\n          outputText,\n          editableText: outputText\n        }) // Save all fields on the first save\n      };\n      const endpoint = isEditable ? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for editing\n      : \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n\n      const response = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(payload)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        alert(isEditable ? \"Edited text saved successfully!\" : \"Simplification saved successfully!\");\n        if (isEditable) setIsEditable(false); // Exit editing mode after saving edits\n      } else {\n        const error = await response.json();\n        alert(error.message || \"Failed to save simplification.\");\n      }\n    } catch (error) {\n      console.error(\"Error saving simplification:\", error);\n      alert(\"An error occurred. Please try again.\");\n    }\n  };\n  const handleEdit = () => {\n    setIsEditable(true); // Enable editing mode\n\n    //handleSave(); // Save the current output text\n  };\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    try {\n      setUploadedFileName(file.name); // Set the uploaded file name\n      const fileReader = new FileReader();\n      fileReader.onload = async function () {\n        const typedArray = new Uint8Array(this.result);\n        const pdf = await pdfjsLib.getDocument(typedArray).promise;\n        let text = \"\";\n\n        // Extract text from all pages\n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          text += textContent.items.map(item => item.str).join(\" \");\n        }\n        setInputText(text);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } catch (error) {\n      console.error(\"Error reading PDF:\", error);\n      alert(\"Failed to extract text from the PDF.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.navbar,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Text Simplification Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.white_btn,\n        onClick: handleLogout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.main_container,\n      children: !isSubmitted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.description,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This app is about simplifying text for improved readability and accessibility.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Upload a document or paste your text to get a simplified version with just a click.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.form_container,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.input_area,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.text_container,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: styles.label,\n                htmlFor: \"inputText\",\n                children: \"Input Text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 6\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"inputText\",\n                className: styles.textarea,\n                placeholder: \"Original Text\",\n                value: inputText,\n                onChange: e => setInputText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 6\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.or_divider,\n              children: \"OR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.upload_area,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"fileUpload\",\n                className: styles.upload_box,\n                children: uploadedFileName ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [\"File uploaded: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: uploadedFileName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 24\n                  }, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [\"Click to Upload a PDF\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 181,\n                    columnNumber: 9\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"...or drag and drop a file.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 9\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 6\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"fileUpload\",\n                accept: \"application/pdf\",\n                onChange: handleFileUpload,\n                className: styles.hidden_input\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 6\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 5\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.submit_btn,\n          onClick: handleSubmit,\n          disabled: !inputText.trim() || isLoading,\n          children: isLoading ? \"Processing...\" : \"Simplfiy Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 4\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.form_container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.textareas_container,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.label,\n              htmlFor: \"inputText\",\n              children: \"Input Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"inputText\",\n              className: `${styles.textarea} ${styles.side_by_side}`,\n              value: inputText,\n              onChange: e => setInputText(e.target.value),\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.text_container,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.label,\n              htmlFor: \"outputText\",\n              children: \"System-generated Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"outputText\",\n              className: `${styles.output_box} ${styles.side_by_side}`,\n              value: outputText,\n              onChange: e => setOutputText(e.target.value),\n              readOnly: !isEditable,\n              placeholder: \"Output\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.button_container,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.save_btn} ${styles.text_btn}`,\n            onClick: handleSave,\n            disabled: !isEditable || isLoading // Save button only works if editable\n            ,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 3\n          }, this), !isEditable && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `${styles.edit_btn} ${styles.text_btn}`,\n            onClick: handleEdit,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n_s(Main, \"AdZGUHmfsaEZ9/oElFmTu+e6ziM=\");\n_c = Main;\nexport default Main;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n\n// \t};\n\n// \tconst handleSave = async () => {\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  console.log(\"User info from localStorage:\", user);\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\toutputText,\n// \t\t\teditedText\n// \t\t  };\n\n// \t\t  const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n// \t\t\talert(\"Simplification saved successfully!\");\n// \t\t  } else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n// \t  };\n\n// \tconst handleEdit = () => {\n// \t\t\talert(\"Output edited!\");\n// \t\t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tsetUploadedFileName(file.name); // Set the uploaded file name\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n// \treturn (\n// \t\t<>\n// \t\t  {/* Navbar */}\n// \t\t  <nav className={styles.navbar}>\n// \t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t  Logout\n// \t\t\t</button>\n// \t\t  </nav>\n\n// \t\t  {/* Main Content */}\n// \t\t  <div className={styles.main_container}>\n// \t\t\t{!isSubmitted ? (\n\n// \t\t\t\t\t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t  This app is about simplifying text for improved readability and\n// \t\t\t  accessibility. \n// \t\t\t  </p>\n// \t\t  <p>Upload a document or paste your text to get a simplified\n// \t\t\t  version with just a click.\n// \t\t\t</p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* OR Divider */}\n// \t\t\t\t<div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t{/* File Upload */}\n// \t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t  <label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t) : (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t)}\n// \t\t\t\t  </label>\n// \t\t\t\t  <input\n// \t\t\t\t\ttype=\"file\"\n// \t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t  />\n// \t\t\t\t</div>\n// \t\t\t\t</div>\n// \t \t\t\t</div>\n// \t\t\t\t{/* Submit Button */}\n// \t\t\t\t<button\n// \t\t\t\t  className={styles.submit_btn}\n// \t\t\t\t  onClick={handleSubmit}\n// \t\t\t\t  disabled={!inputText.trim() || isLoading}\n// \t\t\t\t>\n// \t\t\t\t  {isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t</button>\n// \t\t\t  </div>\n// \t\t\t) : (\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input and Output Boxes */}\n// \t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t  {/* Input Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\n// \t\t\t\t  {/* Output Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\t  System-generated Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"outputText\"\n// \t\t\t\t\t  className={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={outputText}\n// \t\t\t\t\t  onChange={(e) => setOutputText(e.target.value)}\n\n// \t\t\t\t\t  placeholder=\"Output\"\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t</button>\n// \t\t\t\t</div>\n\n// \t\t\t  </div>\n// \t\t\t)}\n// \t\t  </div>\n// \t\t</>\n// \t  );\n// \t};\t  \n// export default Main;\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n// import * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [isEditable, setIsEditable] = useState(true); // State for edit/save toggle\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\");\n\n// \tconst handleLogout = () => {\n// \tlocalStorage.removeItem(\"token\");\n// \twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \tif (!inputText.trim()) return;\n// \tsetIsLoading(true);\n\n// \ttry {\n// \t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\tmethod: \"POST\",\n// \t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\tbody: JSON.stringify({ prompt }),\n// \t\t});\n\n// \t\tconst data = await response.json();\n// \t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\tsetOutputText(cleanedResponse);\n// \t\tsetIsSubmitted(true);\n// \t} catch (error) {\n// \t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t}\n\n// \tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = async () => {\n// \ttry {\n// \t\tconst user = JSON.parse(localStorage.getItem(\"user\"));\n// \t\tif (!user) {\n// \t\talert(\"User not logged in!\");\n// \t\treturn;\n// \t\t}\n\n// \t\tconst payload = {\n// \t\tuserId: user._id,\n// \t\temail: user.email,\n// \t\tinputText,\n// \t\toutputText,\n// \t\t};\n\n// \t\tconst response = await fetch(\"http://localhost:8080/api/simplifications\", {\n// \t\tmethod: \"POST\",\n// \t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\tbody: JSON.stringify(payload),\n// \t\t});\n\n// \t\tif (response.ok) {\n// \t\talert(\"Simplification saved successfully!\");\n// \t\tsetIsEditable(false); // Make text boxes non-editable\n// \t\t} else {\n// \t\tconst error = await response.json();\n// \t\talert(error.message || \"Failed to save simplification.\");\n// \t\t}\n// \t} catch (error) {\n// \t\tconsole.error(\"Error saving simplification:\", error);\n// \t\talert(\"An error occurred. Please try again.\");\n// \t}\n// \t};\n\n// \tconst handleEdit = () => {\n// \tsetIsEditable(true); // Make text boxes editable\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \tconst file = event.target.files[0];\n// \tif (!file) return;\n\n// \ttry {\n// \t\tsetUploadedFileName(file.name);\n// \t\tconst fileReader = new FileReader();\n// \t\tfileReader.onload = async function () {\n// \t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\tlet text = \"\";\n\n// \t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\tconst page = await pdf.getPage(i);\n// \t\t\tconst textContent = await page.getTextContent();\n// \t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t}\n\n// \t\tsetInputText(text);\n// \t\t};\n// \t\tfileReader.readAsArrayBuffer(file);\n// \t} catch (error) {\n// \t\tconsole.error(\"Error reading PDF:\", error);\n// \t\talert(\"Failed to extract text from the PDF.\");\n// \t}\n// \t};\n\n// \treturn (\n// \t<>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t<h1>Text Simplification Study</h1>\n// \t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t</button>\n// \t\t</nav>\n//     {/* App Description */}\n\n// \t\t{/* Main Content */}\n// \t\t<div className={styles.main_container}>\n// \t\t{!isSubmitted ? (\n\n// \t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t  This app is about simplifying text for improved readability and\n// \t\t\t  accessibility. \n// \t\t\t  </p>\n// \t\t  <p>Upload a document or paste your text to get a simplified\n// \t\t\t  version with just a click.\n// \t\t\t</p>\n\n// \t\t\t<div className={styles.form_container}>\n\n// \t\t\t{/* Input Area */}\n// \t\t\t<div className={styles.input_area}>\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t</label>\n// \t\t\t\t<textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* OR Divider */}\n// \t\t\t\t<div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t{/* File Upload */}\n// \t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t<>\n// \t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t</>\n// \t\t\t\t\t) : (\n// \t\t\t\t\t<>\n// \t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t</>\n// \t\t\t\t\t)}\n// \t\t\t\t</label>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"file\"\n// \t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t/>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t</div>\n// \t\t\t{/* Submit Button */}\n// \t\t\t<button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t>\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplify Text\"}\n// \t\t\t</button>\n// \t\t\t</div>\n// \t\t) : (\n// \t\t\t<div className={styles.form_container}>\n\n// \t\t\t{/* Input and Output Boxes */}\n\n// \t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t</label>\n// \t\t\t\t<textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t\t//readOnly={!isEditable}\n// \t\t\t\t></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t</label>\n// \t\t\t\t<textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t></textarea>\n\n// \t\t\t\t</div>\n// \t\t\t</div>\n\n// \t\t\t{/* Toggle Between Save and Edit */}\n// \t\t\t{isEditable ? (\n// \t\t\t<button\n// \t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\tonClick={handleSave}\n// \t\t\tdisabled={isLoading}\n// \t\t>\n// \t\t\tSave\n// \t\t</button>\n// \t\t) : (\n// \t\t<button\n// \t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\tonClick={handleEdit}\n// \t\t>\n// \t\t\tEdit\n//    </button>\n// \t\t\t)}\n// \t\t\t</div>\n// \t\t)}\n// \t\t</div>\n// \t</>\n// \t);\n// };\n\n// export default Main;\n\n// };\t  \n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t{/* File Upload */}\n// \t\t\t\t\t\t\t{/* Drag and Drop Upload Area */}\n// \t\t\t\t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t\t\t\t\t\t<>File uploaded: <strong>{uploadedFileName}</strong></>\n// \t\t\t\t\t\t\t\t\t) : (\n// \t\t\t\t\t\t\t\t\t\t<>\n// \t\t\t\t\t\t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t\t\t\t\t</>\n// \t\t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t\t\t</label>\n// \t\t\t\t\t\t\t\t<input\n// \t\t\t\t\t\t\t\t\ttype=\"file\"\n// \t\t\t\t\t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t{/* File Upload */}\n// \t\t\t\t\t\t\t{/* Drag and Drop Upload Area */}\n// \t\t\t\t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t\t\t</label>\n// \t\t\t\t\t\t\t\t<input\n// \t\t\t\t\t\t\t\t\ttype=\"file\"\n// \t\t\t\t\t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t\t\t    >\n// \t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n// import * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t{/* File Upload */}\n// \t\t\t\t\t\t<div className={styles.upload_container}>\n// \t\t\t\t\t\t\t<input\n// \t\t\t\t\t\t\t\ttype=\"file\"\n// \t\t\t\t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\t\t\t\tclassName={styles.file_input}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n\n// Before upload button\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, '') || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useState","styles","pdfjsLib","jwtDecode","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","process","env","PUBLIC_URL","Main","_s","inputText","setInputText","outputText","setOutputText","isLoading","setIsLoading","isSubmitted","setIsSubmitted","isEditable","setIsEditable","uploadedFileName","setUploadedFileName","handleLogout","localStorage","removeItem","window","location","reload","handleSubmit","trim","_data$response","prompt","response","fetch","method","headers","body","JSON","stringify","data","json","cleanedResponse","replace","error","console","handleSave","user","parse","getItem","log","alert","payload","userId","_id","email","editedText","editableText","endpoint","ok","message","handleEdit","handleFileUpload","event","file","target","files","name","fileReader","FileReader","onload","typedArray","Uint8Array","result","pdf","getDocument","promise","text","i","numPages","page","getPage","textContent","getTextContent","items","map","item","str","join","readAsArrayBuffer","children","className","navbar","fileName","_jsxFileName","lineNumber","columnNumber","white_btn","onClick","main_container","description","form_container","input_area","text_container","label","htmlFor","id","textarea","placeholder","value","onChange","e","or_divider","upload_area","upload_box","type","accept","hidden_input","submit_btn","disabled","textareas_container","side_by_side","readOnly","output_box","button_container","save_btn","text_btn","edit_btn","_c","$RefreshReg$"],"sources":["/Users/anukumar/Desktop/Autumn 2024/Text Simplification/project_v2/client/src/components/Main/index.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport styles from \"./styles.module.css\";\nimport * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\nimport { jwtDecode } from \"jwt-decode\";\n\n\npdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\nconst Main = () => {\n\tconst [inputText, setInputText] = useState(\"\");\n\tconst [outputText, setOutputText] = useState(\"\");\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [isSubmitted, setIsSubmitted] = useState(false);\n\tconst [isEditable, setIsEditable] = useState(false); // For toggling edit mode\n\tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n  \n\tconst handleLogout = () => {\n\t  localStorage.removeItem(\"token\");\n\t  window.location.reload();\n\t};\n  \n\tconst handleSubmit = async () => {\n\t  if (!inputText.trim()) return;\n\t  setIsLoading(true);\n  \n\t  try {\n\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n  \n\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n\t\t  method: \"POST\",\n\t\t  headers: { \"Content-Type\": \"application/json\" },\n\t\t  body: JSON.stringify({ prompt }),\n\t\t});\n  \n\t\tconst data = await response.json();\n\t\tconst cleanedResponse =\n\t\t  data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n\t\tsetOutputText(cleanedResponse);\n\t\tsetIsSubmitted(true);\n\t  } catch (error) {\n\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n\t\tsetOutputText(\"An error occurred while fetching the response.\");\n\t  }\n  \n\t  setIsLoading(false);\n\t};\n  \n\tconst handleSave = async () => {\n\t  try {\n\t\tconst user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n\t\tconsole.log(\"User info from localStorage:\", user);\n\t\tif (!user) {\n\t\t  alert(\"User not logged in!\");\n\t\t  return;\n\t\t}\n  \n\t\tconst payload = {\n\t\t  userId: user._id,\n\t\t  email: user.email,\n\t\t  inputText,\n\t\t  ...(isEditable\n\t\t\t? { editedText: outputText } // Only send editedText if editing\n\t\t\t: { outputText, editableText: outputText }), // Save all fields on the first save\n\t\t};\n  \n\t\tconst endpoint = isEditable\n\t\t  ? \"http://localhost:8080/api/simplifications/edit\" // Endpoint for editing\n\t\t  : \"http://localhost:8080/api/simplifications\"; // Endpoint for initial save\n  \n\t\tconst response = await fetch(endpoint, {\n\t\t  method: \"POST\",\n\t\t  headers: { \"Content-Type\": \"application/json\" },\n\t\t  body: JSON.stringify(payload),\n\t\t});\n  \n\t\tif (response.ok) {\n\t\t  const data = await response.json();\n\t\t  alert(\n\t\t\tisEditable\n\t\t\t  ? \"Edited text saved successfully!\"\n\t\t\t  : \"Simplification saved successfully!\"\n\t\t  );\n\t\t  if (isEditable) setIsEditable(false); // Exit editing mode after saving edits\n\t\t} else {\n\t\t  const error = await response.json();\n\t\t  alert(error.message || \"Failed to save simplification.\");\n\t\t}\n\t  } catch (error) {\n\t\tconsole.error(\"Error saving simplification:\", error);\n\t\talert(\"An error occurred. Please try again.\");\n\t  }\n\t};\n  \n\tconst handleEdit = () => {\n\t  setIsEditable(true); // Enable editing mode\n\t  \n\t  //handleSave(); // Save the current output text\n\t};\n  \n\tconst handleFileUpload = async (event) => {\n\t  const file = event.target.files[0];\n\t  if (!file) return;\n  \n\t  try {\n\t\tsetUploadedFileName(file.name); // Set the uploaded file name\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = async function () {\n\t\t  const typedArray = new Uint8Array(this.result);\n  \n\t\t  const pdf = await pdfjsLib.getDocument(typedArray).promise;\n\t\t  let text = \"\";\n  \n\t\t  // Extract text from all pages\n\t\t  for (let i = 1; i <= pdf.numPages; i++) {\n\t\t\tconst page = await pdf.getPage(i);\n\t\t\tconst textContent = await page.getTextContent();\n\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n\t\t  }\n  \n\t\t  setInputText(text);\n\t\t};\n\t\tfileReader.readAsArrayBuffer(file);\n\t  } catch (error) {\n\t\tconsole.error(\"Error reading PDF:\", error);\n\t\talert(\"Failed to extract text from the PDF.\");\n\t  }\n\t};\n  \n\treturn (\n\t  <>\n\t\t{/* Navbar */}\n\t\t<nav className={styles.navbar}>\n\t\t  <h1>Text Simplification Study</h1>\n\t\t  <button className={styles.white_btn} onClick={handleLogout}>\n\t\t\tLogout\n\t\t  </button>\n\t\t</nav>\n  \n\t\t{/* Main Content */}\n\t\t<div className={styles.main_container}>\n\t\t  {!isSubmitted ? (\n\t\t\t<div className={styles.description}>\n\t\t\t  <p>\n\t\t\t\tThis app is about simplifying text for improved readability and\n\t\t\t\taccessibility.\n\t\t\t  </p>\n\t\t\t  <p>\n\t\t\t\tUpload a document or paste your text to get a simplified version\n\t\t\t\twith just a click.\n\t\t\t  </p>\n  \n\t\t\t  <div className={styles.form_container}>\n\t\t\t\t{/* Input Area */}\n\t\t\t\t<div className={styles.input_area}>\n\t\t\t\t  <div className={styles.text_container}>\n\t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n\t\t\t\t\t  Input Text\n\t\t\t\t\t</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t  id=\"inputText\"\n\t\t\t\t\t  className={styles.textarea}\n\t\t\t\t\t  placeholder=\"Original Text\"\n\t\t\t\t\t  value={inputText}\n\t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n\t\t\t\t\t></textarea>\n\t\t\t\t  </div>\n  \n\t\t\t\t  {/* OR Divider */}\n\t\t\t\t  <div className={styles.or_divider}>OR</div>\n  \n\t\t\t\t  {/* File Upload */}\n\t\t\t\t  <div className={styles.upload_area}>\n\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n\t\t\t\t\t  {uploadedFileName ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  File uploaded: <strong>{uploadedFileName}</strong>\n\t\t\t\t\t\t</>\n\t\t\t\t\t  ) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t  Click to Upload a PDF\n\t\t\t\t\t\t  <br />\n\t\t\t\t\t\t  <span>...or drag and drop a file.</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t  )}\n\t\t\t\t\t</label>\n\t\t\t\t\t<input\n\t\t\t\t\t  type=\"file\"\n\t\t\t\t\t  id=\"fileUpload\"\n\t\t\t\t\t  accept=\"application/pdf\"\n\t\t\t\t\t  onChange={handleFileUpload}\n\t\t\t\t\t  className={styles.hidden_input}\n\t\t\t\t\t/>\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t  </div>\n\t\t\t  {/* Submit Button */}\n\t\t\t  <button\n\t\t\t\tclassName={styles.submit_btn}\n\t\t\t\tonClick={handleSubmit}\n\t\t\t\tdisabled={!inputText.trim() || isLoading}\n\t\t\t  >\n\t\t\t\t{isLoading ? \"Processing...\" : \"Simplfiy Text\"}\n\t\t\t  </button>\n\t\t\t</div>\n\t\t  ) : (\n\t\t\t<div className={styles.form_container}>\n\t\t\t  {/* Input and Output Boxes */}\n\t\t\t  <div className={styles.textareas_container}>\n\t\t\t\t{/* Input Text Box */}\n\t\t\t\t<div className={styles.text_container}>\n\t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n\t\t\t\t\tInput Text\n\t\t\t\t  </label>\n\t\t\t\t  <textarea\n\t\t\t\t\tid=\"inputText\"\n\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n\t\t\t\t\tvalue={inputText}\n\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n\t\t\t\t\treadOnly\n\t\t\t\t  ></textarea>\n\t\t\t\t</div>\n  \n\t\t\t\t{/* Output Text Box */}\n\t\t\t\t<div className={styles.text_container}>\n\t\t\t\t  <label className={styles.label} htmlFor=\"outputText\">\n\t\t\t\t\tSystem-generated Text\n\t\t\t\t  </label>\n\t\t\t\t  <textarea\n\t\t\t\t\tid=\"outputText\"\n\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n\t\t\t\t\tvalue={outputText}\n\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n\t\t\t\t\treadOnly={!isEditable}\n\t\t\t\t\tplaceholder=\"Output\"\n\t\t\t\t  ></textarea>\n\t\t\t\t</div>\n\t\t\t  </div>\n\n\t\t\t  {/* <div className={styles.button_container}>\n\t\t\t\t<button\n\t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t>\n\t\t\t\t\tSave\n\t\t\t\t</button>\n\n\t\t\t\t<button\n\t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n\t\t\t\t\tonClick={handleEdit}\n\t\t\t\t>\n\t\t\t\t\tEdit\n\t\t\t\t</button>\n\t\t\t  </div> */}\n  \n  {/* Save and Edit Buttons */}\n  <div className={styles.button_container}>\n  <button\n    className={`${styles.save_btn} ${styles.text_btn}`}\n    onClick={handleSave}\n    disabled={!isEditable || isLoading} // Save button only works if editable\n  >\n    Save\n  </button>\n\n  {!isEditable && (\n    <button\n      className={`${styles.edit_btn} ${styles.text_btn}`}\n      onClick={handleEdit}\n    >\n      Edit\n    </button>\n  )}\n</div>\n\n\n\t\t\t  {/* Save and Edit Buttons */}\n\t\t\t  {/* <div className={styles.button_container}>\n\t\t\t\t{isEditable ? (\n\t\t\t\t  <button\n\t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n\t\t\t\t\tonClick={handleSave}\n\t\t\t\t  >\n\t\t\t\t\tSave\n\t\t\t\t  </button>\n\t\t\t\t) : (\n\t\t\t\t  <button\n\t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n\t\t\t\t\tonClick={handleEdit}\n\t\t\t\t  >\n\t\t\t\t\tEdit\n\t\t\t\t  </button>\n\t\t\t\t)}\n\t\t\t  </div> */}\n\t\t\t</div>\n\t\t  )}\n\t\t</div>\n\t  </>\n\t);\n  };\n  \nexport default Main;\n  \n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\"); // State for file name\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n\n\t\t\n// \t};\n\n\t\n\n// \tconst handleSave = async () => {\n// \t\ttry {\n// \t\t  const user = JSON.parse(localStorage.getItem(\"user\")); // Retrieve user info\n// \t\t  console.log(\"User info from localStorage:\", user);\n// \t\t  if (!user) {\n// \t\t\talert(\"User not logged in!\");\n// \t\t\treturn;\n// \t\t  }\n\t  \n// \t\t  const payload = {\n// \t\t\tuserId: user._id,\n// \t\t\temail: user.email,\n// \t\t\tinputText,\n// \t\t\toutputText,\n// \t\t\teditedText\n// \t\t  };\n\t  \n// \t\t  const response = await fetch(\"http://localhost:8080/api/simplifications\", {\n// \t\t\tmethod: \"POST\",\n// \t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\tbody: JSON.stringify(payload),\n// \t\t  });\n\t  \n// \t\t  if (response.ok) {\n// \t\t\tconst data = await response.json();\n// \t\t\talert(\"Simplification saved successfully!\");\n// \t\t  } else {\n// \t\t\tconst error = await response.json();\n// \t\t\talert(error.message || \"Failed to save simplification.\");\n// \t\t  }\n// \t\t} catch (error) {\n// \t\t  console.error(\"Error saving simplification:\", error);\n// \t\t  alert(\"An error occurred. Please try again.\");\n// \t\t}\n// \t  };\n\t  \n\n// \tconst handleEdit = () => {\n// \t\t\talert(\"Output edited!\");\n// \t\t};\n\t  \n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tsetUploadedFileName(file.name); // Set the uploaded file name\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n// \treturn (\n// \t\t<>\n// \t\t  {/* Navbar */}\n// \t\t  <nav className={styles.navbar}>\n// \t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t  Logout\n// \t\t\t</button>\n// \t\t  </nav>\n\t\n\n\t  \n\t\n// \t\t  {/* Main Content */}\n// \t\t  <div className={styles.main_container}>\n// \t\t\t{!isSubmitted ? (\n\n// \t\t\t\t\t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t  This app is about simplifying text for improved readability and\n// \t\t\t  accessibility. \n// \t\t\t  </p>\n// \t\t  <p>Upload a document or paste your text to get a simplified\n// \t\t\t  version with just a click.\n// \t\t\t</p>\n\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input Area */}\n// \t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t  <label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t  </label>\n// \t\t\t\t  <textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t  ></textarea>\n// \t\t\t\t</div>\n\t\t\t\t\n// \t\t\t\t{/* OR Divider */}\n// \t\t\t\t<div className={styles.or_divider}>OR</div>\n\t  \n// \t\t\t\t{/* File Upload */}\n// \t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t  <label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t) : (\n// \t\t\t\t\t  <>\n// \t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t  </>\n// \t\t\t\t\t)}\n// \t\t\t\t  </label>\n// \t\t\t\t  <input\n// \t\t\t\t\ttype=\"file\"\n// \t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t  />\n// \t\t\t\t</div>\n// \t\t\t\t</div>\n// \t \t\t\t</div>\n// \t\t\t\t{/* Submit Button */}\n// \t\t\t\t<button\n// \t\t\t\t  className={styles.submit_btn}\n// \t\t\t\t  onClick={handleSubmit}\n// \t\t\t\t  disabled={!inputText.trim() || isLoading}\n// \t\t\t\t>\n// \t\t\t\t  {isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t</button>\n// \t\t\t  </div>\n// \t\t\t) : (\n\t\t\n// \t\t\t  <div className={styles.form_container}>\n// \t\t\t\t{/* Input and Output Boxes */}\n// \t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t  {/* Input Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\t  Input Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"inputText\"\n// \t\t\t\t\t  className={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={inputText}\n// \t\t\t\t\t  onChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n\t  \n// \t\t\t\t  {/* Output Text Box */}\n// \t\t\t\t  <div className={styles.text_container}>\n// \t\t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\t  System-generated Text\n// \t\t\t\t\t</label>\n// \t\t\t\t\t<textarea\n// \t\t\t\t\t  id=\"outputText\"\n// \t\t\t\t\t  className={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t  value={outputText}\n// \t\t\t\t\t  onChange={(e) => setOutputText(e.target.value)}\n\t\t\t\n// \t\t\t\t\t  placeholder=\"Output\"\n// \t\t\t\t\t></textarea>\n// \t\t\t\t  </div>\n// \t\t\t\t</div>\n\n// \t\t\t\t<div className={styles.button_container}>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t>\n// \t\t\t\t\tSave\n// \t\t\t\t</button>\n// \t\t\t\t<button\n// \t\t\t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\t\t\tonClick={handleEdit}\n// \t\t\t\t>\n// \t\t\t\t\tEdit\n// \t\t\t\t</button>\n// \t\t\t\t</div>\n\n\n// \t\t\t  </div>\n// \t\t\t)}\n// \t\t  </div>\n// \t\t</>\n// \t  );\n// \t};\t  \n// export default Main;\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n// import * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n// \tconst [isEditable, setIsEditable] = useState(true); // State for edit/save toggle\n// \tconst [uploadedFileName, setUploadedFileName] = useState(\"\");\n\n// \tconst handleLogout = () => {\n// \tlocalStorage.removeItem(\"token\");\n// \twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \tif (!inputText.trim()) return;\n// \tsetIsLoading(true);\n\n// \ttry {\n// \t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\tmethod: \"POST\",\n// \t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\tbody: JSON.stringify({ prompt }),\n// \t\t});\n\n// \t\tconst data = await response.json();\n// \t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\tsetOutputText(cleanedResponse);\n// \t\tsetIsSubmitted(true);\n// \t} catch (error) {\n// \t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t}\n\n// \tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = async () => {\n// \ttry {\n// \t\tconst user = JSON.parse(localStorage.getItem(\"user\"));\n// \t\tif (!user) {\n// \t\talert(\"User not logged in!\");\n// \t\treturn;\n// \t\t}\n\n// \t\tconst payload = {\n// \t\tuserId: user._id,\n// \t\temail: user.email,\n// \t\tinputText,\n// \t\toutputText,\n// \t\t};\n\n// \t\tconst response = await fetch(\"http://localhost:8080/api/simplifications\", {\n// \t\tmethod: \"POST\",\n// \t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\tbody: JSON.stringify(payload),\n// \t\t});\n\n// \t\tif (response.ok) {\n// \t\talert(\"Simplification saved successfully!\");\n// \t\tsetIsEditable(false); // Make text boxes non-editable\n// \t\t} else {\n// \t\tconst error = await response.json();\n// \t\talert(error.message || \"Failed to save simplification.\");\n// \t\t}\n// \t} catch (error) {\n// \t\tconsole.error(\"Error saving simplification:\", error);\n// \t\talert(\"An error occurred. Please try again.\");\n// \t}\n// \t};\n\n// \tconst handleEdit = () => {\n// \tsetIsEditable(true); // Make text boxes editable\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \tconst file = event.target.files[0];\n// \tif (!file) return;\n\n// \ttry {\n// \t\tsetUploadedFileName(file.name);\n// \t\tconst fileReader = new FileReader();\n// \t\tfileReader.onload = async function () {\n// \t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\tlet text = \"\";\n\n// \t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\tconst page = await pdf.getPage(i);\n// \t\t\tconst textContent = await page.getTextContent();\n// \t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t}\n\n// \t\tsetInputText(text);\n// \t\t};\n// \t\tfileReader.readAsArrayBuffer(file);\n// \t} catch (error) {\n// \t\tconsole.error(\"Error reading PDF:\", error);\n// \t\talert(\"Failed to extract text from the PDF.\");\n// \t}\n// \t};\n\n// \treturn (\n// \t<>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t<h1>Text Simplification Study</h1>\n// \t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t</button>\n// \t\t</nav>\n//     {/* App Description */}\n\n// \t\t{/* Main Content */}\n// \t\t<div className={styles.main_container}>\n// \t\t{!isSubmitted ? (\n\t\t\t\n\n// \t\t\t<div className={styles.description}>\n// \t\t\t<p>\n// \t\t\t  This app is about simplifying text for improved readability and\n// \t\t\t  accessibility. \n// \t\t\t  </p>\n// \t\t  <p>Upload a document or paste your text to get a simplified\n// \t\t\t  version with just a click.\n// \t\t\t</p>\n\t\t\t\n\n// \t\t\t<div className={styles.form_container}>\n\t\n// \t\t\t{/* Input Area */}\n// \t\t\t<div className={styles.input_area}>\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t</label>\n// \t\t\t\t<textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* OR Divider */}\n// \t\t\t\t<div className={styles.or_divider}>OR</div>\n\n// \t\t\t\t{/* File Upload */}\n// \t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t<>\n// \t\t\t\t\t\tFile uploaded: <strong>{uploadedFileName}</strong>\n// \t\t\t\t\t</>\n// \t\t\t\t\t) : (\n// \t\t\t\t\t<>\n// \t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t<br />\n// \t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t</>\n// \t\t\t\t\t)}\n// \t\t\t\t</label>\n// \t\t\t\t<input\n// \t\t\t\t\ttype=\"file\"\n// \t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t/>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t</div>\n// \t\t\t{/* Submit Button */}\n// \t\t\t<button\n// \t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\tonClick={handleSubmit}\n// \t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t>\n// \t\t\t\t{isLoading ? \"Processing...\" : \"Simplify Text\"}\n// \t\t\t</button>\n// \t\t\t</div>\n// \t\t) : (\n// \t\t\t<div className={styles.form_container}>\n\n\n// \t\t\t{/* Input and Output Boxes */}\n\n\t\t\t\n// \t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t{/* Input Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"inputText\">\n// \t\t\t\t\tInput Text\n// \t\t\t\t</label>\n// \t\t\t\t<textarea\n// \t\t\t\t\tid=\"inputText\"\n// \t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={inputText}\n// \t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\treadOnly\n// \t\t\t\t\t//readOnly={!isEditable}\n// \t\t\t\t></textarea>\n// \t\t\t\t</div>\n\n// \t\t\t\t{/* Output Text Box */}\n// \t\t\t\t<div className={styles.text_container}>\n// \t\t\t\t<label className={styles.label} htmlFor=\"outputText\">\n// \t\t\t\t\tSystem-generated Text\n// \t\t\t\t</label>\n// \t\t\t\t<textarea\n// \t\t\t\t\tid=\"outputText\"\n// \t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\tvalue={outputText}\n// \t\t\t\t\tonChange={(e) => setOutputText(e.target.value)}\n// \t\t\t\t\treadOnly={!isEditable}\n// \t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t></textarea>\n\n\t\t\t\t\n// \t\t\t\t</div>\n// \t\t\t</div>\n\n// \t\t\t{/* Toggle Between Save and Edit */}\n// \t\t\t{isEditable ? (\n// \t\t\t<button\n// \t\t\tclassName={`${styles.save_btn} ${styles.text_btn}`}\n// \t\t\tonClick={handleSave}\n// \t\t\tdisabled={isLoading}\n// \t\t>\n// \t\t\tSave\n// \t\t</button>\n// \t\t) : (\n// \t\t<button\n// \t\t\tclassName={`${styles.edit_btn} ${styles.text_btn}`}\n// \t\t\tonClick={handleEdit}\n// \t\t>\n// \t\t\tEdit\n//    </button>\n// \t\t\t)}\n// \t\t\t</div>\n// \t\t)}\n// \t\t</div>\n// \t</>\n// \t);\n// };\n\n// export default Main;\n\t\n\t// };\t  \n\t  \n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t{/* File Upload */}\n// \t\t\t\t\t\t\t{/* Drag and Drop Upload Area */}\n// \t\t\t\t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t\t\t\t\t{uploadedFileName ? (\n// \t\t\t\t\t\t\t\t\t\t<>File uploaded: <strong>{uploadedFileName}</strong></>\n// \t\t\t\t\t\t\t\t\t) : (\n// \t\t\t\t\t\t\t\t\t\t<>\n// \t\t\t\t\t\t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t\t\t\t\t</>\n// \t\t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t\t\t</label>\n// \t\t\t\t\t\t\t\t<input\n// \t\t\t\t\t\t\t\t\ttype=\"file\"\n// \t\t\t\t\t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t<div className={styles.input_area}>\n// \t\t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t{/* File Upload */}\n// \t\t\t\t\t\t\t{/* Drag and Drop Upload Area */}\n// \t\t\t\t\t\t\t<div className={styles.upload_area}>\n// \t\t\t\t\t\t\t\t<label htmlFor=\"fileUpload\" className={styles.upload_box}>\n// \t\t\t\t\t\t\t\t\tClick to Upload a PDF\n// \t\t\t\t\t\t\t\t\t<br />\n// \t\t\t\t\t\t\t\t\t<span>...or drag and drop a file.</span>\n// \t\t\t\t\t\t\t\t</label>\n// \t\t\t\t\t\t\t\t<input\n// \t\t\t\t\t\t\t\t\ttype=\"file\"\n// \t\t\t\t\t\t\t\t\tid=\"fileUpload\"\n// \t\t\t\t\t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\t\t\t\t\tclassName={styles.hidden_input}\n// \t\t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\tdisabled={!inputText.trim() || isLoading}\n// \t\t\t\t\t    >\n// \t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n// import * as pdfjsLib from \"pdfjs-dist/legacy/build/pdf\";\n\n\n// pdfjsLib.GlobalWorkerOptions.workerSrc = `${process.env.PUBLIC_URL}/pdf.worker.mjs`;\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, \"\") || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \tconst handleFileUpload = async (event) => {\n// \t\tconst file = event.target.files[0];\n// \t\tif (!file) return;\n\n// \t\ttry {\n// \t\t\tconst fileReader = new FileReader();\n// \t\t\tfileReader.onload = async function () {\n// \t\t\t\tconst typedArray = new Uint8Array(this.result);\n\n// \t\t\t\tconst pdf = await pdfjsLib.getDocument(typedArray).promise;\n// \t\t\t\tlet text = \"\";\n\n// \t\t\t\t// Extract text from all pages\n// \t\t\t\tfor (let i = 1; i <= pdf.numPages; i++) {\n// \t\t\t\t\tconst page = await pdf.getPage(i);\n// \t\t\t\t\tconst textContent = await page.getTextContent();\n// \t\t\t\t\ttext += textContent.items.map((item) => item.str).join(\" \");\n// \t\t\t\t}\n\n// \t\t\t\tsetInputText(text);\n// \t\t\t};\n// \t\t\tfileReader.readAsArrayBuffer(file);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error reading PDF:\", error);\n// \t\t\talert(\"Failed to extract text from the PDF.\");\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t{/* File Upload */}\n// \t\t\t\t\t\t<div className={styles.upload_container}>\n// \t\t\t\t\t\t\t<input\n// \t\t\t\t\t\t\t\ttype=\"file\"\n// \t\t\t\t\t\t\t\taccept=\"application/pdf\"\n// \t\t\t\t\t\t\t\tonChange={handleFileUpload}\n// \t\t\t\t\t\t\t\tclassName={styles.file_input}\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n\n// Before upload button\n// import { useState } from \"react\";\n// import styles from \"./styles.module.css\";\n\n// const Main = () => {\n// \tconst [inputText, setInputText] = useState(\"\");\n// \tconst [outputText, setOutputText] = useState(\"\");\n// \tconst [isLoading, setIsLoading] = useState(false);\n// \tconst [isSubmitted, setIsSubmitted] = useState(false);\n\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \tconst handleSubmit = async () => {\n// \t\tif (!inputText.trim()) return;\n// \t\tsetIsLoading(true);\n\n// \t\ttry {\n// \t\t\tconst prompt = `Simplify the following text for better readability while preserving meaning:\\n\\n\"${inputText}\"`;\n\n// \t\t\tconst response = await fetch(\"http://localhost:5001/api/gpt4\", {\n// \t\t\t\tmethod: \"POST\",\n// \t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n// \t\t\t\tbody: JSON.stringify({ prompt }),\n// \t\t\t});\n\n// \t\t\tconst data = await response.json();\n// \t\t\tconst cleanedResponse = data?.response?.replace(/^\"|\"$/g, '') || \"No response received.\";\n// \t\t\tsetOutputText(cleanedResponse);\n// \t\t\tsetIsSubmitted(true);\n// \t\t} catch (error) {\n// \t\t\tconsole.error(\"Error fetching GPT-4 response:\", error);\n// \t\t\tsetOutputText(\"An error occurred while fetching the response.\");\n// \t\t}\n\n// \t\tsetIsLoading(false);\n// \t};\n\n// \tconst handleSave = () => {\n// \t\talert(\"Output saved!\");\n// \t};\n\n// \treturn (\n// \t\t<>\n// \t\t\t{/* Navbar */}\n// \t\t\t<nav className={styles.navbar}>\n// \t\t\t\t<h1>Text Simplification Study</h1>\n// \t\t\t\t<button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n\n// \t\t\t{/* Main Content */}\n// \t\t\t<div className={styles.main_container}>\n// \t\t\t\t{/* Conditional Rendering for Layout */}\n// \t\t\t\t{!isSubmitted ? (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Full-width Input Box */}\n// \t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\tclassName={styles.textarea}\n// \t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t{/* Centered Submit Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSubmit}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\t{isLoading ? \"Processing...\" : \"Submit\"}\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t) : (\n// \t\t\t\t\t<div className={styles.form_container}>\n// \t\t\t\t\t\t{/* Side-by-Side Input and Output */}\n// \t\t\t\t\t\t<div className={styles.textareas_container}>\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.textarea} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tplaceholder=\"Original Text\"\n// \t\t\t\t\t\t\t\tvalue={inputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setInputText(e.target.value)}\n// \t\t\t\t\t\t\t></textarea>\n\n// \t\t\t\t\t\t\t<textarea\n// \t\t\t\t\t\t\t\tclassName={`${styles.output_box} ${styles.side_by_side}`}\n// \t\t\t\t\t\t\t\tvalue={outputText}\n// \t\t\t\t\t\t\t\tonChange={(e) => setOutputText(e.target.value)} // Allow editing\n// \t\t\t\t\t\t\t\tplaceholder=\"Output\"\n// \t\t\t\t\t\t\t></textarea>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t{/* Centered Save Button */}\n// \t\t\t\t\t\t<button\n// \t\t\t\t\t\t\tclassName={styles.submit_btn}\n// \t\t\t\t\t\t\tonClick={handleSave}\n// \t\t\t\t\t\t\tdisabled={isLoading}\n// \t\t\t\t\t\t>\n// \t\t\t\t\t\t\tSave\n// \t\t\t\t\t\t</button>\n// \t\t\t\t\t</div>\n// \t\t\t\t)}\n// \t\t\t</div>\n// \t\t</>\n// \t);\n// };\n\n// export default Main;\n"],"mappings":"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;YACE0F,SAAS,EAAE,GAAG9F,MAAM,CAACkI,QAAQ,IAAIlI,MAAM,CAACiI,QAAQ,EAAG;YACnD5B,OAAO,EAAErC,UAAW;YAAA6B,QAAA,EACrB;UAED;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAqBE;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA,eACH,CAAC;AAEJ,CAAC;AAACtF,EAAA,CAnSED,IAAI;AAAAuH,EAAA,GAAJvH,IAAI;AAqSV,eAAeA,IAAI;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAuH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}