{"ast":null,"code":"var _jsxFileName = \"/Users/anukumar/Desktop/Spring2025/local-textsimplification/client/src/components/Survey/index.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import styles from \"./styles.module.css\";\n// import { saveAs } from \"file-saver\";\n// import DiffMatchPatch from \"diff-match-patch\";\n\n// // const handleFormSubmit = (e) => {\n// //   e.preventDefault();\n// //   alert(\"Survey responses saved\");\n// // };\n\n// const SurveyPage = () => {\n//   const { state } = useLocation();\n//   //const { email, inputText } = state || {};\n//   // const { email, inputText, outputText: initialOutputText, editHistory, saveHistory } = state || {};\n\n//   const {\n//       email,\n//       inputText,\n//       generatedText,        // new prop from Review\n//       finalText,            // new prop from Review\n//       editHistory,\n//       saveHistory = [],\n//     } = state || {};\n\n//   const [data, setData] = useState(null);\n\n//   const [showDifference1, setShowDifference1] = useState(false); // For Input Text vs System-generated Text\n//   const [showDifference2, setShowDifference2] = useState(false); // For System-generated Text vs Submitted Text\n//   const [diffHtml1, setDiffHtml1] = useState(\"\");\n//   const [diffHtml2, setDiffHtml2] = useState(\"\");\n\n//     // Store latest submitted text from history selection\n//     const [latestFinalText, setLatestFinalText] = useState(\"\");\n//     const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//     const [selectedVersion, setSelectedVersion] = useState(null);\n\n//   const navigate = useNavigate();\n\n//   // Word count states\n//   const [inputWordCount, setInputWordCount] = useState(0);\n//   const [outputWordCount, setOutputWordCount] = useState(0);\n//   const [submittedWordCount, setSubmittedWordCount] = useState(0);\n\n//   // Function to count words\n//   const countWords = (text) => {\n//     return text ? text.trim().split(/\\s+/).filter(Boolean).length : 0;\n//   };\n\n//     useEffect(() => {\n//         setInputWordCount   (countWords(inputText));\n//         setOutputWordCount  (countWords(generatedText));\n//         setSubmittedWordCount(countWords(latestFinalText));\n//      }, [inputText, generatedText, latestFinalText]);\n\n//   useEffect(() => {\n//     if (saveHistory.length > 0) {\n//       setLatestFinalText(saveHistory[saveHistory.length - 1]?.finalText || \"\");\n//       setSelectedVersion(saveHistory.length);\n//       setSubmittedWordCount(countWords(saveHistory[saveHistory.length - 1]?.finalText || \"\"));\n//     }\n//   }, [saveHistory]);\n\n//     useEffect(() => {\n//         if (saveHistory.length) {\n//           const last = saveHistory[saveHistory.length - 1]?.finalText || \"\";\n//           setLatestFinalText(last);\n//           setSelectedVersion(saveHistory.length);\n//         } else {\n//           setLatestFinalText(finalText);          // from Review\n//         }\n//       }, [saveHistory, finalText]);\n\n//   const handleHistoryClick = (index) => {\n//     setLatestFinalText(saveHistory[index].finalText);\n//     setSelectedVersion(index + 1);\n//   };\n\n//   useEffect(() => {\n//     const handleBackButton = (event) => {\n//       event.preventDefault();\n//       const confirmLeave = window.confirm(\n//         \"You have unsaved changes. Going back may result in losing your edits. Do you want to continue?\\n\\nIf you want to edit your already submitted text, copy it from here.\"\n//       );\n//       if (!confirmLeave) {\n//         window.history.pushState(null, \"\", window.location.href); // Prevent navigation\n//       } else {\n//         navigate(-1);\n//       }\n//     };\n\n//     // **Push a history state to detect back button click**\n//     window.history.pushState(null, \"\", window.location.href);\n//     window.addEventListener(\"popstate\", handleBackButton);\n\n//     return () => {\n//       window.removeEventListener(\"popstate\", handleBackButton);\n//     };\n//   }, [navigate]);\n\n//   const [submitted, setSubmitted] = useState(false);\n\n//   const [responses, setResponses] = useState({\n//     /* Likert-scale questions (radio buttons) */\n//     needs: null,\n//     easy: null,\n//     meaning: null,\n//     relevancy: null,\n//     grammar: null,\n//     guidelines: null,\n//     clarity: null,\n//     coherent: null,\n//     editing_effort: null,\n\n//     /* Free‑text questions (text‑areas)        */\n//     main_reasons: \"\",\n//     additional_comments: \"\",\n//   });\n\n//   // Handle input changes     \n\n//   // Handle input changes, allowing deselection\n// const handleOptionChange = (event) => {\n//   const { name, value } = event.target;\n//   setResponses((prevResponses) => ({\n//     ...prevResponses,\n//     [name]: prevResponses[name] === value ? \"\" : value,  // Toggle selection\n//   }));\n// };\n//   // Check if all required fields are filled\n//   // const isFormComplete = Object.values(responses).every((value) => value !== \"\" && value !== null);\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     navigate(\"/Login\"); \n//   };\n\n//   const handleCopy = (text) => {\n//     navigator.clipboard.writeText(text).then(\n//       () => {\n//         alert(\"Copied to clipboard!\");\n//       },\n//       (err) => {\n//         console.error(\"Failed to copy text:\", err);\n//       }\n//     );\n//   };\n\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     saveAs(blob, `${filename}.${format}`);\n//   };\n\n//   // survey/index.jsx\n// const handleFormSubmit = async (e) => {\n//   e.preventDefault();\n//   // if (!isFormComplete) return alert(\"Please answer every question.\");\n\n//   await fetch(\"/api/simplifications/survey\", {\n//     method : \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body   : JSON.stringify({ email, inputText, responses }),\n//   });\n\n//   setSubmitted(true);\n// };\n\n//   const handleTextChange = e => {\n//       const { name, value } = e.target;\n//       setResponses(prev => ({ ...prev, [name]: value }));\n//     };\n\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs);\n//   };\n\n//   if (!data)\n//     {return <p>Loading...</p>;}\n\n//   // const { inputText: input, outputText, editedText } = data;\n//   // const { inputText: input, outputText, latestText } = data;\n\n//   const input  = inputText;\n//   const output = generatedText;\n//   const latest = finalText;\n\n//   return (\n//     <>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t  {/* <h1>Text Simplification Tool</h1> */}\n//       <h1 \n//     onClick={() => window.location.href = \"http://localhost:5001/\"}\n//     style={{ cursor: \"pointer\" }} // Makes it look clickable\n//  \t\t>\n// \t\tText Simplification Tool</h1>\n// \t\t  <button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t  </button>\n// \t\t</nav>\n\n// <div className={styles.container}>\n//     <div className={`${styles.sidebar} ${isSidebarVisible ? styles.expanded : \"\"}`}>\n\n//          <button className={styles.historyIcon} onClick={() => setIsSidebarVisible(!isSidebarVisible)}>\n//            🕒 <p style={{ fontSize: \"15px\" }}>History</p>\n//          </button>\n//          {isSidebarVisible && (\n//            <div className={styles.historyContent}>\n//              <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>✖</button>\n//              <ul className={styles.historyList}>\n//                {saveHistory.map((entry, index) => (\n//                 //  <li key={index} className={styles.historyItem} onClick={() => handleHistoryClick(entry)}>\n//                 //    {entry.timestamp}\n//                 //  </li>\n//                 <li key={index} className={`${styles.historyItem} ${selectedVersion === index + 1 ? styles.activeVersion : \"\"}`} \n//                          onClick={() => handleHistoryClick(index)}>\n//                        Version {index + 1}\n//                 </li>\n\n//                ))}\n//              </ul>\n//            </div>\n//          )}\n//     </div>\n\n//     {!submitted ? (\n\n//     <div className={`${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`}>\n\n//           <div className={styles.description}>\n//             </div>\n\n//         <div className={styles.textareas_container}>\n\n//           {/* Input Text */}\n//           <div className={styles.text_container}>\n\n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"inputText\">\n//                 Input Text\n//               </label>\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(inputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(inputText, \"inputText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <p className={styles.wordCount}>Words: {inputWordCount}</p>\n\n//             <textarea\n//               id=\"inputText\"\n//               className={`${styles.textarea} ${styles.side_by_side}`}\n//               value={input} readOnly placeholder=\"Input Text\"\n//             ></textarea>\n//           </div>\n\n//             {/* system generated text Box */}\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"outputText\">\n//                 AI-generated Text\n//               </label>\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(outputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference1(!showDifference1)}\n//                 >\n//                   {showDifference1 ? \"Hide the comparison\" : \"Compare with input text\"}\n//                 </button>\n\n//               </div>\n//             </div>\n//             <p className={styles.wordCount}>Words: {outputWordCount}</p>\n\n//             <textarea\n//               id=\"outputText\"\n//               className={`${styles.output_box} ${styles.side_by_side}`}\n//               // value={initialOutputText}\n//               value={generatedText}\n//           readOnly\n//           placeholder=\"Initial AI-Generated Text\"\n\n//             ></textarea>\n//               {/* Difference Box appears right below System-generated Text */}\n//               {showDifference1 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>Input vs AI-generated Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml1 }}></div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//             <label className={styles.label} htmlFor=\"submittedText\">Final Revised Text</label>\n//             {/* <textarea className={styles.textarea} value={latestText} readOnly></textarea> */}\n\n//                   {/* <textarea value={latestFinalText} readOnly /> */}\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(latestFinalText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(latestFinalText, \"SubmittedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference2(!showDifference2)}\n//                 >\n//                   {showDifference2 ? \"Hide the comparison\" : \"Compare with AI-generated text\"}\n//                 </button>\n\n//               </div>\n//             </div>\n//             {/* <textarea id=\"EditedText\" className={`${styles.output_box} ${styles.side_by_side}`} value={latestFinalText} readOnly/>\n//             */}\n\n//                           <p className={styles.wordCount}>Words: {submittedWordCount}</p>\n\n//             <textarea\n//                         id=\"submittedText\"\n//                         className={`${styles.output_box} ${styles.side_by_side}`}\n//                         value={latestFinalText}\n//                         readOnly\n//                         placeholder=\"Final Revised Text\"\n//                       ></textarea>\n\n//                         {/* Difference Box appears right below Submitted Text */}\n//             {showDifference2 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>AI-generated vs Final revised Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml2 }}></div>\n//               </div>\n//             )}\n//           </div>\n\n//             <div className={styles.diff_container}>\n\n//             </div>\n\n//         </div>\n\n//             {/* <div> */}\n//         <div className={styles.surveyContainer}>\n\n//           <form className={styles.surveyForm} onSubmit={handleFormSubmit}>\n//                 <h2>Survey</h2>\n//                 <h3>Your feedback is valuable. Please try to answer all the questions.</h3>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text meet your needs? \n//                 {/* <span style={{ color: \"red\" }}>*</span> \n//               */}\n//               </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"needs\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"somewhat-meets\" onChange={handleOptionChange}  />  Somewhat meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"moderately-meets\" onChange={handleOptionChange}  />  Moderately meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"mostly-meets\" onChange={handleOptionChange}  />  Mostly meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"completely-meets\" onChange={handleOptionChange}  />  Completely meets</label>\n//               </div>\n//             </div>\n\n//           <div className={styles.surveyQuestion}>\n//               <label>Is the AI-generated text easy to understand?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"not-clear\" onChange={handleOptionChange}  />  Not easy at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"somewhat-clear\" onChange={handleOptionChange}  />  Somewhat easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"moderately-clear\" onChange={handleOptionChange}  />  Moderately easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"mostly-clear\" onChange={handleOptionChange}  />  Mostly easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"very-clear\" onChange={handleOptionChange}  />  Completely easy\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text preserve the original meaning? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"somewhat-preserves\" onChange={handleOptionChange}  />  Somewhat preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"moderately-preserves\" onChange={handleOptionChange}  />  Moderately preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"mostly-preserves\" onChange={handleOptionChange}  />  Mostly preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"completely-preserves\" onChange={handleOptionChange}  />  Completely preserves\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text contain false or irrelevant information?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"not-at-all\" onChange={handleOptionChange}  />  A lot of inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"somewhat\" onChange={handleOptionChange}  />  Several inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"moderately\" onChange={handleOptionChange}  />  Some minor inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"mostly\" onChange={handleOptionChange}  />  Mostly accurate\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"completely\" onChange={handleOptionChange}  />  Completely accurate\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Are there spelling or grammar mistakes in the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"many-errors\" onChange={handleOptionChange}  />  Many mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"several-errors\" onChange={handleOptionChange}  />  Several mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"some-errors\" onChange={handleOptionChange}  />  Some mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"few-errors\" onChange={handleOptionChange}  />  Few mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"no-errors\" onChange={handleOptionChange}  />  No mistakes\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text avoid difficult words?     </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"guidelines\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text use short sentences and clear headings?    </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"clarity\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text flow logically from start to finish? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"coherent\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>How much effort did you need to edit the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"editing_effort\" value=\"many-errors\" checked={responses.editing_effort === \"many-errors\"} onChange={handleOptionChange}/>  A lot of effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"several-errors\" checked={responses.editing_effort === \"several-errors\"} onChange={handleOptionChange}/>  Significant effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"some-errors\" checked={responses.editing_effort === \"some-errors\"} onChange={handleOptionChange}/>  Moderate effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"few-errors\" checked={responses.editing_effort === \"few-errors\"} onChange={handleOptionChange}/>  Minimal effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"no-errors\" checked={responses.editing_effort === \"no-errors\"} onChange={handleOptionChange}/>  No effort at all</label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>If you edited the AI-generated text, what were your main reasons for it?</label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"main_reasons\"\n//                 rows=\"3\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.main_reasons}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Do you have any additional comments about the AI-generated text? </label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"additional_comments\"\n//                 rows=\"4\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.additional_comments}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n\n//             <div>\n//               <button className={styles.submitButton} type=\"submit\" >Submit</button>\n//             </div>\n\n//           </form>\n\n//         </div>\n//   {/* disabled={!isFormComplete} */}\n//   </div>\n\n// ) : (\n//   // Thank You Message & Redirect\n//   <div className={styles.thankYouContainer}>\n//     <h2>Thank You!</h2>\n//     <p>Your responses have been saved. We appreciate your feedback.</p>\n//     <button\n//       className={styles.redirectButton}\n//       onClick={() => navigate(\"/simplify\", { replace: true })}\n//     >\n//       Start Another Simplification\n//     </button>\n//   </div>\n// )}\n// </div>\n\n// </>\n//   );\n// };\n\n// export default SurveyPage;\n\n// src/components/Survey/index.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport DiffMatchPatch from \"diff-match-patch\";\nimport { saveAs } from \"file-saver\";\nimport styles from \"./styles.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dmp = new DiffMatchPatch();\nconst wordCount = txt => txt ? txt.trim().split(/\\s+/).filter(Boolean).length : 0;\nexport default function SurveyPage() {\n  _s();\n  /* ------------------------------------------------------------------ */\n  /* 1.  Data received from Review.jsx                                  */\n  /* ------------------------------------------------------------------ */\n  const {\n    email,\n    inputText = \"\",\n    // original user input\n    generatedText = \"\",\n    // AI‑generated text (v1)\n    finalText = \"\",\n    // text that was on screen when user hit “Save”\n    saveHistory = [] // optional array of previous Save clicks\n  } = useLocation().state || {};\n\n  /* ------------------------------------------------------------------ */\n  /* 2.  Local state – side‑bar, diff toggles, survey answers, etc.     */\n  /* ------------------------------------------------------------------ */\n  const [latestFinal, setLatestFinal] = useState(finalText);\n  const [selectedVersion, setSelectedVersion] = useState(saveHistory.length); // 1‑based\n  const [showDiffIn, setShowDiffIn] = useState(false); // input ↔ AI\n  const [showDiffOut, setShowDiffOut] = useState(false); // AI ↔ final\n  const [diffHtmlIn, setDiffHtmlIn] = useState(\"\");\n  const [diffHtmlOut, setDiffHtmlOut] = useState(\"\");\n  const [sidebar, setSidebar] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const navigate = useNavigate();\n\n  /* ------------------------------------------------------------------ */\n  /* 3.  Derived values (word counts, diffs)                            */\n  /* ------------------------------------------------------------------ */\n  useEffect(() => {\n    setDiffHtmlIn(dmp.diff_prettyHtml(dmp.diff_main(inputText, generatedText)));\n    setDiffHtmlOut(dmp.diff_prettyHtml(dmp.diff_main(generatedText, latestFinal)));\n  }, [inputText, generatedText, latestFinal]);\n  const inputWords = wordCount(inputText);\n  const generatedWords = wordCount(generatedText);\n  const finalWords = wordCount(latestFinal);\n\n  /* ------------------------------------------------------------------ */\n  /* 4.  Survey form state                                              */\n  /* ------------------------------------------------------------------ */\n  const [answers, setAnswers] = useState({\n    needs: null,\n    easy: null,\n    meaning: null,\n    relevancy: null,\n    grammar: null,\n    guidelines: null,\n    clarity: null,\n    coherent: null,\n    editing_effort: null,\n    main_reasons: \"\",\n    additional_comments: \"\"\n  });\n  const handleRadio = e => setAnswers(p => ({\n    ...p,\n    [e.target.name]: p[e.target.name] === e.target.value ? null : e.target.value\n  }));\n  const handleText = e => setAnswers(p => ({\n    ...p,\n    [e.target.name]: e.target.value\n  }));\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await fetch(\"/api/simplifications/survey\", {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        inputText,\n        responses: answers\n      })\n    });\n    setSubmitted(true);\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* 5.  Version‑history side‑bar                                       */\n  /* ------------------------------------------------------------------ */\n  const pickVersion = idx => {\n    setLatestFinal(saveHistory[idx].finalText);\n    setSelectedVersion(idx + 1);\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* 6.  Early‑exit if router‑state missing (e.g. user refreshed page)  */\n  /* ------------------------------------------------------------------ */\n  if (!email) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      padding: 40\n    },\n    children: \"No session data found. Please restart a simplification.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 702,\n    columnNumber: 22\n  }, this);\n\n  /* ------------------------------------------------------------------ */\n  /* 7.  Render                                                         */\n  /* ------------------------------------------------------------------ */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: styles.navbar,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        onClick: () => navigate(\"/\"),\n        style: {\n          cursor: \"pointer\"\n        },\n        children: \"Text\\xA0Simplification\\xA0Tool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.white_btn,\n        onClick: () => {\n          localStorage.removeItem(\"token\");\n          navigate(\"/Login\");\n        },\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.sidebar} ${sidebar ? styles.expanded : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.historyIcon,\n          onClick: () => setSidebar(s => !s),\n          children: [\"\\uD83D\\uDD52 \", /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: 15\n            },\n            children: \"History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 11\n        }, this), sidebar && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.historyContent,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: styles.closeButton,\n            onClick: () => setSidebar(false),\n            children: \"\\u2716\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: styles.historyList,\n            children: saveHistory.map((v, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `${styles.historyItem} ${selectedVersion === i + 1 ? styles.activeVersion : \"\"}`,\n              onClick: () => pickVersion(i),\n              children: [\"Version\\xA0\", i + 1]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 725,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.mainContent} ${sidebar ? styles.withSidebar : \"\"}`,\n        children: !submitted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.textareas_container,\n            children: [/*#__PURE__*/_jsxDEV(TextBox, {\n              label: \"Input Text\",\n              value: inputText,\n              words: inputWords,\n              onCopy: () => navigator.clipboard.writeText(inputText),\n              filename: \"InputText\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n              label: \"AI\\u2011generated Text\",\n              value: generatedText,\n              words: generatedWords,\n              onCopy: () => navigator.clipboard.writeText(generatedText),\n              filename: \"GeneratedText\",\n              toggleDiff: {\n                shown: showDiffIn,\n                label: showDiffIn ? \"Hide comparison\" : \"Compare with input\",\n                onClick: () => setShowDiffIn(s => !s)\n              },\n              children: showDiffIn && /*#__PURE__*/_jsxDEV(DiffBox, {\n                html: diffHtmlIn,\n                title: \"Input\\xA0vs\\xA0AI\\u2011generated\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 34\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n              label: \"Final\\xA0Revised Text\",\n              value: latestFinal,\n              words: finalWords,\n              onCopy: () => navigator.clipboard.writeText(latestFinal),\n              filename: \"FinalText\",\n              toggleDiff: {\n                shown: showDiffOut,\n                label: showDiffOut ? \"Hide comparison\" : \"Compare with AI‑generated\",\n                onClick: () => setShowDiffOut(s => !s)\n              },\n              children: showDiffOut && /*#__PURE__*/_jsxDEV(DiffBox, {\n                html: diffHtmlOut,\n                title: \"AI\\u2011generated\\xA0vs\\xA0Final\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 35\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(SurveyForm, {\n            answers: answers,\n            onRadio: handleRadio,\n            onText: handleText,\n            onSubmit: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(ThankYou, {\n          onRestart: () => navigate(\"/simplify\", {\n            replace: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 741,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n/* ------------------------------------------------------------------ */\n/* Helper sub‑components                                              */\n/* ------------------------------------------------------------------ */\n_s(SurveyPage, \"zsscLHv0K7J/VkXQBhLBrwY0Xds=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = SurveyPage;\nfunction TextBox({\n  label,\n  value,\n  words,\n  onCopy,\n  filename,\n  toggleDiff,\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.text_container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.labelWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.label,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.copyIcon,\n          onClick: onCopy,\n          children: \"\\uD83D\\uDCCB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.copyIcon,\n          onClick: () => saveAs(new Blob([value], {\n            type: \"text/plain;charset=utf-8\"\n          }), `${filename}.txt`),\n          children: \"\\uD83D\\uDCE5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 815,\n          columnNumber: 11\n        }, this), toggleDiff && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.toggleDiffBtn,\n          onClick: toggleDiff.onClick,\n          children: toggleDiff.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.wordCount,\n      children: [\"Words: \", words]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      readOnly: true,\n      value: value,\n      className: `${styles.output_box} ${styles.side_by_side}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 810,\n    columnNumber: 5\n  }, this);\n}\n_c2 = TextBox;\nconst DiffBox = ({\n  html,\n  title\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: styles.diff_box,\n  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n    className: styles.label,\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 835,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.diff_output,\n    dangerouslySetInnerHTML: {\n      __html: html\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 836,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 834,\n  columnNumber: 3\n}, this);\n_c3 = DiffBox;\nfunction SurveyForm({\n  answers,\n  onRadio,\n  onText,\n  onSubmit\n}) {\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.surveyForm,\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Survey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 843,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Your feedback is valuable (all questions optional).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Likert, {\n      name: \"needs\",\n      label: \"Does the AI\\u2011generated text meet your needs?\",\n      onChange: onRadio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.surveyQuestion,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Main reasons for editing (optional):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 851,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"main_reasons\",\n        rows: \"3\",\n        value: answers.main_reasons,\n        onChange: onText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.submitButton,\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 855,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 842,\n    columnNumber: 5\n  }, this);\n}\n_c4 = SurveyForm;\nconst Likert = ({\n  name,\n  label,\n  onChange\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: styles.surveyQuestion,\n  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 862,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.surveyOptions,\n    children: [\"1\", \"2\", \"3\", \"4\", \"5\"].map(v => /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"radio\",\n        name: name,\n        value: v,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 24\n      }, this), \"\\xA0\", v]\n    }, v, true, {\n      fileName: _jsxFileName,\n      lineNumber: 865,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 863,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 861,\n  columnNumber: 3\n}, this);\n_c5 = Likert;\nconst ThankYou = ({\n  onRestart\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: styles.thankYouContainer,\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Thank\\xA0you!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 873,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Your responses have been saved.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 874,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    className: styles.redirectButton,\n    onClick: onRestart,\n    children: \"Start another simplification\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 875,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 872,\n  columnNumber: 3\n}, this);\n_c6 = ThankYou;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"SurveyPage\");\n$RefreshReg$(_c2, \"TextBox\");\n$RefreshReg$(_c3, \"DiffBox\");\n$RefreshReg$(_c4, \"SurveyForm\");\n$RefreshReg$(_c5, \"Likert\");\n$RefreshReg$(_c6, \"ThankYou\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","DiffMatchPatch","saveAs","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","dmp","wordCount","txt","trim","split","filter","Boolean","length","SurveyPage","_s","email","inputText","generatedText","finalText","saveHistory","state","latestFinal","setLatestFinal","selectedVersion","setSelectedVersion","showDiffIn","setShowDiffIn","showDiffOut","setShowDiffOut","diffHtmlIn","setDiffHtmlIn","diffHtmlOut","setDiffHtmlOut","sidebar","setSidebar","submitted","setSubmitted","navigate","diff_prettyHtml","diff_main","inputWords","generatedWords","finalWords","answers","setAnswers","needs","easy","meaning","relevancy","grammar","guidelines","clarity","coherent","editing_effort","main_reasons","additional_comments","handleRadio","e","p","target","name","value","handleText","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","responses","pickVersion","idx","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","className","navbar","onClick","cursor","white_btn","localStorage","removeItem","container","expanded","historyIcon","s","fontSize","historyContent","closeButton","historyList","map","v","i","historyItem","activeVersion","mainContent","withSidebar","textareas_container","TextBox","label","words","onCopy","navigator","clipboard","writeText","filename","toggleDiff","shown","DiffBox","html","title","SurveyForm","onRadio","onText","onSubmit","ThankYou","onRestart","replace","_c","text_container","labelWrapper","actions","copyIcon","Blob","type","toggleDiffBtn","readOnly","output_box","side_by_side","_c2","diff_box","diff_output","dangerouslySetInnerHTML","__html","_c3","surveyForm","Likert","onChange","surveyQuestion","rows","submitButton","_c4","surveyOptions","_c5","thankYouContainer","redirectButton","_c6","$RefreshReg$"],"sources":["/Users/anukumar/Desktop/Spring2025/local-textsimplification/client/src/components/Survey/index.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import styles from \"./styles.module.css\";\n// import { saveAs } from \"file-saver\";\n// import DiffMatchPatch from \"diff-match-patch\";\n\n// // const handleFormSubmit = (e) => {\n// //   e.preventDefault();\n// //   alert(\"Survey responses saved\");\n// // };\n\n// const SurveyPage = () => {\n//   const { state } = useLocation();\n//   //const { email, inputText } = state || {};\n//   // const { email, inputText, outputText: initialOutputText, editHistory, saveHistory } = state || {};\n\n//   const {\n//       email,\n//       inputText,\n//       generatedText,        // new prop from Review\n//       finalText,            // new prop from Review\n//       editHistory,\n//       saveHistory = [],\n//     } = state || {};\n\n//   const [data, setData] = useState(null);\n       \n//   const [showDifference1, setShowDifference1] = useState(false); // For Input Text vs System-generated Text\n//   const [showDifference2, setShowDifference2] = useState(false); // For System-generated Text vs Submitted Text\n//   const [diffHtml1, setDiffHtml1] = useState(\"\");\n//   const [diffHtml2, setDiffHtml2] = useState(\"\");\n\n\n//     // Store latest submitted text from history selection\n//     const [latestFinalText, setLatestFinalText] = useState(\"\");\n//     const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//     const [selectedVersion, setSelectedVersion] = useState(null);\n    \n\n//   const navigate = useNavigate();\n\n//   // Word count states\n//   const [inputWordCount, setInputWordCount] = useState(0);\n//   const [outputWordCount, setOutputWordCount] = useState(0);\n//   const [submittedWordCount, setSubmittedWordCount] = useState(0);\n\n//   // Function to count words\n//   const countWords = (text) => {\n//     return text ? text.trim().split(/\\s+/).filter(Boolean).length : 0;\n//   };\n\n\n\n//     useEffect(() => {\n//         setInputWordCount   (countWords(inputText));\n//         setOutputWordCount  (countWords(generatedText));\n//         setSubmittedWordCount(countWords(latestFinalText));\n//      }, [inputText, generatedText, latestFinalText]);\n\n//   useEffect(() => {\n//     if (saveHistory.length > 0) {\n//       setLatestFinalText(saveHistory[saveHistory.length - 1]?.finalText || \"\");\n//       setSelectedVersion(saveHistory.length);\n//       setSubmittedWordCount(countWords(saveHistory[saveHistory.length - 1]?.finalText || \"\"));\n//     }\n//   }, [saveHistory]);\n\n//     useEffect(() => {\n//         if (saveHistory.length) {\n//           const last = saveHistory[saveHistory.length - 1]?.finalText || \"\";\n//           setLatestFinalText(last);\n//           setSelectedVersion(saveHistory.length);\n//         } else {\n//           setLatestFinalText(finalText);          // from Review\n//         }\n//       }, [saveHistory, finalText]);\n\n  \n//   const handleHistoryClick = (index) => {\n//     setLatestFinalText(saveHistory[index].finalText);\n//     setSelectedVersion(index + 1);\n//   };\n\n//   useEffect(() => {\n//     const handleBackButton = (event) => {\n//       event.preventDefault();\n//       const confirmLeave = window.confirm(\n//         \"You have unsaved changes. Going back may result in losing your edits. Do you want to continue?\\n\\nIf you want to edit your already submitted text, copy it from here.\"\n//       );\n//       if (!confirmLeave) {\n//         window.history.pushState(null, \"\", window.location.href); // Prevent navigation\n//       } else {\n//         navigate(-1);\n//       }\n//     };\n\n\n//     // **Push a history state to detect back button click**\n//     window.history.pushState(null, \"\", window.location.href);\n//     window.addEventListener(\"popstate\", handleBackButton);\n\n//     return () => {\n//       window.removeEventListener(\"popstate\", handleBackButton);\n//     };\n//   }, [navigate]);\n  \n//   const [submitted, setSubmitted] = useState(false);\n\n\n//   const [responses, setResponses] = useState({\n//     /* Likert-scale questions (radio buttons) */\n//     needs: null,\n//     easy: null,\n//     meaning: null,\n//     relevancy: null,\n//     grammar: null,\n//     guidelines: null,\n//     clarity: null,\n//     coherent: null,\n//     editing_effort: null,\n  \n//     /* Free‑text questions (text‑areas)        */\n//     main_reasons: \"\",\n//     additional_comments: \"\",\n//   });\n\n//   // Handle input changes     \n\n//   // Handle input changes, allowing deselection\n// const handleOptionChange = (event) => {\n//   const { name, value } = event.target;\n//   setResponses((prevResponses) => ({\n//     ...prevResponses,\n//     [name]: prevResponses[name] === value ? \"\" : value,  // Toggle selection\n//   }));\n// };\n//   // Check if all required fields are filled\n//   // const isFormComplete = Object.values(responses).every((value) => value !== \"\" && value !== null);\n\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     navigate(\"/Login\"); \n//   };\n  \n//   const handleCopy = (text) => {\n//     navigator.clipboard.writeText(text).then(\n//       () => {\n//         alert(\"Copied to clipboard!\");\n//       },\n//       (err) => {\n//         console.error(\"Failed to copy text:\", err);\n//       }\n//     );\n//   };\n\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     saveAs(blob, `${filename}.${format}`);\n//   };\n\n//   // survey/index.jsx\n// const handleFormSubmit = async (e) => {\n//   e.preventDefault();\n//   // if (!isFormComplete) return alert(\"Please answer every question.\");\n\n//   await fetch(\"/api/simplifications/survey\", {\n//     method : \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body   : JSON.stringify({ email, inputText, responses }),\n//   });\n\n//   setSubmitted(true);\n// };\n\n\n//   const handleTextChange = e => {\n//       const { name, value } = e.target;\n//       setResponses(prev => ({ ...prev, [name]: value }));\n//     };\n\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs);\n//   };\n\n\n\n//   if (!data)\n//     {return <p>Loading...</p>;}\n\n//   // const { inputText: input, outputText, editedText } = data;\n//   // const { inputText: input, outputText, latestText } = data;\n\n//   const input  = inputText;\n//   const output = generatedText;\n//   const latest = finalText;\n\n//   return (\n//     <>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t  {/* <h1>Text Simplification Tool</h1> */}\n//       <h1 \n//     onClick={() => window.location.href = \"http://localhost:5001/\"}\n//     style={{ cursor: \"pointer\" }} // Makes it look clickable\n//  \t\t>\n// \t\tText Simplification Tool</h1>\n// \t\t  <button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t  </button>\n// \t\t</nav>\n\n\n// <div className={styles.container}>\n//     <div className={`${styles.sidebar} ${isSidebarVisible ? styles.expanded : \"\"}`}>\n         \n//          <button className={styles.historyIcon} onClick={() => setIsSidebarVisible(!isSidebarVisible)}>\n//            🕒 <p style={{ fontSize: \"15px\" }}>History</p>\n//          </button>\n//          {isSidebarVisible && (\n//            <div className={styles.historyContent}>\n//              <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>✖</button>\n//              <ul className={styles.historyList}>\n//                {saveHistory.map((entry, index) => (\n//                 //  <li key={index} className={styles.historyItem} onClick={() => handleHistoryClick(entry)}>\n//                 //    {entry.timestamp}\n//                 //  </li>\n//                 <li key={index} className={`${styles.historyItem} ${selectedVersion === index + 1 ? styles.activeVersion : \"\"}`} \n//                          onClick={() => handleHistoryClick(index)}>\n//                        Version {index + 1}\n//                 </li>\n\n//                ))}\n//              </ul>\n//            </div>\n//          )}\n//     </div>\n\n\n//     {!submitted ? (\n\n//     <div className={`${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`}>\n\n//           <div className={styles.description}>\n//             </div>\n\n\n//         <div className={styles.textareas_container}>\n\n//           {/* Input Text */}\n//           <div className={styles.text_container}>\n            \n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"inputText\">\n//                 Input Text\n//               </label>\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(inputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(inputText, \"inputText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <p className={styles.wordCount}>Words: {inputWordCount}</p>\n\n//             <textarea\n//               id=\"inputText\"\n//               className={`${styles.textarea} ${styles.side_by_side}`}\n//               value={input} readOnly placeholder=\"Input Text\"\n//             ></textarea>\n//           </div>\n\n//             {/* system generated text Box */}\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"outputText\">\n//                 AI-generated Text\n//               </label>\n\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(outputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference1(!showDifference1)}\n//                 >\n//                   {showDifference1 ? \"Hide the comparison\" : \"Compare with input text\"}\n//                 </button>\n\n//               </div>\n//             </div>\n//             <p className={styles.wordCount}>Words: {outputWordCount}</p>\n\n//             <textarea\n//               id=\"outputText\"\n//               className={`${styles.output_box} ${styles.side_by_side}`}\n//               // value={initialOutputText}\n//               value={generatedText}\n//           readOnly\n//           placeholder=\"Initial AI-Generated Text\"\n\n//             ></textarea>\n//               {/* Difference Box appears right below System-generated Text */}\n//               {showDifference1 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>Input vs AI-generated Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml1 }}></div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//             <label className={styles.label} htmlFor=\"submittedText\">Final Revised Text</label>\n//             {/* <textarea className={styles.textarea} value={latestText} readOnly></textarea> */}\n\n//                   {/* <textarea value={latestFinalText} readOnly /> */}\n\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(latestFinalText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(latestFinalText, \"SubmittedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference2(!showDifference2)}\n//                 >\n//                   {showDifference2 ? \"Hide the comparison\" : \"Compare with AI-generated text\"}\n//                 </button>\n\n//               </div>\n//             </div>\n//             {/* <textarea id=\"EditedText\" className={`${styles.output_box} ${styles.side_by_side}`} value={latestFinalText} readOnly/>\n//             */}\n                        \n//                           <p className={styles.wordCount}>Words: {submittedWordCount}</p>\n\n//             <textarea\n//                         id=\"submittedText\"\n//                         className={`${styles.output_box} ${styles.side_by_side}`}\n//                         value={latestFinalText}\n//                         readOnly\n//                         placeholder=\"Final Revised Text\"\n//                       ></textarea>\n\n//                         {/* Difference Box appears right below Submitted Text */}\n//             {showDifference2 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>AI-generated vs Final revised Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml2 }}></div>\n//               </div>\n//             )}\n//           </div>\n            \n        \n\n//             <div className={styles.diff_container}>\n\n//             </div>\n        \n//         </div>\n\n//             {/* <div> */}\n//         <div className={styles.surveyContainer}>\n\n//           <form className={styles.surveyForm} onSubmit={handleFormSubmit}>\n//                 <h2>Survey</h2>\n//                 <h3>Your feedback is valuable. Please try to answer all the questions.</h3>\n\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text meet your needs? \n//                 {/* <span style={{ color: \"red\" }}>*</span> \n//               */}\n//               </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"needs\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"somewhat-meets\" onChange={handleOptionChange}  />  Somewhat meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"moderately-meets\" onChange={handleOptionChange}  />  Moderately meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"mostly-meets\" onChange={handleOptionChange}  />  Mostly meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"completely-meets\" onChange={handleOptionChange}  />  Completely meets</label>\n//               </div>\n//             </div>\n\n//           <div className={styles.surveyQuestion}>\n//               <label>Is the AI-generated text easy to understand?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"not-clear\" onChange={handleOptionChange}  />  Not easy at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"somewhat-clear\" onChange={handleOptionChange}  />  Somewhat easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"moderately-clear\" onChange={handleOptionChange}  />  Moderately easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"mostly-clear\" onChange={handleOptionChange}  />  Mostly easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"very-clear\" onChange={handleOptionChange}  />  Completely easy\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text preserve the original meaning? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"somewhat-preserves\" onChange={handleOptionChange}  />  Somewhat preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"moderately-preserves\" onChange={handleOptionChange}  />  Moderately preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"mostly-preserves\" onChange={handleOptionChange}  />  Mostly preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"completely-preserves\" onChange={handleOptionChange}  />  Completely preserves\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text contain false or irrelevant information?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"not-at-all\" onChange={handleOptionChange}  />  A lot of inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"somewhat\" onChange={handleOptionChange}  />  Several inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"moderately\" onChange={handleOptionChange}  />  Some minor inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"mostly\" onChange={handleOptionChange}  />  Mostly accurate\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"completely\" onChange={handleOptionChange}  />  Completely accurate\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Are there spelling or grammar mistakes in the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"many-errors\" onChange={handleOptionChange}  />  Many mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"several-errors\" onChange={handleOptionChange}  />  Several mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"some-errors\" onChange={handleOptionChange}  />  Some mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"few-errors\" onChange={handleOptionChange}  />  Few mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"no-errors\" onChange={handleOptionChange}  />  No mistakes\n//                 </label>\n//               </div>\n//             </div>\n\n\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text avoid difficult words?     </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"guidelines\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text use short sentences and clear headings?    </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"clarity\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text flow logically from start to finish? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"coherent\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>How much effort did you need to edit the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"editing_effort\" value=\"many-errors\" checked={responses.editing_effort === \"many-errors\"} onChange={handleOptionChange}/>  A lot of effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"several-errors\" checked={responses.editing_effort === \"several-errors\"} onChange={handleOptionChange}/>  Significant effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"some-errors\" checked={responses.editing_effort === \"some-errors\"} onChange={handleOptionChange}/>  Moderate effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"few-errors\" checked={responses.editing_effort === \"few-errors\"} onChange={handleOptionChange}/>  Minimal effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"no-errors\" checked={responses.editing_effort === \"no-errors\"} onChange={handleOptionChange}/>  No effort at all</label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>If you edited the AI-generated text, what were your main reasons for it?</label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"main_reasons\"\n//                 rows=\"3\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.main_reasons}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Do you have any additional comments about the AI-generated text? </label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"additional_comments\"\n//                 rows=\"4\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.additional_comments}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n\n//             <div>\n//               <button className={styles.submitButton} type=\"submit\" >Submit</button>\n//             </div>\n\n//           </form>\n\n//         </div>\n//   {/* disabled={!isFormComplete} */}\n//   </div>\n\n// ) : (\n//   // Thank You Message & Redirect\n//   <div className={styles.thankYouContainer}>\n//     <h2>Thank You!</h2>\n//     <p>Your responses have been saved. We appreciate your feedback.</p>\n//     <button\n//       className={styles.redirectButton}\n//       onClick={() => navigate(\"/simplify\", { replace: true })}\n//     >\n//       Start Another Simplification\n//     </button>\n//   </div>\n// )}\n// </div>\n\n\n// </>\n//   );\n// };\n\n// export default SurveyPage;\n\n// src/components/Survey/index.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport DiffMatchPatch                   from \"diff-match-patch\";\nimport { saveAs }                       from \"file-saver\";\nimport styles                           from \"./styles.module.css\";\n\nconst dmp = new DiffMatchPatch();\n\nconst wordCount = txt => (txt ? txt.trim().split(/\\s+/).filter(Boolean).length : 0);\n\nexport default function SurveyPage() {\n  /* ------------------------------------------------------------------ */\n  /* 1.  Data received from Review.jsx                                  */\n  /* ------------------------------------------------------------------ */\n  const {\n    email,\n    inputText          = \"\",      // original user input\n    generatedText      = \"\",      // AI‑generated text (v1)\n    finalText          = \"\",      // text that was on screen when user hit “Save”\n    saveHistory        = [],      // optional array of previous Save clicks\n  } = useLocation().state || {};\n\n  /* ------------------------------------------------------------------ */\n  /* 2.  Local state – side‑bar, diff toggles, survey answers, etc.     */\n  /* ------------------------------------------------------------------ */\n  const [latestFinal, setLatestFinal] = useState(finalText);\n  const [selectedVersion, setSelectedVersion] = useState(saveHistory.length); // 1‑based\n  const [showDiffIn,  setShowDiffIn]  = useState(false); // input ↔ AI\n  const [showDiffOut, setShowDiffOut] = useState(false); // AI ↔ final\n  const [diffHtmlIn,  setDiffHtmlIn]  = useState(\"\");\n  const [diffHtmlOut, setDiffHtmlOut] = useState(\"\");\n  const [sidebar,     setSidebar]     = useState(false);\n  const [submitted,   setSubmitted]   = useState(false);\n\n  const navigate = useNavigate();\n\n  /* ------------------------------------------------------------------ */\n  /* 3.  Derived values (word counts, diffs)                            */\n  /* ------------------------------------------------------------------ */\n  useEffect(() => {\n    setDiffHtmlIn (dmp.diff_prettyHtml(dmp.diff_main(inputText,  generatedText)));\n    setDiffHtmlOut(dmp.diff_prettyHtml(dmp.diff_main(generatedText, latestFinal)));\n  }, [inputText, generatedText, latestFinal]);\n\n  const inputWords     = wordCount(inputText);\n  const generatedWords = wordCount(generatedText);\n  const finalWords     = wordCount(latestFinal);\n\n  /* ------------------------------------------------------------------ */\n  /* 4.  Survey form state                                              */\n  /* ------------------------------------------------------------------ */\n  const [answers, setAnswers] = useState({\n    needs: null, easy: null, meaning: null, relevancy: null,\n    grammar: null, guidelines: null, clarity: null, coherent: null,\n    editing_effort: null,\n    main_reasons: \"\", additional_comments: \"\",\n  });\n\n  const handleRadio = e =>\n    setAnswers(p => ({ ...p, [e.target.name]: p[e.target.name] === e.target.value ? null : e.target.value }));\n\n  const handleText  = e =>\n    setAnswers(p => ({ ...p, [e.target.name]: e.target.value }));\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await fetch(\"/api/simplifications/survey\", {\n      method : \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body   : JSON.stringify({ email, inputText, responses: answers })\n    });\n    setSubmitted(true);\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* 5.  Version‑history side‑bar                                       */\n  /* ------------------------------------------------------------------ */\n  const pickVersion = idx => {\n    setLatestFinal(saveHistory[idx].finalText);\n    setSelectedVersion(idx + 1);\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* 6.  Early‑exit if router‑state missing (e.g. user refreshed page)  */\n  /* ------------------------------------------------------------------ */\n  if (!email) return <p style={{ padding: 40 }}>No session data found. Please restart a simplification.</p>;\n\n  /* ------------------------------------------------------------------ */\n  /* 7.  Render                                                         */\n  /* ------------------------------------------------------------------ */\n  return (\n    <>\n      {/* ─────────────────────  NAVBAR  ───────────────────── */}\n      <nav className={styles.navbar}>\n        <h1 onClick={() => navigate(\"/\")} style={{ cursor: \"pointer\" }}>Text Simplification Tool</h1>\n        <button className={styles.white_btn} onClick={() => { localStorage.removeItem(\"token\"); navigate(\"/Login\"); }}>\n          Logout\n        </button>\n      </nav>\n\n      <div className={styles.container}>\n        {/* ───────────────  HISTORY SIDEBAR  ─────────────── */}\n        <div className={`${styles.sidebar} ${sidebar ? styles.expanded : \"\"}`}>\n          <button className={styles.historyIcon} onClick={() => setSidebar(s => !s)}>\n            🕒 <p style={{ fontSize: 15 }}>History</p>\n          </button>\n\n          {sidebar && (\n            <div className={styles.historyContent}>\n              <button className={styles.closeButton} onClick={() => setSidebar(false)}>✖</button>\n              <ul className={styles.historyList}>\n                {saveHistory.map((v, i) => (\n                  <li key={i}\n                      className={`${styles.historyItem} ${selectedVersion === i + 1 ? styles.activeVersion : \"\"}`}\n                      onClick={() => pickVersion(i)}>\n                    Version {i + 1}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {/* ───────────────  MAIN CONTENT  ─────────────── */}\n        <div className={`${styles.mainContent} ${sidebar ? styles.withSidebar : \"\"}`}>\n          {!submitted ? (\n            <>\n              {/* ─────  Triple text‑boxes  ───── */}\n              <div className={styles.textareas_container}>\n                {/* Input */}\n                <TextBox\n                  label=\"Input Text\"\n                  value={inputText}\n                  words={inputWords}\n                  onCopy={() => navigator.clipboard.writeText(inputText)}\n                  filename=\"InputText\"\n                />\n\n                {/* AI gen */}\n                <TextBox\n                  label=\"AI‑generated Text\"\n                  value={generatedText}\n                  words={generatedWords}\n                  onCopy={() => navigator.clipboard.writeText(generatedText)}\n                  filename=\"GeneratedText\"\n                  toggleDiff={{\n                    shown : showDiffIn,\n                    label : showDiffIn ? \"Hide comparison\" : \"Compare with input\",\n                    onClick: () => setShowDiffIn(s => !s)\n                  }}\n                >\n                  {showDiffIn && <DiffBox html={diffHtmlIn} title=\"Input vs AI‑generated\" />}\n                </TextBox>\n\n                {/* Final */}\n                <TextBox\n                  label=\"Final Revised Text\"\n                  value={latestFinal}\n                  words={finalWords}\n                  onCopy={() => navigator.clipboard.writeText(latestFinal)}\n                  filename=\"FinalText\"\n                  toggleDiff={{\n                    shown : showDiffOut,\n                    label : showDiffOut ? \"Hide comparison\" : \"Compare with AI‑generated\",\n                    onClick: () => setShowDiffOut(s => !s)\n                  }}\n                >\n                  {showDiffOut && <DiffBox html={diffHtmlOut} title=\"AI‑generated vs Final\" />}\n                </TextBox>\n              </div>\n\n              {/* ─────  Survey Form  ───── */}\n              <SurveyForm\n                answers={answers}\n                onRadio={handleRadio}\n                onText ={handleText}\n                onSubmit={handleSubmit}\n              />\n            </>\n          ) : (\n            <ThankYou onRestart={() => navigate(\"/simplify\", { replace: true })} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\n/* ------------------------------------------------------------------ */\n/* Helper sub‑components                                              */\n/* ------------------------------------------------------------------ */\nfunction TextBox({ label, value, words, onCopy, filename, toggleDiff, children }) {\n  return (\n    <div className={styles.text_container}>\n      <div className={styles.labelWrapper}>\n        <label className={styles.label}>{label}</label>\n        <div className={styles.actions}>\n          <span className={styles.copyIcon} onClick={onCopy}>📋</span>\n          <span className={styles.copyIcon}\n                onClick={() => saveAs(new Blob([value], { type: \"text/plain;charset=utf-8\" }), `${filename}.txt`)}>\n            📥\n          </span>\n          {toggleDiff && (\n            <button className={styles.toggleDiffBtn} onClick={toggleDiff.onClick}>\n              {toggleDiff.label}\n            </button>\n          )}\n        </div>\n      </div>\n      <p className={styles.wordCount}>Words: {words}</p>\n      <textarea readOnly value={value} className={`${styles.output_box} ${styles.side_by_side}`} />\n      {children}\n    </div>\n  );\n}\n\nconst DiffBox = ({ html, title }) => (\n  <div className={styles.diff_box}>\n    <label className={styles.label}>{title}</label>\n    <div className={styles.diff_output} dangerouslySetInnerHTML={{ __html: html }} />\n  </div>\n);\n\nfunction SurveyForm({ answers, onRadio, onText, onSubmit }) {\n  return (\n    <form className={styles.surveyForm} onSubmit={onSubmit}>\n      <h2>Survey</h2>\n      <h3>Your feedback is valuable (all questions optional).</h3>\n\n      {/* repeat blocks like below for each Likert question … */}\n      <Likert name=\"needs\" label=\"Does the AI‑generated text meet your needs?\" onChange={onRadio} />\n\n      {/* free‑text */}\n      <div className={styles.surveyQuestion}>\n        <label>Main reasons for editing (optional):</label>\n        <textarea name=\"main_reasons\" rows=\"3\" value={answers.main_reasons} onChange={onText} />\n      </div>\n\n      <button className={styles.submitButton} type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nconst Likert = ({ name, label, onChange }) => (\n  <div className={styles.surveyQuestion}>\n    <label>{label}</label>\n    <div className={styles.surveyOptions}>\n      {[\"1\",\"2\",\"3\",\"4\",\"5\"].map(v => (\n        <label key={v}><input type=\"radio\" name={name} value={v} onChange={onChange} /> {v}</label>\n      ))}\n    </div>\n  </div>\n);\n\nconst ThankYou = ({ onRestart }) => (\n  <div className={styles.thankYouContainer}>\n    <h2>Thank you!</h2>\n    <p>Your responses have been saved.</p>\n    <button className={styles.redirectButton} onClick={onRestart}>\n      Start another simplification\n    </button>\n  </div>\n);\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}