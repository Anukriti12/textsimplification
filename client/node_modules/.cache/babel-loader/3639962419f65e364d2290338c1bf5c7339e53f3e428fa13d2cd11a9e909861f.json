{"ast":null,"code":"const syllable = require(\"syllable\"); // npm i syllable\nconst flesch = require(\"flesch-kincaid\"); // npm i flesch-kincaid\nconst uniq = require(\"lodash/uniq\");\nexports.calcMetrics = (txt = \"\") => {\n  const words = txt.trim().split(/\\s+/).filter(Boolean);\n  const sentences = txt.split(/[.!?]+/).filter(Boolean);\n  const chars = txt.length;\n  const charsNoSp = txt.replace(/\\s+/g, \"\").length;\n  const syllables = words.reduce((s, w) => s + syllable(w), 0);\n  const fk = flesch({\n    sentence: sentences.length || 1,\n    word: words.length || 1,\n    syllable: syllables || 1\n  });\n  return {\n    fleschReadingEase: fk.ease,\n    fleschKincaidGrade: fk.grade,\n    lexicalDensity: uniq(words).length / words.length || 0,\n    wordCount: words.length,\n    uniqueWords: uniq(words).length,\n    sentenceCount: sentences.length,\n    avgSentenceLength: words.length / (sentences.length || 1),\n    charsWithSpaces: chars,\n    charsWithoutSpaces: charsNoSp,\n    avgCharsPerWord: charsNoSp / (words.length || 1),\n    syllableCount: syllables,\n    avgSyllablesPerWord: syllables / (words.length || 1)\n  };\n};\nexports.diffStats = (a = \"\", b = \"\") => {\n  const dmp = new (require(\"diff-match-patch\"))();\n  const diffs = dmp.diff_main(a, b);\n  dmp.diff_cleanupSemantic(diffs);\n  let insertions = 0,\n    deletions = 0;\n  diffs.forEach(([op, txt]) => {\n    if (op === 1) insertions += txt.trim().split(/\\s+/).length;\n    if (op === -1) deletions += txt.trim().split(/\\s+/).length;\n  });\n  return {\n    distance: dmp.diff_levenshtein(diffs),\n    insertions,\n    deletions\n  };\n};","map":{"version":3,"names":["syllable","require","flesch","uniq","exports","calcMetrics","txt","words","trim","split","filter","Boolean","sentences","chars","length","charsNoSp","replace","syllables","reduce","s","w","fk","sentence","word","fleschReadingEase","ease","fleschKincaidGrade","grade","lexicalDensity","wordCount","uniqueWords","sentenceCount","avgSentenceLength","charsWithSpaces","charsWithoutSpaces","avgCharsPerWord","syllableCount","avgSyllablesPerWord","diffStats","a","b","dmp","diffs","diff_main","diff_cleanupSemantic","insertions","deletions","forEach","op","distance","diff_levenshtein"],"sources":["/Users/anukumar/Desktop/Spring2025/local-textsimplification/client/src/utils/textMetrics.js"],"sourcesContent":["const syllable = require(\"syllable\");         // npm i syllable\nconst flesch   = require(\"flesch-kincaid\");   // npm i flesch-kincaid\nconst uniq     = require(\"lodash/uniq\");\n\nexports.calcMetrics = (txt = \"\") => {\n  const words       = txt.trim().split(/\\s+/).filter(Boolean);\n  const sentences   = txt.split(/[.!?]+/).filter(Boolean);\n  const chars       = txt.length;\n  const charsNoSp   = txt.replace(/\\s+/g, \"\").length;\n  const syllables   = words.reduce((s, w) => s + syllable(w), 0);\n\n  const fk          = flesch({ sentence: sentences.length || 1,\n                               word: words.length || 1,\n                               syllable: syllables || 1 });\n\n  return {\n    fleschReadingEase:  fk.ease,\n    fleschKincaidGrade: fk.grade,\n    lexicalDensity:     uniq(words).length / words.length || 0,\n    wordCount:          words.length,\n    uniqueWords:        uniq(words).length,\n    sentenceCount:      sentences.length,\n    avgSentenceLength:  words.length / (sentences.length || 1),\n    charsWithSpaces:    chars,\n    charsWithoutSpaces: charsNoSp,\n    avgCharsPerWord:    charsNoSp / (words.length || 1),\n    syllableCount:      syllables,\n    avgSyllablesPerWord: syllables / (words.length || 1),\n  };\n};\n\nexports.diffStats = (a = \"\", b = \"\") => {\n  const dmp   = new (require(\"diff-match-patch\"))();\n  const diffs = dmp.diff_main(a, b);\n  dmp.diff_cleanupSemantic(diffs);\n\n  let insertions = 0,\n      deletions  = 0;\n\n  diffs.forEach(([op, txt]) => {\n    if (op === 1) insertions += txt.trim().split(/\\s+/).length;\n    if (op === -1) deletions  += txt.trim().split(/\\s+/).length;\n  });\n\n  return {\n    distance: dmp.diff_levenshtein(diffs),\n    insertions,\n    deletions,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}