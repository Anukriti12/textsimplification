{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import styles from \"./styles.module.css\";\n// import { saveAs } from \"file-saver\";\n// import DiffMatchPatch from \"diff-match-patch\";\n// // const handleFormSubmit = (e) => {\n// //   e.preventDefault();\n// //   alert(\"Survey responses saved\");\n// // };\n// const SurveyPage = () => {\n//   const { state } = useLocation();\n//   //const { email, inputText } = state || {};\n//   // const { email, inputText, outputText: initialOutputText, editHistory, saveHistory } = state || {};\n//   const {\n//       email,\n//       inputText,\n//       generatedText,        // new prop from Review\n//       finalText,            // new prop from Review\n//       editHistory,\n//       saveHistory = [],\n//     } = state || {};\n//   const [data, setData] = useState(null);\n//   const [showDifference1, setShowDifference1] = useState(false); // For Input Text vs System-generated Text\n//   const [showDifference2, setShowDifference2] = useState(false); // For System-generated Text vs Submitted Text\n//   const [diffHtml1, setDiffHtml1] = useState(\"\");\n//   const [diffHtml2, setDiffHtml2] = useState(\"\");\n//     // Store latest submitted text from history selection\n//     const [latestFinalText, setLatestFinalText] = useState(\"\");\n//     const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//     const [selectedVersion, setSelectedVersion] = useState(null);\n//   const navigate = useNavigate();\n//   // Word count states\n//   const [inputWordCount, setInputWordCount] = useState(0);\n//   const [outputWordCount, setOutputWordCount] = useState(0);\n//   const [submittedWordCount, setSubmittedWordCount] = useState(0);\n//   // Function to count words\n//   const countWords = (text) => {\n//     return text ? text.trim().split(/\\s+/).filter(Boolean).length : 0;\n//   };\n//     useEffect(() => {\n//         setInputWordCount   (countWords(inputText));\n//         setOutputWordCount  (countWords(generatedText));\n//         setSubmittedWordCount(countWords(latestFinalText));\n//      }, [inputText, generatedText, latestFinalText]);\n//   useEffect(() => {\n//     if (saveHistory.length > 0) {\n//       setLatestFinalText(saveHistory[saveHistory.length - 1]?.finalText || \"\");\n//       setSelectedVersion(saveHistory.length);\n//       setSubmittedWordCount(countWords(saveHistory[saveHistory.length - 1]?.finalText || \"\"));\n//     }\n//   }, [saveHistory]);\n//     useEffect(() => {\n//         if (saveHistory.length) {\n//           const last = saveHistory[saveHistory.length - 1]?.finalText || \"\";\n//           setLatestFinalText(last);\n//           setSelectedVersion(saveHistory.length);\n//         } else {\n//           setLatestFinalText(finalText);          // from Review\n//         }\n//       }, [saveHistory, finalText]);\n//   const handleHistoryClick = (index) => {\n//     setLatestFinalText(saveHistory[index].finalText);\n//     setSelectedVersion(index + 1);\n//   };\n//   useEffect(() => {\n//     const handleBackButton = (event) => {\n//       event.preventDefault();\n//       const confirmLeave = window.confirm(\n//         \"You have unsaved changes. Going back may result in losing your edits. Do you want to continue?\\n\\nIf you want to edit your already submitted text, copy it from here.\"\n//       );\n//       if (!confirmLeave) {\n//         window.history.pushState(null, \"\", window.location.href); // Prevent navigation\n//       } else {\n//         navigate(-1);\n//       }\n//     };\n//     // **Push a history state to detect back button click**\n//     window.history.pushState(null, \"\", window.location.href);\n//     window.addEventListener(\"popstate\", handleBackButton);\n//     return () => {\n//       window.removeEventListener(\"popstate\", handleBackButton);\n//     };\n//   }, [navigate]);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [responses, setResponses] = useState({\n//     /* Likert-scale questions (radio buttons) */\n//     needs: null,\n//     easy: null,\n//     meaning: null,\n//     relevancy: null,\n//     grammar: null,\n//     guidelines: null,\n//     clarity: null,\n//     coherent: null,\n//     editing_effort: null,\n//     /* Free‑text questions (text‑areas)        */\n//     main_reasons: \"\",\n//     additional_comments: \"\",\n//   });\n//   // Handle input changes     \n//   // Handle input changes, allowing deselection\n// const handleOptionChange = (event) => {\n//   const { name, value } = event.target;\n//   setResponses((prevResponses) => ({\n//     ...prevResponses,\n//     [name]: prevResponses[name] === value ? \"\" : value,  // Toggle selection\n//   }));\n// };\n//   // Check if all required fields are filled\n//   // const isFormComplete = Object.values(responses).every((value) => value !== \"\" && value !== null);\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     navigate(\"/Login\"); \n//   };\n//   const handleCopy = (text) => {\n//     navigator.clipboard.writeText(text).then(\n//       () => {\n//         alert(\"Copied to clipboard!\");\n//       },\n//       (err) => {\n//         console.error(\"Failed to copy text:\", err);\n//       }\n//     );\n//   };\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     saveAs(blob, `${filename}.${format}`);\n//   };\n//   // survey/index.jsx\n// const handleFormSubmit = async (e) => {\n//   e.preventDefault();\n//   // if (!isFormComplete) return alert(\"Please answer every question.\");\n//   await fetch(\"/api/simplifications/survey\", {\n//     method : \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body   : JSON.stringify({ email, inputText, responses }),\n//   });\n//   setSubmitted(true);\n// };\n//   const handleTextChange = e => {\n//       const { name, value } = e.target;\n//       setResponses(prev => ({ ...prev, [name]: value }));\n//     };\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs);\n//   };\n//   if (!data)\n//     {return <p>Loading...</p>;}\n//   // const { inputText: input, outputText, editedText } = data;\n//   // const { inputText: input, outputText, latestText } = data;\n//   const input  = inputText;\n//   const output = generatedText;\n//   const latest = finalText;\n//   return (\n//     <>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t  {/* <h1>Text Simplification Tool</h1> */}\n//       <h1 \n//     onClick={() => window.location.href = \"http://localhost:5001/\"}\n//     style={{ cursor: \"pointer\" }} // Makes it look clickable\n//  \t\t>\n// \t\tText Simplification Tool</h1>\n// \t\t  <button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t  </button>\n// \t\t</nav>\n// <div className={styles.container}>\n//     <div className={`${styles.sidebar} ${isSidebarVisible ? styles.expanded : \"\"}`}>\n//          <button className={styles.historyIcon} onClick={() => setIsSidebarVisible(!isSidebarVisible)}>\n//            🕒 <p style={{ fontSize: \"15px\" }}>History</p>\n//          </button>\n//          {isSidebarVisible && (\n//            <div className={styles.historyContent}>\n//              <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>✖</button>\n//              <ul className={styles.historyList}>\n//                {saveHistory.map((entry, index) => (\n//                 //  <li key={index} className={styles.historyItem} onClick={() => handleHistoryClick(entry)}>\n//                 //    {entry.timestamp}\n//                 //  </li>\n//                 <li key={index} className={`${styles.historyItem} ${selectedVersion === index + 1 ? styles.activeVersion : \"\"}`} \n//                          onClick={() => handleHistoryClick(index)}>\n//                        Version {index + 1}\n//                 </li>\n//                ))}\n//              </ul>\n//            </div>\n//          )}\n//     </div>\n//     {!submitted ? (\n//     <div className={`${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`}>\n//           <div className={styles.description}>\n//             </div>\n//         <div className={styles.textareas_container}>\n//           {/* Input Text */}\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"inputText\">\n//                 Input Text\n//               </label>\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(inputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(inputText, \"inputText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//               </div>\n//             </div>\n//             <p className={styles.wordCount}>Words: {inputWordCount}</p>\n//             <textarea\n//               id=\"inputText\"\n//               className={`${styles.textarea} ${styles.side_by_side}`}\n//               value={input} readOnly placeholder=\"Input Text\"\n//             ></textarea>\n//           </div>\n//             {/* system generated text Box */}\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"outputText\">\n//                 AI-generated Text\n//               </label>\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(outputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference1(!showDifference1)}\n//                 >\n//                   {showDifference1 ? \"Hide the comparison\" : \"Compare with input text\"}\n//                 </button>\n//               </div>\n//             </div>\n//             <p className={styles.wordCount}>Words: {outputWordCount}</p>\n//             <textarea\n//               id=\"outputText\"\n//               className={`${styles.output_box} ${styles.side_by_side}`}\n//               // value={initialOutputText}\n//               value={generatedText}\n//           readOnly\n//           placeholder=\"Initial AI-Generated Text\"\n//             ></textarea>\n//               {/* Difference Box appears right below System-generated Text */}\n//               {showDifference1 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>Input vs AI-generated Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml1 }}></div>\n//               </div>\n//             )}\n//           </div>\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//             <label className={styles.label} htmlFor=\"submittedText\">Final Revised Text</label>\n//             {/* <textarea className={styles.textarea} value={latestText} readOnly></textarea> */}\n//                   {/* <textarea value={latestFinalText} readOnly /> */}\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(latestFinalText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(latestFinalText, \"SubmittedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference2(!showDifference2)}\n//                 >\n//                   {showDifference2 ? \"Hide the comparison\" : \"Compare with AI-generated text\"}\n//                 </button>\n//               </div>\n//             </div>\n//             {/* <textarea id=\"EditedText\" className={`${styles.output_box} ${styles.side_by_side}`} value={latestFinalText} readOnly/>\n//             */}\n//                           <p className={styles.wordCount}>Words: {submittedWordCount}</p>\n//             <textarea\n//                         id=\"submittedText\"\n//                         className={`${styles.output_box} ${styles.side_by_side}`}\n//                         value={latestFinalText}\n//                         readOnly\n//                         placeholder=\"Final Revised Text\"\n//                       ></textarea>\n//                         {/* Difference Box appears right below Submitted Text */}\n//             {showDifference2 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>AI-generated vs Final revised Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml2 }}></div>\n//               </div>\n//             )}\n//           </div>\n//             <div className={styles.diff_container}>\n//             </div>\n//         </div>\n//             {/* <div> */}\n//         <div className={styles.surveyContainer}>\n//           <form className={styles.surveyForm} onSubmit={handleFormSubmit}>\n//                 <h2>Survey</h2>\n//                 <h3>Your feedback is valuable. Please try to answer all the questions.</h3>\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text meet your needs? \n//                 {/* <span style={{ color: \"red\" }}>*</span> \n//               */}\n//               </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"needs\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"somewhat-meets\" onChange={handleOptionChange}  />  Somewhat meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"moderately-meets\" onChange={handleOptionChange}  />  Moderately meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"mostly-meets\" onChange={handleOptionChange}  />  Mostly meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"completely-meets\" onChange={handleOptionChange}  />  Completely meets</label>\n//               </div>\n//             </div>\n//           <div className={styles.surveyQuestion}>\n//               <label>Is the AI-generated text easy to understand?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"not-clear\" onChange={handleOptionChange}  />  Not easy at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"somewhat-clear\" onChange={handleOptionChange}  />  Somewhat easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"moderately-clear\" onChange={handleOptionChange}  />  Moderately easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"mostly-clear\" onChange={handleOptionChange}  />  Mostly easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"very-clear\" onChange={handleOptionChange}  />  Completely easy\n//                 </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text preserve the original meaning? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"somewhat-preserves\" onChange={handleOptionChange}  />  Somewhat preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"moderately-preserves\" onChange={handleOptionChange}  />  Moderately preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"mostly-preserves\" onChange={handleOptionChange}  />  Mostly preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"completely-preserves\" onChange={handleOptionChange}  />  Completely preserves\n//                 </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text contain false or irrelevant information?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"not-at-all\" onChange={handleOptionChange}  />  A lot of inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"somewhat\" onChange={handleOptionChange}  />  Several inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"moderately\" onChange={handleOptionChange}  />  Some minor inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"mostly\" onChange={handleOptionChange}  />  Mostly accurate\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"completely\" onChange={handleOptionChange}  />  Completely accurate\n//                 </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Are there spelling or grammar mistakes in the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"many-errors\" onChange={handleOptionChange}  />  Many mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"several-errors\" onChange={handleOptionChange}  />  Several mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"some-errors\" onChange={handleOptionChange}  />  Some mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"few-errors\" onChange={handleOptionChange}  />  Few mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"no-errors\" onChange={handleOptionChange}  />  No mistakes\n//                 </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text avoid difficult words?     </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"guidelines\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text use short sentences and clear headings?    </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"clarity\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text flow logically from start to finish? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"coherent\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>How much effort did you need to edit the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"editing_effort\" value=\"many-errors\" checked={responses.editing_effort === \"many-errors\"} onChange={handleOptionChange}/>  A lot of effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"several-errors\" checked={responses.editing_effort === \"several-errors\"} onChange={handleOptionChange}/>  Significant effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"some-errors\" checked={responses.editing_effort === \"some-errors\"} onChange={handleOptionChange}/>  Moderate effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"few-errors\" checked={responses.editing_effort === \"few-errors\"} onChange={handleOptionChange}/>  Minimal effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"no-errors\" checked={responses.editing_effort === \"no-errors\"} onChange={handleOptionChange}/>  No effort at all</label>\n//               </div>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>If you edited the AI-generated text, what were your main reasons for it?</label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"main_reasons\"\n//                 rows=\"3\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.main_reasons}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n//             <div className={styles.surveyQuestion}>\n//               <label>Do you have any additional comments about the AI-generated text? </label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"additional_comments\"\n//                 rows=\"4\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.additional_comments}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n//             <div>\n//               <button className={styles.submitButton} type=\"submit\" >Submit</button>\n//             </div>\n//           </form>\n//         </div>\n//   {/* disabled={!isFormComplete} */}\n//   </div>\n// ) : (\n//   // Thank You Message & Redirect\n//   <div className={styles.thankYouContainer}>\n//     <h2>Thank You!</h2>\n//     <p>Your responses have been saved. We appreciate your feedback.</p>\n//     <button\n//       className={styles.redirectButton}\n//       onClick={() => navigate(\"/simplify\", { replace: true })}\n//     >\n//       Start Another Simplification\n//     </button>\n//   </div>\n// )}\n// </div>\n// </>\n//   );\n// };\n// export default SurveyPage;\n// src/components/Survey/index.jsx\nimport React,{useEffect,useState}from\"react\";import{useLocation,useNavigate}from\"react-router‑dom\";import DiffMatchPatch from\"diff-match-patch\";import{saveAs}from\"file-saver\";import styles from\"./styles.module.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const dmp=new DiffMatchPatch();const wordCount=txt=>txt?txt.trim().split(/\\s+/).filter(Boolean).length:0;export default function SurveyPage(){/* ------------------------------------------------------------------ *//* 1.  Data received from Review.jsx                                  *//* ------------------------------------------------------------------ */const{email,inputText=\"\",// original user input\ngeneratedText=\"\",// AI‑generated text (v1)\nfinalText=\"\",// text that was on screen when user hit “Save”\nsaveHistory=[]// optional array of previous Save clicks\n}=useLocation().state||{};/* ------------------------------------------------------------------ *//* 2.  Local state – side‑bar, diff toggles, survey answers, etc.     *//* ------------------------------------------------------------------ */const[latestFinal,setLatestFinal]=useState(finalText);const[selectedVersion,setSelectedVersion]=useState(saveHistory.length);// 1‑based\nconst[showDiffIn,setShowDiffIn]=useState(false);// input ↔ AI\nconst[showDiffOut,setShowDiffOut]=useState(false);// AI ↔ final\nconst[diffHtmlIn,setDiffHtmlIn]=useState(\"\");const[diffHtmlOut,setDiffHtmlOut]=useState(\"\");const[sidebar,setSidebar]=useState(false);const[submitted,setSubmitted]=useState(false);const navigate=useNavigate();/* ------------------------------------------------------------------ *//* 3.  Derived values (word counts, diffs)                            *//* ------------------------------------------------------------------ */useEffect(()=>{setDiffHtmlIn(dmp.diff_prettyHtml(dmp.diff_main(inputText,generatedText)));setDiffHtmlOut(dmp.diff_prettyHtml(dmp.diff_main(generatedText,latestFinal)));},[inputText,generatedText,latestFinal]);const inputWords=wordCount(inputText);const generatedWords=wordCount(generatedText);const finalWords=wordCount(latestFinal);/* ------------------------------------------------------------------ *//* 4.  Survey form state                                              *//* ------------------------------------------------------------------ */const[answers,setAnswers]=useState({needs:null,easy:null,meaning:null,relevancy:null,grammar:null,guidelines:null,clarity:null,coherent:null,editing_effort:null,main_reasons:\"\",additional_comments:\"\"});const handleRadio=e=>setAnswers(p=>({...p,[e.target.name]:p[e.target.name]===e.target.value?null:e.target.value}));const handleText=e=>setAnswers(p=>({...p,[e.target.name]:e.target.value}));const handleSubmit=async e=>{e.preventDefault();await fetch(\"/api/simplifications/survey\",{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({email,inputText,responses:answers})});setSubmitted(true);};/* ------------------------------------------------------------------ *//* 5.  Version‑history side‑bar                                       *//* ------------------------------------------------------------------ */const pickVersion=idx=>{setLatestFinal(saveHistory[idx].finalText);setSelectedVersion(idx+1);};/* ------------------------------------------------------------------ *//* 6.  Early‑exit if router‑state missing (e.g. user refreshed page)  *//* ------------------------------------------------------------------ */if(!email)return/*#__PURE__*/_jsx(\"p\",{style:{padding:40},children:\"No session data found. Please restart a simplification.\"});/* ------------------------------------------------------------------ *//* 7.  Render                                                         *//* ------------------------------------------------------------------ */return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"nav\",{className:styles.navbar,children:[/*#__PURE__*/_jsx(\"h1\",{onClick:()=>navigate(\"/\"),style:{cursor:\"pointer\"},children:\"Text\\xA0Simplification\\xA0Tool\"}),/*#__PURE__*/_jsx(\"button\",{className:styles.white_btn,onClick:()=>{localStorage.removeItem(\"token\");navigate(\"/Login\");},children:\"Logout\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsxs(\"div\",{className:`${styles.sidebar} ${sidebar?styles.expanded:\"\"}`,children:[/*#__PURE__*/_jsxs(\"button\",{className:styles.historyIcon,onClick:()=>setSidebar(s=>!s),children:[\"\\uD83D\\uDD52 \",/*#__PURE__*/_jsx(\"p\",{style:{fontSize:15},children:\"History\"})]}),sidebar&&/*#__PURE__*/_jsxs(\"div\",{className:styles.historyContent,children:[/*#__PURE__*/_jsx(\"button\",{className:styles.closeButton,onClick:()=>setSidebar(false),children:\"\\u2716\"}),/*#__PURE__*/_jsx(\"ul\",{className:styles.historyList,children:saveHistory.map((v,i)=>/*#__PURE__*/_jsxs(\"li\",{className:`${styles.historyItem} ${selectedVersion===i+1?styles.activeVersion:\"\"}`,onClick:()=>pickVersion(i),children:[\"Version\\xA0\",i+1]},i))})]})]}),/*#__PURE__*/_jsx(\"div\",{className:`${styles.mainContent} ${sidebar?styles.withSidebar:\"\"}`,children:!submitted?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.textareas_container,children:[/*#__PURE__*/_jsx(TextBox,{label:\"Input Text\",value:inputText,words:inputWords,onCopy:()=>navigator.clipboard.writeText(inputText),filename:\"InputText\"}),/*#__PURE__*/_jsx(TextBox,{label:\"AI\\u2011generated Text\",value:generatedText,words:generatedWords,onCopy:()=>navigator.clipboard.writeText(generatedText),filename:\"GeneratedText\",toggleDiff:{shown:showDiffIn,label:showDiffIn?\"Hide comparison\":\"Compare with input\",onClick:()=>setShowDiffIn(s=>!s)},children:showDiffIn&&/*#__PURE__*/_jsx(DiffBox,{html:diffHtmlIn,title:\"Input\\xA0vs\\xA0AI\\u2011generated\"})}),/*#__PURE__*/_jsx(TextBox,{label:\"Final\\xA0Revised Text\",value:latestFinal,words:finalWords,onCopy:()=>navigator.clipboard.writeText(latestFinal),filename:\"FinalText\",toggleDiff:{shown:showDiffOut,label:showDiffOut?\"Hide comparison\":\"Compare with AI‑generated\",onClick:()=>setShowDiffOut(s=>!s)},children:showDiffOut&&/*#__PURE__*/_jsx(DiffBox,{html:diffHtmlOut,title:\"AI\\u2011generated\\xA0vs\\xA0Final\"})})]}),/*#__PURE__*/_jsx(SurveyForm,{answers:answers,onRadio:handleRadio,onText:handleText,onSubmit:handleSubmit})]}):/*#__PURE__*/_jsx(ThankYou,{onRestart:()=>navigate(\"/simplify\",{replace:true})})})]})]});}/* ------------------------------------------------------------------ *//* Helper sub‑components                                              *//* ------------------------------------------------------------------ */function TextBox(_ref){let{label,value,words,onCopy,filename,toggleDiff,children}=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:styles.text_container,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.labelWrapper,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,children:label}),/*#__PURE__*/_jsxs(\"div\",{className:styles.actions,children:[/*#__PURE__*/_jsx(\"span\",{className:styles.copyIcon,onClick:onCopy,children:\"\\uD83D\\uDCCB\"}),/*#__PURE__*/_jsx(\"span\",{className:styles.copyIcon,onClick:()=>saveAs(new Blob([value],{type:\"text/plain;charset=utf-8\"}),`${filename}.txt`),children:\"\\uD83D\\uDCE5\"}),toggleDiff&&/*#__PURE__*/_jsx(\"button\",{className:styles.toggleDiffBtn,onClick:toggleDiff.onClick,children:toggleDiff.label})]})]}),/*#__PURE__*/_jsxs(\"p\",{className:styles.wordCount,children:[\"Words: \",words]}),/*#__PURE__*/_jsx(\"textarea\",{readOnly:true,value:value,className:`${styles.output_box} ${styles.side_by_side}`}),children]});}const DiffBox=_ref2=>{let{html,title}=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:styles.diff_box,children:[/*#__PURE__*/_jsx(\"label\",{className:styles.label,children:title}),/*#__PURE__*/_jsx(\"div\",{className:styles.diff_output,dangerouslySetInnerHTML:{__html:html}})]});};function SurveyForm(_ref3){let{answers,onRadio,onText,onSubmit}=_ref3;return/*#__PURE__*/_jsxs(\"form\",{className:styles.surveyForm,onSubmit:onSubmit,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Survey\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Your feedback is valuable (all questions optional).\"}),/*#__PURE__*/_jsx(Likert,{name:\"needs\",label:\"Does the AI\\u2011generated text meet your needs?\",onChange:onRadio}),/*#__PURE__*/_jsxs(\"div\",{className:styles.surveyQuestion,children:[/*#__PURE__*/_jsx(\"label\",{children:\"Main reasons for editing (optional):\"}),/*#__PURE__*/_jsx(\"textarea\",{name:\"main_reasons\",rows:\"3\",value:answers.main_reasons,onChange:onText})]}),/*#__PURE__*/_jsx(\"button\",{className:styles.submitButton,type:\"submit\",children:\"Submit\"})]});}const Likert=_ref4=>{let{name,label,onChange}=_ref4;return/*#__PURE__*/_jsxs(\"div\",{className:styles.surveyQuestion,children:[/*#__PURE__*/_jsx(\"label\",{children:label}),/*#__PURE__*/_jsx(\"div\",{className:styles.surveyOptions,children:[\"1\",\"2\",\"3\",\"4\",\"5\"].map(v=>/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:name,value:v,onChange:onChange}),\"\\xA0\",v]},v))})]});};const ThankYou=_ref5=>{let{onRestart}=_ref5;return/*#__PURE__*/_jsxs(\"div\",{className:styles.thankYouContainer,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Thank\\xA0you!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Your responses have been saved.\"}),/*#__PURE__*/_jsx(\"button\",{className:styles.redirectButton,onClick:onRestart,children:\"Start another simplification\"})]});};","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","DiffMatchPatch","saveAs","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","dmp","wordCount","txt","trim","split","filter","Boolean","length","SurveyPage","email","inputText","generatedText","finalText","saveHistory","state","latestFinal","setLatestFinal","selectedVersion","setSelectedVersion","showDiffIn","setShowDiffIn","showDiffOut","setShowDiffOut","diffHtmlIn","setDiffHtmlIn","diffHtmlOut","setDiffHtmlOut","sidebar","setSidebar","submitted","setSubmitted","navigate","diff_prettyHtml","diff_main","inputWords","generatedWords","finalWords","answers","setAnswers","needs","easy","meaning","relevancy","grammar","guidelines","clarity","coherent","editing_effort","main_reasons","additional_comments","handleRadio","e","p","target","name","value","handleText","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","responses","pickVersion","idx","style","padding","children","className","navbar","onClick","cursor","white_btn","localStorage","removeItem","container","expanded","historyIcon","s","fontSize","historyContent","closeButton","historyList","map","v","i","historyItem","activeVersion","mainContent","withSidebar","textareas_container","TextBox","label","words","onCopy","navigator","clipboard","writeText","filename","toggleDiff","shown","DiffBox","html","title","SurveyForm","onRadio","onText","onSubmit","ThankYou","onRestart","replace","_ref","text_container","labelWrapper","actions","copyIcon","Blob","type","toggleDiffBtn","readOnly","output_box","side_by_side","_ref2","diff_box","diff_output","dangerouslySetInnerHTML","__html","_ref3","surveyForm","Likert","onChange","surveyQuestion","rows","submitButton","_ref4","surveyOptions","_ref5","thankYouContainer","redirectButton"],"sources":["/Users/anukumar/Desktop/Spring2025/local-textsimplification/client/src/components/Survey/index.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import { useLocation, useNavigate } from \"react-router-dom\";\n// import styles from \"./styles.module.css\";\n// import { saveAs } from \"file-saver\";\n// import DiffMatchPatch from \"diff-match-patch\";\n\n// // const handleFormSubmit = (e) => {\n// //   e.preventDefault();\n// //   alert(\"Survey responses saved\");\n// // };\n\n// const SurveyPage = () => {\n//   const { state } = useLocation();\n//   //const { email, inputText } = state || {};\n//   // const { email, inputText, outputText: initialOutputText, editHistory, saveHistory } = state || {};\n\n//   const {\n//       email,\n//       inputText,\n//       generatedText,        // new prop from Review\n//       finalText,            // new prop from Review\n//       editHistory,\n//       saveHistory = [],\n//     } = state || {};\n\n//   const [data, setData] = useState(null);\n       \n//   const [showDifference1, setShowDifference1] = useState(false); // For Input Text vs System-generated Text\n//   const [showDifference2, setShowDifference2] = useState(false); // For System-generated Text vs Submitted Text\n//   const [diffHtml1, setDiffHtml1] = useState(\"\");\n//   const [diffHtml2, setDiffHtml2] = useState(\"\");\n\n\n//     // Store latest submitted text from history selection\n//     const [latestFinalText, setLatestFinalText] = useState(\"\");\n//     const [isSidebarVisible, setIsSidebarVisible] = useState(false);\n//     const [selectedVersion, setSelectedVersion] = useState(null);\n    \n\n//   const navigate = useNavigate();\n\n//   // Word count states\n//   const [inputWordCount, setInputWordCount] = useState(0);\n//   const [outputWordCount, setOutputWordCount] = useState(0);\n//   const [submittedWordCount, setSubmittedWordCount] = useState(0);\n\n//   // Function to count words\n//   const countWords = (text) => {\n//     return text ? text.trim().split(/\\s+/).filter(Boolean).length : 0;\n//   };\n\n\n\n//     useEffect(() => {\n//         setInputWordCount   (countWords(inputText));\n//         setOutputWordCount  (countWords(generatedText));\n//         setSubmittedWordCount(countWords(latestFinalText));\n//      }, [inputText, generatedText, latestFinalText]);\n\n//   useEffect(() => {\n//     if (saveHistory.length > 0) {\n//       setLatestFinalText(saveHistory[saveHistory.length - 1]?.finalText || \"\");\n//       setSelectedVersion(saveHistory.length);\n//       setSubmittedWordCount(countWords(saveHistory[saveHistory.length - 1]?.finalText || \"\"));\n//     }\n//   }, [saveHistory]);\n\n//     useEffect(() => {\n//         if (saveHistory.length) {\n//           const last = saveHistory[saveHistory.length - 1]?.finalText || \"\";\n//           setLatestFinalText(last);\n//           setSelectedVersion(saveHistory.length);\n//         } else {\n//           setLatestFinalText(finalText);          // from Review\n//         }\n//       }, [saveHistory, finalText]);\n\n  \n//   const handleHistoryClick = (index) => {\n//     setLatestFinalText(saveHistory[index].finalText);\n//     setSelectedVersion(index + 1);\n//   };\n\n//   useEffect(() => {\n//     const handleBackButton = (event) => {\n//       event.preventDefault();\n//       const confirmLeave = window.confirm(\n//         \"You have unsaved changes. Going back may result in losing your edits. Do you want to continue?\\n\\nIf you want to edit your already submitted text, copy it from here.\"\n//       );\n//       if (!confirmLeave) {\n//         window.history.pushState(null, \"\", window.location.href); // Prevent navigation\n//       } else {\n//         navigate(-1);\n//       }\n//     };\n\n\n//     // **Push a history state to detect back button click**\n//     window.history.pushState(null, \"\", window.location.href);\n//     window.addEventListener(\"popstate\", handleBackButton);\n\n//     return () => {\n//       window.removeEventListener(\"popstate\", handleBackButton);\n//     };\n//   }, [navigate]);\n  \n//   const [submitted, setSubmitted] = useState(false);\n\n\n//   const [responses, setResponses] = useState({\n//     /* Likert-scale questions (radio buttons) */\n//     needs: null,\n//     easy: null,\n//     meaning: null,\n//     relevancy: null,\n//     grammar: null,\n//     guidelines: null,\n//     clarity: null,\n//     coherent: null,\n//     editing_effort: null,\n  \n//     /* Free‑text questions (text‑areas)        */\n//     main_reasons: \"\",\n//     additional_comments: \"\",\n//   });\n\n//   // Handle input changes     \n\n//   // Handle input changes, allowing deselection\n// const handleOptionChange = (event) => {\n//   const { name, value } = event.target;\n//   setResponses((prevResponses) => ({\n//     ...prevResponses,\n//     [name]: prevResponses[name] === value ? \"\" : value,  // Toggle selection\n//   }));\n// };\n//   // Check if all required fields are filled\n//   // const isFormComplete = Object.values(responses).every((value) => value !== \"\" && value !== null);\n\n\n//   const handleLogout = () => {\n//     localStorage.removeItem(\"token\");\n//     navigate(\"/Login\"); \n//   };\n  \n//   const handleCopy = (text) => {\n//     navigator.clipboard.writeText(text).then(\n//       () => {\n//         alert(\"Copied to clipboard!\");\n//       },\n//       (err) => {\n//         console.error(\"Failed to copy text:\", err);\n//       }\n//     );\n//   };\n\n//   const handleDownload = (text, filename, format) => {\n//     const blob = new Blob([text], { type: \"text/plain;charset=utf-8\" });\n//     saveAs(blob, `${filename}.${format}`);\n//   };\n\n//   // survey/index.jsx\n// const handleFormSubmit = async (e) => {\n//   e.preventDefault();\n//   // if (!isFormComplete) return alert(\"Please answer every question.\");\n\n//   await fetch(\"/api/simplifications/survey\", {\n//     method : \"PUT\",\n//     headers: { \"Content-Type\": \"application/json\" },\n//     body   : JSON.stringify({ email, inputText, responses }),\n//   });\n\n//   setSubmitted(true);\n// };\n\n\n//   const handleTextChange = e => {\n//       const { name, value } = e.target;\n//       setResponses(prev => ({ ...prev, [name]: value }));\n//     };\n\n//   const generateDiff = (input, output) => {\n//     const dmp = new DiffMatchPatch();\n//     const diffs = dmp.diff_main(input, output);\n//     dmp.diff_cleanupSemantic(diffs); // Optional cleanup for better readability\n//     return dmp.diff_prettyHtml(diffs);\n//   };\n\n\n\n//   if (!data)\n//     {return <p>Loading...</p>;}\n\n//   // const { inputText: input, outputText, editedText } = data;\n//   // const { inputText: input, outputText, latestText } = data;\n\n//   const input  = inputText;\n//   const output = generatedText;\n//   const latest = finalText;\n\n//   return (\n//     <>\n// \t\t{/* Navbar */}\n// \t\t<nav className={styles.navbar}>\n// \t\t  {/* <h1>Text Simplification Tool</h1> */}\n//       <h1 \n//     onClick={() => window.location.href = \"http://localhost:5001/\"}\n//     style={{ cursor: \"pointer\" }} // Makes it look clickable\n//  \t\t>\n// \t\tText Simplification Tool</h1>\n// \t\t  <button className={styles.white_btn} onClick={handleLogout}>\n// \t\t\tLogout\n// \t\t  </button>\n// \t\t</nav>\n\n\n// <div className={styles.container}>\n//     <div className={`${styles.sidebar} ${isSidebarVisible ? styles.expanded : \"\"}`}>\n         \n//          <button className={styles.historyIcon} onClick={() => setIsSidebarVisible(!isSidebarVisible)}>\n//            🕒 <p style={{ fontSize: \"15px\" }}>History</p>\n//          </button>\n//          {isSidebarVisible && (\n//            <div className={styles.historyContent}>\n//              <button className={styles.closeButton} onClick={() => setIsSidebarVisible(false)}>✖</button>\n//              <ul className={styles.historyList}>\n//                {saveHistory.map((entry, index) => (\n//                 //  <li key={index} className={styles.historyItem} onClick={() => handleHistoryClick(entry)}>\n//                 //    {entry.timestamp}\n//                 //  </li>\n//                 <li key={index} className={`${styles.historyItem} ${selectedVersion === index + 1 ? styles.activeVersion : \"\"}`} \n//                          onClick={() => handleHistoryClick(index)}>\n//                        Version {index + 1}\n//                 </li>\n\n//                ))}\n//              </ul>\n//            </div>\n//          )}\n//     </div>\n\n\n//     {!submitted ? (\n\n//     <div className={`${styles.mainContent} ${isSidebarVisible ? styles.withSidebar : \"\"}`}>\n\n//           <div className={styles.description}>\n//             </div>\n\n\n//         <div className={styles.textareas_container}>\n\n//           {/* Input Text */}\n//           <div className={styles.text_container}>\n            \n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"inputText\">\n//                 Input Text\n//               </label>\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(inputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(inputText, \"inputText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//               </div>\n//             </div>\n\n//             <p className={styles.wordCount}>Words: {inputWordCount}</p>\n\n//             <textarea\n//               id=\"inputText\"\n//               className={`${styles.textarea} ${styles.side_by_side}`}\n//               value={input} readOnly placeholder=\"Input Text\"\n//             ></textarea>\n//           </div>\n\n//             {/* system generated text Box */}\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//               <label className={styles.label} htmlFor=\"outputText\">\n//                 AI-generated Text\n//               </label>\n\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(outputText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(outputText, \"GeneratedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference1(!showDifference1)}\n//                 >\n//                   {showDifference1 ? \"Hide the comparison\" : \"Compare with input text\"}\n//                 </button>\n\n//               </div>\n//             </div>\n//             <p className={styles.wordCount}>Words: {outputWordCount}</p>\n\n//             <textarea\n//               id=\"outputText\"\n//               className={`${styles.output_box} ${styles.side_by_side}`}\n//               // value={initialOutputText}\n//               value={generatedText}\n//           readOnly\n//           placeholder=\"Initial AI-Generated Text\"\n\n//             ></textarea>\n//               {/* Difference Box appears right below System-generated Text */}\n//               {showDifference1 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>Input vs AI-generated Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml1 }}></div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className={styles.text_container}>\n//             <div className={styles.labelWrapper}>\n//             <label className={styles.label} htmlFor=\"submittedText\">Final Revised Text</label>\n//             {/* <textarea className={styles.textarea} value={latestText} readOnly></textarea> */}\n\n//                   {/* <textarea value={latestFinalText} readOnly /> */}\n\n\n//               <div className={styles.actions}>\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleCopy(latestFinalText)}\n//                   title=\"Copy to Clipboard\"\n//                 >\n//                   📋 {/* Clipboard Emoji */}\n//                 </div>\n\n//                 <div\n//                   className={styles.copyIcon}\n//                   onClick={() => handleDownload(latestFinalText, \"SubmittedText\", \"txt\")}\n//                   title=\"Download as .txt file\"\n//                 >\n//                   📥 {/* Download Icon */}\n//                 </div>\n\n//                 <button\n//                   className={styles.toggleDiffBtn}\n//                   onClick={() => setShowDifference2(!showDifference2)}\n//                 >\n//                   {showDifference2 ? \"Hide the comparison\" : \"Compare with AI-generated text\"}\n//                 </button>\n\n//               </div>\n//             </div>\n//             {/* <textarea id=\"EditedText\" className={`${styles.output_box} ${styles.side_by_side}`} value={latestFinalText} readOnly/>\n//             */}\n                        \n//                           <p className={styles.wordCount}>Words: {submittedWordCount}</p>\n\n//             <textarea\n//                         id=\"submittedText\"\n//                         className={`${styles.output_box} ${styles.side_by_side}`}\n//                         value={latestFinalText}\n//                         readOnly\n//                         placeholder=\"Final Revised Text\"\n//                       ></textarea>\n\n//                         {/* Difference Box appears right below Submitted Text */}\n//             {showDifference2 && (\n//               <div className={styles.diff_box}>\n//                 <label className={styles.label}>AI-generated vs Final revised Text</label>\n//                 <div className={`${styles.diff_output}`} dangerouslySetInnerHTML={{ __html: diffHtml2 }}></div>\n//               </div>\n//             )}\n//           </div>\n            \n        \n\n//             <div className={styles.diff_container}>\n\n//             </div>\n        \n//         </div>\n\n//             {/* <div> */}\n//         <div className={styles.surveyContainer}>\n\n//           <form className={styles.surveyForm} onSubmit={handleFormSubmit}>\n//                 <h2>Survey</h2>\n//                 <h3>Your feedback is valuable. Please try to answer all the questions.</h3>\n\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text meet your needs? \n//                 {/* <span style={{ color: \"red\" }}>*</span> \n//               */}\n//               </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"needs\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"somewhat-meets\" onChange={handleOptionChange}  />  Somewhat meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"moderately-meets\" onChange={handleOptionChange}  />  Moderately meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"mostly-meets\" onChange={handleOptionChange}  />  Mostly meets</label>\n//                 <label><input type=\"radio\" name=\"needs\" value=\"completely-meets\" onChange={handleOptionChange}  />  Completely meets</label>\n//               </div>\n//             </div>\n\n//           <div className={styles.surveyQuestion}>\n//               <label>Is the AI-generated text easy to understand?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"not-clear\" onChange={handleOptionChange}  />  Not easy at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"somewhat-clear\" onChange={handleOptionChange}  />  Somewhat easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"moderately-clear\" onChange={handleOptionChange}  />  Moderately easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"mostly-clear\" onChange={handleOptionChange}  />  Mostly easy\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"easy\" value=\"very-clear\" onChange={handleOptionChange}  />  Completely easy\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text preserve the original meaning? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"somewhat-preserves\" onChange={handleOptionChange}  />  Somewhat preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"moderately-preserves\" onChange={handleOptionChange}  />  Moderately preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"mostly-preserves\" onChange={handleOptionChange}  />  Mostly preserves\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"meaning\" value=\"completely-preserves\" onChange={handleOptionChange}  />  Completely preserves\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text contain false or irrelevant information?  </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"not-at-all\" onChange={handleOptionChange}  />  A lot of inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"somewhat\" onChange={handleOptionChange}  />  Several inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"moderately\" onChange={handleOptionChange}  />  Some minor inaccuracies\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"mostly\" onChange={handleOptionChange}  />  Mostly accurate\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"relevancy\" value=\"completely\" onChange={handleOptionChange}  />  Completely accurate\n//                 </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Are there spelling or grammar mistakes in the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"many-errors\" onChange={handleOptionChange}  />  Many mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"several-errors\" onChange={handleOptionChange}  />  Several mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"some-errors\" onChange={handleOptionChange}  />  Some mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"few-errors\" onChange={handleOptionChange}  />  Few mistakes\n//                 </label>\n//                 <label>\n//                   <input type=\"radio\" name=\"grammar\" value=\"no-errors\" onChange={handleOptionChange}  />  No mistakes\n//                 </label>\n//               </div>\n//             </div>\n\n\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text avoid difficult words?     </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"guidelines\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"guidelines\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text use short sentences and clear headings?    </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"clarity\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"clarity\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Does the AI-generated text flow logically from start to finish? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"coherent\" value=\"not-at-all\" onChange={handleOptionChange}  />  Not at all</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"somewhat-follows\" onChange={handleOptionChange}  />  Somewhat </label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"moderately-follows\" onChange={handleOptionChange}  />  Moderately</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"mostly-follows\" onChange={handleOptionChange}  />  Mostly</label>\n//                 <label><input type=\"radio\" name=\"coherent\" value=\"completely-follows\" onChange={handleOptionChange}  />  Completely </label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>How much effort did you need to edit the AI-generated text? </label>\n//               <div className={styles.surveyOptions}>\n//               <label><input type=\"radio\" name=\"editing_effort\" value=\"many-errors\" checked={responses.editing_effort === \"many-errors\"} onChange={handleOptionChange}/>  A lot of effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"several-errors\" checked={responses.editing_effort === \"several-errors\"} onChange={handleOptionChange}/>  Significant effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"some-errors\" checked={responses.editing_effort === \"some-errors\"} onChange={handleOptionChange}/>  Moderate effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"few-errors\" checked={responses.editing_effort === \"few-errors\"} onChange={handleOptionChange}/>  Minimal effort</label>\n//                 <label><input type=\"radio\" name=\"editing_effort\" value=\"no-errors\" checked={responses.editing_effort === \"no-errors\"} onChange={handleOptionChange}/>  No effort at all</label>\n//               </div>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>If you edited the AI-generated text, what were your main reasons for it?</label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"main_reasons\"\n//                 rows=\"3\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.main_reasons}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n\n//             <div className={styles.surveyQuestion}>\n//               <label>Do you have any additional comments about the AI-generated text? </label>\n//               <textarea\n//                 // className={styles.textarea}\n//                 name=\"additional_comments\"\n//                 rows=\"4\"\n//                 cols=\"70\"\n//                 placeholder=\"\"\n//                 value={responses.additional_comments}\n//                 onChange={handleTextChange}\n//               ></textarea>\n//             </div>\n\n//             <div>\n//               <button className={styles.submitButton} type=\"submit\" >Submit</button>\n//             </div>\n\n//           </form>\n\n//         </div>\n//   {/* disabled={!isFormComplete} */}\n//   </div>\n\n// ) : (\n//   // Thank You Message & Redirect\n//   <div className={styles.thankYouContainer}>\n//     <h2>Thank You!</h2>\n//     <p>Your responses have been saved. We appreciate your feedback.</p>\n//     <button\n//       className={styles.redirectButton}\n//       onClick={() => navigate(\"/simplify\", { replace: true })}\n//     >\n//       Start Another Simplification\n//     </button>\n//   </div>\n// )}\n// </div>\n\n\n// </>\n//   );\n// };\n\n// export default SurveyPage;\n\n// src/components/Survey/index.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router‑dom\";\nimport DiffMatchPatch                   from \"diff-match-patch\";\nimport { saveAs }                       from \"file-saver\";\nimport styles                           from \"./styles.module.css\";\n\nconst dmp = new DiffMatchPatch();\n\nconst wordCount = txt => (txt ? txt.trim().split(/\\s+/).filter(Boolean).length : 0);\n\nexport default function SurveyPage() {\n  /* ------------------------------------------------------------------ */\n  /* 1.  Data received from Review.jsx                                  */\n  /* ------------------------------------------------------------------ */\n  const {\n    email,\n    inputText          = \"\",      // original user input\n    generatedText      = \"\",      // AI‑generated text (v1)\n    finalText          = \"\",      // text that was on screen when user hit “Save”\n    saveHistory        = [],      // optional array of previous Save clicks\n  } = useLocation().state || {};\n\n  /* ------------------------------------------------------------------ */\n  /* 2.  Local state – side‑bar, diff toggles, survey answers, etc.     */\n  /* ------------------------------------------------------------------ */\n  const [latestFinal, setLatestFinal] = useState(finalText);\n  const [selectedVersion, setSelectedVersion] = useState(saveHistory.length); // 1‑based\n  const [showDiffIn,  setShowDiffIn]  = useState(false); // input ↔ AI\n  const [showDiffOut, setShowDiffOut] = useState(false); // AI ↔ final\n  const [diffHtmlIn,  setDiffHtmlIn]  = useState(\"\");\n  const [diffHtmlOut, setDiffHtmlOut] = useState(\"\");\n  const [sidebar,     setSidebar]     = useState(false);\n  const [submitted,   setSubmitted]   = useState(false);\n\n  const navigate = useNavigate();\n\n  /* ------------------------------------------------------------------ */\n  /* 3.  Derived values (word counts, diffs)                            */\n  /* ------------------------------------------------------------------ */\n  useEffect(() => {\n    setDiffHtmlIn (dmp.diff_prettyHtml(dmp.diff_main(inputText,  generatedText)));\n    setDiffHtmlOut(dmp.diff_prettyHtml(dmp.diff_main(generatedText, latestFinal)));\n  }, [inputText, generatedText, latestFinal]);\n\n  const inputWords     = wordCount(inputText);\n  const generatedWords = wordCount(generatedText);\n  const finalWords     = wordCount(latestFinal);\n\n  /* ------------------------------------------------------------------ */\n  /* 4.  Survey form state                                              */\n  /* ------------------------------------------------------------------ */\n  const [answers, setAnswers] = useState({\n    needs: null, easy: null, meaning: null, relevancy: null,\n    grammar: null, guidelines: null, clarity: null, coherent: null,\n    editing_effort: null,\n    main_reasons: \"\", additional_comments: \"\",\n  });\n\n  const handleRadio = e =>\n    setAnswers(p => ({ ...p, [e.target.name]: p[e.target.name] === e.target.value ? null : e.target.value }));\n\n  const handleText  = e =>\n    setAnswers(p => ({ ...p, [e.target.name]: e.target.value }));\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await fetch(\"/api/simplifications/survey\", {\n      method : \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body   : JSON.stringify({ email, inputText, responses: answers })\n    });\n    setSubmitted(true);\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* 5.  Version‑history side‑bar                                       */\n  /* ------------------------------------------------------------------ */\n  const pickVersion = idx => {\n    setLatestFinal(saveHistory[idx].finalText);\n    setSelectedVersion(idx + 1);\n  };\n\n  /* ------------------------------------------------------------------ */\n  /* 6.  Early‑exit if router‑state missing (e.g. user refreshed page)  */\n  /* ------------------------------------------------------------------ */\n  if (!email) return <p style={{ padding: 40 }}>No session data found. Please restart a simplification.</p>;\n\n  /* ------------------------------------------------------------------ */\n  /* 7.  Render                                                         */\n  /* ------------------------------------------------------------------ */\n  return (\n    <>\n      {/* ─────────────────────  NAVBAR  ───────────────────── */}\n      <nav className={styles.navbar}>\n        <h1 onClick={() => navigate(\"/\")} style={{ cursor: \"pointer\" }}>Text Simplification Tool</h1>\n        <button className={styles.white_btn} onClick={() => { localStorage.removeItem(\"token\"); navigate(\"/Login\"); }}>\n          Logout\n        </button>\n      </nav>\n\n      <div className={styles.container}>\n        {/* ───────────────  HISTORY SIDEBAR  ─────────────── */}\n        <div className={`${styles.sidebar} ${sidebar ? styles.expanded : \"\"}`}>\n          <button className={styles.historyIcon} onClick={() => setSidebar(s => !s)}>\n            🕒 <p style={{ fontSize: 15 }}>History</p>\n          </button>\n\n          {sidebar && (\n            <div className={styles.historyContent}>\n              <button className={styles.closeButton} onClick={() => setSidebar(false)}>✖</button>\n              <ul className={styles.historyList}>\n                {saveHistory.map((v, i) => (\n                  <li key={i}\n                      className={`${styles.historyItem} ${selectedVersion === i + 1 ? styles.activeVersion : \"\"}`}\n                      onClick={() => pickVersion(i)}>\n                    Version {i + 1}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n\n        {/* ───────────────  MAIN CONTENT  ─────────────── */}\n        <div className={`${styles.mainContent} ${sidebar ? styles.withSidebar : \"\"}`}>\n          {!submitted ? (\n            <>\n              {/* ─────  Triple text‑boxes  ───── */}\n              <div className={styles.textareas_container}>\n                {/* Input */}\n                <TextBox\n                  label=\"Input Text\"\n                  value={inputText}\n                  words={inputWords}\n                  onCopy={() => navigator.clipboard.writeText(inputText)}\n                  filename=\"InputText\"\n                />\n\n                {/* AI gen */}\n                <TextBox\n                  label=\"AI‑generated Text\"\n                  value={generatedText}\n                  words={generatedWords}\n                  onCopy={() => navigator.clipboard.writeText(generatedText)}\n                  filename=\"GeneratedText\"\n                  toggleDiff={{\n                    shown : showDiffIn,\n                    label : showDiffIn ? \"Hide comparison\" : \"Compare with input\",\n                    onClick: () => setShowDiffIn(s => !s)\n                  }}\n                >\n                  {showDiffIn && <DiffBox html={diffHtmlIn} title=\"Input vs AI‑generated\" />}\n                </TextBox>\n\n                {/* Final */}\n                <TextBox\n                  label=\"Final Revised Text\"\n                  value={latestFinal}\n                  words={finalWords}\n                  onCopy={() => navigator.clipboard.writeText(latestFinal)}\n                  filename=\"FinalText\"\n                  toggleDiff={{\n                    shown : showDiffOut,\n                    label : showDiffOut ? \"Hide comparison\" : \"Compare with AI‑generated\",\n                    onClick: () => setShowDiffOut(s => !s)\n                  }}\n                >\n                  {showDiffOut && <DiffBox html={diffHtmlOut} title=\"AI‑generated vs Final\" />}\n                </TextBox>\n              </div>\n\n              {/* ─────  Survey Form  ───── */}\n              <SurveyForm\n                answers={answers}\n                onRadio={handleRadio}\n                onText ={handleText}\n                onSubmit={handleSubmit}\n              />\n            </>\n          ) : (\n            <ThankYou onRestart={() => navigate(\"/simplify\", { replace: true })} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\n/* ------------------------------------------------------------------ */\n/* Helper sub‑components                                              */\n/* ------------------------------------------------------------------ */\nfunction TextBox({ label, value, words, onCopy, filename, toggleDiff, children }) {\n  return (\n    <div className={styles.text_container}>\n      <div className={styles.labelWrapper}>\n        <label className={styles.label}>{label}</label>\n        <div className={styles.actions}>\n          <span className={styles.copyIcon} onClick={onCopy}>📋</span>\n          <span className={styles.copyIcon}\n                onClick={() => saveAs(new Blob([value], { type: \"text/plain;charset=utf-8\" }), `${filename}.txt`)}>\n            📥\n          </span>\n          {toggleDiff && (\n            <button className={styles.toggleDiffBtn} onClick={toggleDiff.onClick}>\n              {toggleDiff.label}\n            </button>\n          )}\n        </div>\n      </div>\n      <p className={styles.wordCount}>Words: {words}</p>\n      <textarea readOnly value={value} className={`${styles.output_box} ${styles.side_by_side}`} />\n      {children}\n    </div>\n  );\n}\n\nconst DiffBox = ({ html, title }) => (\n  <div className={styles.diff_box}>\n    <label className={styles.label}>{title}</label>\n    <div className={styles.diff_output} dangerouslySetInnerHTML={{ __html: html }} />\n  </div>\n);\n\nfunction SurveyForm({ answers, onRadio, onText, onSubmit }) {\n  return (\n    <form className={styles.surveyForm} onSubmit={onSubmit}>\n      <h2>Survey</h2>\n      <h3>Your feedback is valuable (all questions optional).</h3>\n\n      {/* repeat blocks like below for each Likert question … */}\n      <Likert name=\"needs\" label=\"Does the AI‑generated text meet your needs?\" onChange={onRadio} />\n\n      {/* free‑text */}\n      <div className={styles.surveyQuestion}>\n        <label>Main reasons for editing (optional):</label>\n        <textarea name=\"main_reasons\" rows=\"3\" value={answers.main_reasons} onChange={onText} />\n      </div>\n\n      <button className={styles.submitButton} type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nconst Likert = ({ name, label, onChange }) => (\n  <div className={styles.surveyQuestion}>\n    <label>{label}</label>\n    <div className={styles.surveyOptions}>\n      {[\"1\",\"2\",\"3\",\"4\",\"5\"].map(v => (\n        <label key={v}><input type=\"radio\" name={name} value={v} onChange={onChange} /> {v}</label>\n      ))}\n    </div>\n  </div>\n);\n\nconst ThankYou = ({ onRestart }) => (\n  <div className={styles.thankYouContainer}>\n    <h2>Thank you!</h2>\n    <p>Your responses have been saved.</p>\n    <button className={styles.redirectButton} onClick={onRestart}>\n      Start another simplification\n    </button>\n  </div>\n);\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}