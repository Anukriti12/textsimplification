{"ast":null,"code":"// const syllable = require(\"syllable\");         // npm i syllable\n// const flesch   = require(\"flesch-kincaid\");   // npm i flesch-kincaid\n// const uniq     = require(\"lodash/uniq\");\n// exports.calcMetrics = (txt = \"\") => {\n//   const words       = txt.trim().split(/\\s+/).filter(Boolean);\n//   const sentences   = txt.split(/[.!?]+/).filter(Boolean);\n//   const chars       = txt.length;\n//   const charsNoSp   = txt.replace(/\\s+/g, \"\").length;\n//   const syllables   = words.reduce((s, w) => s + syllable(w), 0);\n//   const fk          = flesch({ sentence: sentences.length || 1,\n//                                word: words.length || 1,\n//                                syllable: syllables || 1 });\n//   return {\n//     fleschReadingEase:  fk.ease,\n//     fleschKincaidGrade: fk.grade,\n//     lexicalDensity:     uniq(words).length / words.length || 0,\n//     wordCount:          words.length,\n//     uniqueWords:        uniq(words).length,\n//     sentenceCount:      sentences.length,\n//     avgSentenceLength:  words.length / (sentences.length || 1),\n//     charsWithSpaces:    chars,\n//     charsWithoutSpaces: charsNoSp,\n//     avgCharsPerWord:    charsNoSp / (words.length || 1),\n//     syllableCount:      syllables,\n//     avgSyllablesPerWord: syllables / (words.length || 1),\n//   };\n// };\n// exports.diffStats = (a = \"\", b = \"\") => {\n//   const dmp   = new (require(\"diff-match-patch\"))();\n//   const diffs = dmp.diff_main(a, b);\n//   dmp.diff_cleanupSemantic(diffs);\n//   let insertions = 0,\n//       deletions  = 0;\n//   diffs.forEach(([op, txt]) => {\n//     if (op === 1) insertions += txt.trim().split(/\\s+/).length;\n//     if (op === -1) deletions  += txt.trim().split(/\\s+/).length;\n//   });\n//   return {\n//     distance: dmp.diff_levenshtein(diffs),\n//     insertions,\n//     deletions,\n//   };\n// };\n/* utils/textMetrics.js\n   -------------------------------------------------------------------------- */const syllable=require(\"syllable\");// npm i syllable\nconst fk=require(\"flesch-kincaid\");// npm i flesch-kincaid\nconst uniq=require(\"lodash/uniq\");const DiffMatchPatch=require(\"diff-match-patch\");/* small helper for safe division */const safeDiv=(num,den)=>den?num/den:0;/* --------------------------------------------------------------------------\n    * MAIN TEXT‑METRIC AGGREGATOR\n    * ------------------------------------------------------------------------ */exports.calcMetrics=function(){let txt=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";const words=txt.trim().split(/\\s+/).filter(Boolean);const sentences=txt.split(/[.!?]+/).filter(Boolean);const charsWithSpaces=txt.length;const charsWithoutSpaces=txt.replace(/\\s+/g,\"\").length;const syllableCount=words.reduce((acc,w)=>acc+syllable(w),0);/* FK grade – package returns only grade level */const fkGrade=fk({sentence:sentences.length||1,word:words.length||1,syllable:syllableCount||1});/* Flesch‑Reading‑Ease – compute ourselves */const freEase=206.835-1.015*safeDiv(words.length,sentences.length||1)-84.6*safeDiv(syllableCount,words.length||1);return{/* headline readability scores */fleschReadingEase:Number(freEase.toFixed(2)),fleschKincaidGrade:Number(fkGrade.toFixed(2)),/* lexical / structural stats */lexicalDensity:safeDiv(uniq(words).length,words.length),wordCount:words.length,uniqueWords:uniq(words).length,sentenceCount:sentences.length,avgSentenceLength:Number(safeDiv(words.length,sentences.length||1).toFixed(2)),/* character‑level stats */charsWithSpaces,charsWithoutSpaces,avgCharsPerWord:Number(safeDiv(charsWithoutSpaces,words.length||1).toFixed(2)),/* syllable‑level stats */syllableCount,avgSyllablesPerWord:Number(safeDiv(syllableCount,words.length||1).toFixed(2))};};/* --------------------------------------------------------------------------\n    * DIFF‑BASED EDIT DISTANCE / INSERTIONS / DELETIONS\n    * ------------------------------------------------------------------------ */exports.diffStats=function(){let a=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";let b=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";const dmp=new DiffMatchPatch();const diffs=dmp.diff_main(a,b);dmp.diff_cleanupSemantic(diffs);let insertions=0;let deletions=0;diffs.forEach(_ref=>{let[op,txt]=_ref;const delta=txt.trim().split(/\\s+/).filter(Boolean).length;if(op===1)insertions+=delta;// added in b\nif(op===-1)deletions+=delta;// removed from a\n});return{distance:dmp.diff_levenshtein(diffs),insertions,deletions};};","map":{"version":3,"names":["syllable","require","fk","uniq","DiffMatchPatch","safeDiv","num","den","exports","calcMetrics","txt","arguments","length","undefined","words","trim","split","filter","Boolean","sentences","charsWithSpaces","charsWithoutSpaces","replace","syllableCount","reduce","acc","w","fkGrade","sentence","word","freEase","fleschReadingEase","Number","toFixed","fleschKincaidGrade","lexicalDensity","wordCount","uniqueWords","sentenceCount","avgSentenceLength","avgCharsPerWord","avgSyllablesPerWord","diffStats","a","b","dmp","diffs","diff_main","diff_cleanupSemantic","insertions","deletions","forEach","_ref","op","delta","distance","diff_levenshtein"],"sources":["/Users/anukumar/Desktop/Spring2025/local-textsimplification/client/src/utils/textMetrics.js"],"sourcesContent":["// const syllable = require(\"syllable\");         // npm i syllable\n// const flesch   = require(\"flesch-kincaid\");   // npm i flesch-kincaid\n// const uniq     = require(\"lodash/uniq\");\n\n// exports.calcMetrics = (txt = \"\") => {\n//   const words       = txt.trim().split(/\\s+/).filter(Boolean);\n//   const sentences   = txt.split(/[.!?]+/).filter(Boolean);\n//   const chars       = txt.length;\n//   const charsNoSp   = txt.replace(/\\s+/g, \"\").length;\n//   const syllables   = words.reduce((s, w) => s + syllable(w), 0);\n\n//   const fk          = flesch({ sentence: sentences.length || 1,\n//                                word: words.length || 1,\n//                                syllable: syllables || 1 });\n\n//   return {\n//     fleschReadingEase:  fk.ease,\n//     fleschKincaidGrade: fk.grade,\n//     lexicalDensity:     uniq(words).length / words.length || 0,\n//     wordCount:          words.length,\n//     uniqueWords:        uniq(words).length,\n//     sentenceCount:      sentences.length,\n//     avgSentenceLength:  words.length / (sentences.length || 1),\n//     charsWithSpaces:    chars,\n//     charsWithoutSpaces: charsNoSp,\n//     avgCharsPerWord:    charsNoSp / (words.length || 1),\n//     syllableCount:      syllables,\n//     avgSyllablesPerWord: syllables / (words.length || 1),\n//   };\n// };\n\n// exports.diffStats = (a = \"\", b = \"\") => {\n//   const dmp   = new (require(\"diff-match-patch\"))();\n//   const diffs = dmp.diff_main(a, b);\n//   dmp.diff_cleanupSemantic(diffs);\n\n//   let insertions = 0,\n//       deletions  = 0;\n\n//   diffs.forEach(([op, txt]) => {\n//     if (op === 1) insertions += txt.trim().split(/\\s+/).length;\n//     if (op === -1) deletions  += txt.trim().split(/\\s+/).length;\n//   });\n\n//   return {\n//     distance: dmp.diff_levenshtein(diffs),\n//     insertions,\n//     deletions,\n//   };\n// };\n\n/* utils/textMetrics.js\n   -------------------------------------------------------------------------- */\n\n   const syllable = require(\"syllable\");        // npm i syllable\n   const fk       = require(\"flesch-kincaid\");  // npm i flesch-kincaid\n   const uniq     = require(\"lodash/uniq\");\n   const DiffMatchPatch = require(\"diff-match-patch\");\n   \n   /* small helper for safe division */\n   const safeDiv = (num, den) => (den ? num / den : 0);\n   \n   /* --------------------------------------------------------------------------\n    * MAIN TEXT‑METRIC AGGREGATOR\n    * ------------------------------------------------------------------------ */\n   exports.calcMetrics = (txt = \"\") => {\n     const words     = txt.trim().split(/\\s+/).filter(Boolean);\n     const sentences = txt.split(/[.!?]+/).filter(Boolean);\n     const charsWithSpaces    = txt.length;\n     const charsWithoutSpaces = txt.replace(/\\s+/g, \"\").length;\n     const syllableCount      = words.reduce((acc, w) => acc + syllable(w), 0);\n   \n     /* FK grade – package returns only grade level */\n     const fkGrade = fk({\n       sentence : sentences.length || 1,\n       word     : words.length      || 1,\n       syllable : syllableCount     || 1,\n     });\n   \n     /* Flesch‑Reading‑Ease – compute ourselves */\n     const freEase =\n       206.835 -\n       1.015 * safeDiv(words.length,     sentences.length || 1) -\n       84.6  * safeDiv(syllableCount,    words.length     || 1);\n   \n     return {\n       /* headline readability scores */\n       fleschReadingEase   : Number(freEase.toFixed(2)),\n       fleschKincaidGrade  : Number(fkGrade.toFixed(2)),\n   \n       /* lexical / structural stats */\n       lexicalDensity      : safeDiv(uniq(words).length, words.length),\n       wordCount           : words.length,\n       uniqueWords         : uniq(words).length,\n       sentenceCount       : sentences.length,\n       avgSentenceLength   : Number(\n         safeDiv(words.length, sentences.length || 1).toFixed(2)\n       ),\n   \n       /* character‑level stats */\n       charsWithSpaces,\n       charsWithoutSpaces,\n       avgCharsPerWord     : Number(\n         safeDiv(charsWithoutSpaces, words.length || 1).toFixed(2)\n       ),\n   \n       /* syllable‑level stats */\n       syllableCount,\n       avgSyllablesPerWord : Number(\n         safeDiv(syllableCount, words.length || 1).toFixed(2)\n       ),\n     };\n   };\n   \n   /* --------------------------------------------------------------------------\n    * DIFF‑BASED EDIT DISTANCE / INSERTIONS / DELETIONS\n    * ------------------------------------------------------------------------ */\n   exports.diffStats = (a = \"\", b = \"\") => {\n     const dmp   = new DiffMatchPatch();\n     const diffs = dmp.diff_main(a, b);\n     dmp.diff_cleanupSemantic(diffs);\n   \n     let insertions = 0;\n     let deletions  = 0;\n   \n     diffs.forEach(([op, txt]) => {\n       const delta = txt.trim().split(/\\s+/).filter(Boolean).length;\n       if (op ===  1) insertions += delta;  // added in b\n       if (op === -1) deletions  += delta;  // removed from a\n     });\n   \n     return {\n       distance   : dmp.diff_levenshtein(diffs),\n       insertions,\n       deletions,\n     };\n   };\n   "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}